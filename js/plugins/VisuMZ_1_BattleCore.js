//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.63;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.63] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x1f5c57=_0x4f24;(function(_0x19586e,_0x4aba6e){const _0x15939d=_0x4f24,_0x337075=_0x19586e();while(!![]){try{const _0x18caff=parseInt(_0x15939d(0x269))/0x1+parseInt(_0x15939d(0x74d))/0x2*(-parseInt(_0x15939d(0x35f))/0x3)+parseInt(_0x15939d(0x88e))/0x4*(parseInt(_0x15939d(0x2e5))/0x5)+parseInt(_0x15939d(0x724))/0x6*(-parseInt(_0x15939d(0xc56))/0x7)+-parseInt(_0x15939d(0xae8))/0x8*(parseInt(_0x15939d(0x4ff))/0x9)+-parseInt(_0x15939d(0x2f6))/0xa+parseInt(_0x15939d(0x76f))/0xb;if(_0x18caff===_0x4aba6e)break;else _0x337075['push'](_0x337075['shift']());}catch(_0x13f5be){_0x337075['push'](_0x337075['shift']());}}}(_0x5916,0x25403));function _0x5916(){const _0x1cce7a=['battleSys','Duration','loadBattleback1','BindCommonEventKeysForObj','SvlFh','applyBattleCoreJS','bFJHa','isAttack','requestAnimation','autoBattleWindowRect','Sprite_Actor_updateShadow','isBreakStunned','escape','ecbQo','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','textColor','casting','UNTITLED','resize','ActSeq_Movement_MoveBy','bStis','FFVWf','createHelpWindow','xxotw','_offsetX','pDKxY','SrZDh','_helpWindow','Game_Battler_makeSpeed','toString','544472AntoNT','Zepzo','min','BattleManager_startAction','attachSpritesToDistortionSprite','lMmex','updateStateIconSprite','ActSeq_Zoom_Reset','DistanceX','_handlers','CmdIconAutoBattle','CopyCombatLog','front\x20center','VFylx','setTroopPage','updateShadow','NNhse','bitmapWidth','active','CriticalHitFlat','ActSeq_Motion_MotionType','startMotion','Game_Action_itemHit','createBattleField','startFloat','MpGaugeOffsetY','VisuMZ_3_SideviewBattleUI','Window_BattleLog_performAction','removedStateObjects','applyEasing','_opacityEasing','_mainSprite','Window_SkillList_maxCols','txlze','VisuMZ_3_WeaknessDisplay','applyTargetFilters','alive\x20friends\x20not\x20target','duration','_homeEasing','StatusWindowSelectableBackHide','opponentsUnit','PrioritySortActive','drawTextTopAligned','updateAttachmentSprites','_skillIDs','_index','bottom','extraPositionY','onBattleEnd','RKdTP','drawItemBackground','ShowActorGauge','_animationContainer','startPartyCommandSelection','_methods','finishActionSet','CeOMG','ActSeq_Element_AddElements','makeDamageValue','forceWeaponAnimation','pXvQt','updateAction','Scene_Battle_initialize','battleInjectAni','isSpinning','stopInjectAnimation','NameOffsetY','ActSeq_Angle_WaitForAngle','PreDamage%1JS','nYJii','iOAUj','setHalfActionsPTB','battleUIOffsetY','isAnyoneChangingOpacity','startAction','ixYOw','ActSeq_Motion_WaitMotionFrame','revertTpbCachedActor','inHomePosition','SvMotionIdleSolo-%1-%2','uiInputPosition','prepareBorderActor','updateForceAction','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','_lastPluginCommandInterpreter','isAnimationShownOnBattlePortrait','TpDDR','NLxqh','onDisabledPartyCommandSelection','anchorY','TCRlW','isBattleSys','battlerSmoothImage','removeBuffsAuto','makeSuccess','xovNu','Game_Action_isForOpponent','performAttack','updateAttachedSprites','_commonEventIDs','XgIfi','boxWidth','isEscapeCommandEnabled','smooth','POST-','StartTurnMsg','HxKXa','StateIconOffsetX','canAddSkillCommand','EscapeSuccessJS','SdUbO','Setting','Defeat','XkHQW','_targetFloatHeight','updateAngleCalculations','TargetLocation','gkDMb','YbeOg','ConfigManager_applyData','muAzK','HkcMT','isBusy','_armorPenetration','updateSpin','_skewX','onBattleStartBattleCore','movement','VPgaw','aSxLT','canInput','ActSeqImpact','qWBpF','Game_Battler_performActionStart','_preBattleCommonEvent','cameraClamp','mpqkS','ActSeq_Set_FinishAction','KodJw','_actor','ParseStateNotetags','applyGlobal','yhXIL','gainStoredBoostPoints','process_VisuMZ_BattleCore_PreBattleCommonEvent','zEasP','autoBattleUseSkills','ForceExploited','_flashDuration','Window_BattleLog_displayCurrentState','osYgy','CriticalDuration','canGuard','clearActiveWeaponSlot','isHiddenSkill','Game_Actor_equips','TpGaugeOffsetX','updateShadowBattleCore','battleDisplayText','makeActionOrders','ActSeq_Movement_Scale','_regionBattleback2','chOpp','loadBitmap','_active','startOpacity','_growEasing','auto','_homeWholeDuration','skewBattler','svShadow','setupCriticalEffect','ArPenRate','qRkTk','zkUYg','linkSprite','Sprite_Actor_setBattler','isGuard','Game_Battler_clearMotion','doesPageHaveOnceParallelStart','clearForcedGameTroopSettingsBattleCore','customDamageFormula','font','PostRegenerateJS','drawItemStatus','PopupShiftX','updateHomeMove','iterateBattler','concat','usePremadeActionSequence','updateMotionCount','refresh','setupBlueRedInvertImpactFilter','skillTypes','ActionSequence','AutoMeleeAoE','setupBattleCoreData','TpGaugeOffsetY','getDefeatedEnemies','needsSelection','addChildAt','Gbuqx','zwiMG','displayRemovedStates','_back1Sprite','hpDamageFmt','addedStateObjects','anchorX','getAttackMotionSlot','_colorType','Settings','ActSeq_Angle_Reset','setAttack','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','offsetY','cqUBX','options','battleCommands','showPortraits','battlelog','attackMotions','WaitCount2','ActSeq_Impact_ColorBreak','StepDistanceY','LastSelected','sowEw','commandSymbol','ActSeq_Skew_Reset','bbxuh','DistanceAdjust','WaitForAngle','isActor','_reflectionTarget','createPartyCommandWindow','ActSeq_Movement_WaitForMovement','StepDistanceX','ActSeq_Movement_FaceTarget','version','needsActorInputCancel','commandName','_text','regionId','rXQVn','BattleCmdList','fillRect','_enemyNameContainer','notFocusValid','_weaponSprite','resetBreakShield','setupZoomBlurImpactFilter','makeData','isActiveTpb','kEHYc','addBuff','ActSeq_ChangeAngle','updateStaticSvBattlerFrames','skill','AUTO\x20BATTLE','guard','isItem','DefaultSoftCap','setBattleSkew','isFlipped','CoreEngine','addItemCommand','changeInputWindow','fnordAddedStates','pgUoZ','isOkEnabled','dead','Game_Enemy_transform','eQwLO','WkJtL','YNOoA','_action','XPActorDefaultHeight','fwWQT','_displayBattleCoreTransitionErrorMsg','registerDefeatedEnemy','Scene_Battle_commandFight','bind','process_VisuMZ_BattleCore_PluginParams','ARRAYSTR','open','startTurn','onFloatEnd','BAUKq','addBattleCoreAutoBattleStyleCommand','WaitForAnimation','UZhdr','loadWindowskin','displaySubstitute','actorCommandEscape','ShowAddedDebuff','isAutoBattleCommandAdded','setupDesaturateImpactFilter','isCancelled','hpDamage','onEnemyOk','TdTNM','animationShouldMirror','UrrlG','_actorSprites','getHalfActionsPTB','_battleCoreAddedElements','HISrg','BattleManager_startBattle','displayBattleCoreTransitionErrorMsg','ShowMissEvasion','_lastEnemy','applyCritical','changeCtbChargeTime','_battleLayoutStyle','clearActiveWeaponSet','isAnyProjectilePresent','aZwcO','gaugeLineHeight','resizeWindowBorderStyle','axIfL','ZwcqM','rdlUR','TscZT','enemy','PostStartBattleJS','_cursorSprite','_forcedBattlers','_jumpMaxHeight','QGScf','addLoadListener','spinBattler','setupFont','TCDsC','_forcedHomeY','mainSpriteHeight','ArRedRate','glitch','clearMotion','ActSeq_Set_TargetActionSet','ChargeRate','OffsetAdjust','finalizeScale','isAppeared','ActSeq_Mechanics_HpMpTp','updateCommandNameWindow','eYjPZ','rsmkY','rnQAy','hmdhw','rAuNj','_targetGrowY','_partyCommandWindow','list','isItemCommandEnabled','_battler','start','createTargetsJS','stbGainInstant','_additionalSprites','_multipliers','_interpreter','NameAttachStateIcon','hUeIc','frontviewSpriteY','KzPWo','addCommand','skillItemWindowRectBorderStyle','20594iWNHpp','ActSeq_Horror_NoiseCreate','isStateResist','PostApplyJS','SkillItemBorderCols','performActionEndMembers','VisuMZ_2_DragonbonesUnion','battlerName','CastAnimation','updatePosition','_homeY','BPVGd','calcWindowHeight','_dimmerSprite','SkillsStatesCore','ActSeq_Target_RandTarget','isFloating','save','Scene_Battle_updateBattleProcess','JS\x20%1START\x20ACTION','_floatHeight','setBattlePortrait','displayAddedStates','tsvjj','PostApplyAsUserJS','VariableDmg','setHue','alterActionCostPTB','ActSeq_Zoom_Scale','Parse_Notetags_TraitObjects','addImmortal','isAnyoneSpinning','stop','SvMotionIdleMass-%1-%2','MIN_SAFE_INTEGER','ActSeq_Element_ForceElements','_uiContainer','kDseX','BattleManager_initMembers','onBattleStart','isBattlerGrounded','Scene_Battle_createHelpWindow','createStateSprite','AnchorX','showAnimation','_targetHomeX','MAXMP','lukEffectRate','createString','zeVRD','GroupDigits','Weapon-%1-%2','randomTargets','trim','GuardFormulaJS','addSingleSkillCommands','CswUF','qtVIB','mainSpriteScaleX','message1','setHelpWindow','MotionType','_branch','ShowPortraitsBorderStyle','updateShadowScale','_targetGrowX','prepareCustomActionSequence','setupBattlebackBattleCore','clearBattlerMotionTrailData','XZYAZ','addActor','eysML','ShowRemovedBuff','canUseItemCommand','bqRif','Buffs','_damagePopupArray','AutoBattleBgType','isBattleFlipped','alive\x20enemies\x20not\x20user','commandNameWindowDrawText','FlashColor','uQYCb','WtMuW','Skills','UcvgD','removeChild','isCertainHit','_enemies','Actor','dead\x20battlers','processVictory','callOptions','Window_BattleEnemy_initialize','Game_Battler_regenerateAll','ActSeq_Movement_WaitForOpacity','XMkpi','_regionBattleback1','freezeMotion','getBattlePortrait','_targetSkewY','BjXgK','textAlign','_baseX','_statusWindow','Mirror','ShowWeapon','actorCommandSingleSkill','onJumpEnd','_createCursorArea','ReflectAnimation','CommandVisible','isQueueOptionsMenu','helpWindowRectBorderStyle','_callSceneOptions','allowCollapse','walk','isETB','ActSeq_Mechanics_TextPopup','GHpsG','_growWholeDuration','_forceAction','GEVpM','JLmaD','ActSeq_Camera_Reset','command119','eZpEh','ActSeq_Mechanics_CtbOrder','_animationSprites','setBattleAngle','createHpGaugeSprite','BattleManager_onEncounter','Window_Options_addGeneralOptions','ActSeq_Horror_NoiseRemove','item','_list','Sprite_Battler_isMoving','isPreviousSceneBattleTransitionable','isAtbCastingState','ActSeq_BattleLog_UI','_floatWholeDuration','currentExt','priority','makeDeepCopy','fUgEf','TpbGaugeOffsetX','wjcgm','Game_Battler_performDamage','Mute','VisuMZ_3_BoostAction','ActSeq_Camera_FocusTarget','isBorderStylePortraitShown','weapons','ActSeq_Mechanics_BreakShieldChange','substitute','bossCollapse','ConfigManager_makeData','kapYB','Window_BattleLog_performReflection','commandFight','Sprite_Actor_initMembers','aliveMembers','SStZp','isChangingOpacity','okTargetSelectionVisibility','SkewY','drawItemStyleIconText','_weather','addCombatLogCommand','pBcst','ActSeq_Horror_Clear','setBattleCameraOffset','text\x20target','DVPPZ','_borderPortraitTargetX','NewPopupBottom','zspnJ','DamageFlat','RequiresDefeat','riJCQ','deadMembers','process_VisuMZ_BattleCore_jsFunctions','evalDamageFormula','checkShowHideSwitchNotetags','SceneManager_push','contains','ActSeq_Target_CurrentIndex','ShowCurrentState','ActSeq_DB_DragonbonesMotionAni','ActSeq_Impact_MotionTrailRemove','ReflectPlayback','text','ScaleUp','Window_BattleStatus_initialize','drawItemImageListStyle','ZKvLB','moveBattlerHomeToPoint','windowskin','EVAL','_enemyID','CBsIg','ShowMpDmg','maxBattleMembers','hide','CmdIconOptions','%1Event','HomePosJS','endAction','isDisplayEmergedEnemies','Window_BattleLog_performMagicEvasion','_back2Sprite','trueRandomTarget','onDatabaseLoaded','%1Damage%2JS','FocusY','damageOffsetY','isForOpponentBattleCore','getDualWieldTimes','result','battleEnd','+%1','shadow','stypeId','battleSkew','battleAnimation','Sprite_Enemy_update','HelpAutoBattle','45986sNiqef','ActionEnd','addedDebuffs','Scene_Battle_onActorCancel','zoomDuration','StartTurnShow','battlerShadowScaleX','PostEndBattleJS','oAwNa','TextAlign','MAtRe','dead\x20friends','Sprite_Battler_damageOffsetY','lmMUJ','makeBattleCommand','_angleEasing','ActSeq_Set_SetupAction','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','ENPOO','JS\x20%1DAMAGE\x20%2','ActionItemMsg','ActSeq_Mechanics_DamagePopup','isAutoBattleCommandEnabled','maxCommands','toLowerCase','JTbdK','displayAffectedStatus','updateLink','WaitForSkew','PXKKI','Targets1','Game_Battler_performEvasion','_targetOpacity','HelpSkillType','ArPenFlat','isChanting','createActionSequenceProjectile','displayType','_enemyId','cameraOffsetDuration','getNextSubjectFromPool','BattleManager_processVictory','Window_BattleLog_popBaseLine','OTnmt','battleStatusWindowAnimationContainer','singleSkill','mssut','DamageRate','actions','currentValue','AttachStateOffsetY','svAnchorX','Window_BattleEnemy_show','setCustomDamageFormula','KjVHG','PuxZU','setFrame','ActSeq_Mechanics_OtbOrder','BattleManager_checkBattleEnd','CmdStyle','requestMotionRefresh','setText','onActorOk','OffsetY','isForRandomBattleCore','Window_BattleLog_displayMpDamage','equips','statusWindowRectXPStyle','displayMpDamage','WaitForMovement','reduce','NBCJj','emerge','setBattlerFlip','_cancelButton','Point','TpbGaugeOffsetY','Spriteset_Battle_createBattleField','hRtcx','splice','_homeX','isSceneBattle','ijrTm','drawItemStatusXPStyle','SZMDT','effects','onBattleEndBattleCore','ParseSkillNotetags','battlerSprites','visualHpGauge','addBattleCoreAutoBattleStartupCommand','_eventId','UpJMf','Window_BattleLog_pushBaseLine','removeBuff','wozdJ','drawTextEx','iconText','zWOyM','nnjzw','Window_BattleLog_performMiss','changeAtbCastTime','setHome','PocJv','VUqBk','clearWeaponAnimation','ActSeq_BattleLog_Refresh','iXcml','createMainSprite','expRate','adjustPosition','center','critical','pointY','AEFqc','Exploiter','extraPositionScaledY','ENQzB','removeActor','qYyAw','Game_BattlerBase_eraseState','DamageStyles','performSTBExploiter','mkorp','10lTOTwF','Sprite_StateIcon_updateFrame','addCustomCommands','Window_BattleLog_displayActionResults','battleCameraData','Width','Window_BattleLog_displayTpDamage','EvnkI','GUARD','onAngleEnd','ZwsAg','isSceneChanging','updateWeather','isSideButtonLayout','setActorHome','Game_Action_applyGlobal','Destination','1489420urXsoZ','actor','attackStatesRate','Game_Map_encounterList','command301_PreBattleEvent','MP_Flat','VisuMZ_2_BattleSystemCTB','checkShowHideBattleNotetags','clearOnceParallelInterpreters','NZzZO','SVGtU','all\x20targets','bitmap','clearDamagePopup','eZktT','ANTI_TINT_UI','canAttack','stateMotionIndex','isClicked','xskMN','canAttackBattleCore','performRecovery','KwBYP','helpWindowRect','ActSeq_Motion_FreezeMotionFrame','BattleVictoryJS','name','ActSeq_Projectile_Icon','onEncounterBattleCore','cDCuz','Okrsr','guardSkillId','makeActions','BajCA','_lineHeight','isCTB','isAnyoneSkewing','HwmJW','tpbActorSwitchConditionsMet','flashColor','damageStyle','initBattleCore','rsElL','XnjPn','StatusWindowAttachmentFrontOffsetX','HKxMB','BattleManager_isTpbMainPhase','UeNZI','fCRyr','isDeathStateAffected','makeSpeed','worldTransform','VisuMZ_3_ActSeqImpact','forceSelect','Scene_Battle_stop','DigitGroupingDamageSprites','ETYvs','_appeared','VisuMZ_2_BattleSystemFTB','reXpq','updateOpacity','CWaFc','xUxbN','isAnyoneJumping','YYikv','opacity','ShowHide','Name','startEnemySelection','pointX','stepFlinch','_subject','vhTUE','fwSvG','zvrVs','noise','AhTrB','displayActionResults','waitForOpacity','Targets2','ActSeq_Inject_AnimationPauseResume','getHardDamageCap','MjYpH','zsenB','EngUn','_homeDuration','createDistortionSprite','EscapeFailureJS','criticalHitRate','_deathStateApplied','VisuMZ_3_ActSeqProjectiles','drain','Spriteset_Battle_update','retreat','JumpToLabel','kZlqV','actorCommandAutoBattle','startAttackWeaponAnimation','Sprite_Battler_setBattler','victory','fASxP','EmergeText','inputtingAction','GWvTt','Game_Troop_setup','3LoCtYp','FaceAway','setupActionSet','OxSYz','noSimilarSTypes','StatusWindowAttachmentFrontOffsetY','jumpBattler','Yormw','DualWield','ActorCmd','Formula','Rate','contents','alive\x20actors\x20not\x20user','updateStyleOpacity','attackStates','_enemySprites','Game_Battler_performMiss','reverse','startDamagePopup','HwHFD','Amp','XPSpriteYLocation','blt','damageOffsetX','RHkCo','MgoKJ','drawItem','battleCoreResumeLaunchBattle','TiJvM','removeHorrorEffect','uYZwl','clearFreezeMotionForWeapons','removeAnimation','hasStaticSvBattler','getAttackWeaponAnimationId','message2','ALL\x20SKILLS','ActSeq_Mechanics_BtbGain','refreshBattlerMotions','isIncludedInEnemyWindow','haRJG','createAttachmentSprites','AictG','_dragonbonesSpriteContainer','initialize','collapseType','makeTargets','isForOpponent','FtDpz','_autoBattle','isCommandEnabled','SBstH','_enemy','performCounter','ActSeq_Mechanics_FtbAction','battleMove','RMDtS','displayCurrentState','jqrFX','pCkYL','_motionCount','aeceF','AddHpGaugeOption','isActionSelectionValid','pGpgh','skillId','YOdNr','ActSeq_BattleLog_DisplayAction','hmFKu','_tempActor','StatusWindowAttachmentBackOffsetY','battleCamera','cancelActorInput','hue','drawItemImageXPStyle','drawItemStyleIcon','BattleManager_cancelActorInput','Game_Battler_clearDamagePopup','ActSeq_Impact_ShockwaveEachTargets','Game_BattlerBase_isStateResist','isAlive','default','gLjLA','HpGauge','IconStypeNorm','stateRate','DamageDisplay','tpbCommandFight','process_VisuMZ_BattleCore_TraitObject_Notetags','isBattleMember','Game_BattlerBase_initMembers','createBattleFieldBattleCore','frameDelay','_jumpDuration','NAOLX','Scene_Battle_helpWindowRect','visible','isAnyoneGrowing','upIKB','CriticalDmgFlat','evade','displayFailure','IQZFe','ActSeq_Mechanics_AtbGauge','PostApplyAsTargetJS','AttachStateOffsetX','isOpen','Targets','compareBattlerSprites','_targetAngle','zUHhm','updateBossCollapse','_escapeRatio','setupRgbSplitImpactFilter','getSkillIdWithName','_createDamageContainer','damageFlat','applyData','addDebuff','_skillWindow','Sprite_Battler_setHome','QjiUz','isPTB','sleep','setHandler','_requestRefresh','vPsJT','_commonEventKey','command301','commandOptions','slices','updateUiContainerPosition','TP_Rate','Index','ParseEnemyNotetags','setBattlerMotionTrailData','isTickBased','startMove','launchBattle','battleCommandName','nNsDX','ActSeq_BattleLog_AddText','LEYNl','resetResultSwitches','COMBAT\x20LOG','IkgVS','scope','_flipScaleX','callUpdateHelp','XvDyJ','NameAlwaysHidden','_defeatedEnemies','spell','WEAPON\x20SWAP','drawIcon','PopupOffsetY','FlinchDistanceY','isRightInputMode','owFQP','reserveCommonEvent','ShowAddedBuff','Skill-%1-%2','autoSelectPriority','flashDuration','updateCustomActionSequence','removeAnimationFromContainer','ActSeq_Mechanics_StbExploit','DsETs','displayTpDamage','log','autoBattleStart','Game_BattlerBase_canAttack','rjyAo','PreDamageAsUserJS','NXDpu','Scene_Battle_windowAreaHeight','gGKoJ','ParseActorNotetags','gjYrP','startHomeMove','ShowCritical','PartyCmd','pow','processAnimationRequests','canEscape','PEeqt','ActSeq_Mechanics_EnemyEscape','skills','pauseInjectAnimation','StyleOFF','skillItemWindowRectMiddle','DSnFX','AutoBattleRect','_item','DTmtb','_targetSkewX','yWEIi','DefeatEvent','commandAutoBattle','unrMw','ActSeq_Mechanics_ActionEffect','makeCommandList','Scene_Battle_skillWindowRect','stepForward','WaitComplete','ommyI','Scene_Battle_onEnemyOk','#%1','createEmptyBitmap','missed','GnJUz','performMiss','isAutoBattle','VisuMZ_2_BattleSystemOTB','executeDamage','ActSeq_Movement_HomeMoveToPoint','updateVisibility','clearFreezeMotion','JS\x20%1START\x20BATTLE','makeTargetSelectionMoreVisible','_itemWindow','Sprite_Enemy_updateStateSprite','Scene_Options','_angleDuration','GtrBQ','_iconIndex','Game_Troop_expTotal','_targetIndex','actorCommandWindowRect','_wtypeIDs','Actions','bqJFh','isMagical','setupBattleCore','Sprite_Battleback_adjustPosition','_motion','setVisibleUI','Game_Map_battleback2Name','JSON','ShowFacesListStyle','split','isTriggered','_forcing','power','wohZK','Window_BattleLog_displayMiss','ShowRemovedState','Debuffs','Immortal','actor%1-portrait','close','addChild','YqQKW','isSkillItemWindowsMiddle','oUaBG','MOTIONS','hitRate','mDhjS','_stateIconSprite','Game_Action_itemEffectAddNormalState','moveBattlerToPoint','moveBattlerDistance','startInput','isGrowing','Scene_Battle_createActorCommandWindow','updateEffectContainers','FGRCd','Heuhz','traitSet','Window_BattleLog_performDamage','_animationCount','ParseWeaponNotetags','BackColor','Scene_Map_updateCallMenu','updateMain','uiMenuStyle','clearResult','AllowRandomSpeed','HP_Rate','qHBBP','wait','requestRefresh','jump','skillWindowRect','arPenFlat','makeActionListAutoAttack','Game_Action_clear','addNewState','CommandAddOptions','svBattlerAnchorX','isSkill','getBattlePortraitOffsetX','VisuMZ_4_BreakShields','refreshMotion','startBattle','Actor-%1-%2','rRAbf','Ypllb','createDamageContainer','isNextScene','vgQcJ','BattleManager_updatePhase','hMxJb','Game_Action_evalDamageFormula','revealNewWeaknesses','Yfdza','autoMeleeMultiTargetActionSet','ActSeq_Mechanics_AddState','Scene_Battle_selectPreviousCommand','eraseState','battleCoreTpbMainPhase','Scene_Battle_start','damageRate','selectNextCommandTpb','isSpriteVisible','LTkxQ','skewDuration','dead\x20opponents','isTpbMainPhase','ParseItemNotetags','StatusWindowSkinFilename','evaded','FPqJM','isFTB','Nizul','lnpVP','updateRefresh','extraHeight','setupNegativeImpactFilter','ScaleDown','endAnimation','registerCommand','innerHeight','updateEventMain','DamageStyleList','Scene_Battle_startActorCommandSelection','isAnimationPlaying','ext','battler','_customDamageFormula','ArRedFlat','changeBattlerOpacity','sortDamageSprites','pause','ReBXb','displayItemMessage','Direction','setSvBattlerSprite','bitmapHeight','Game_Interpreter_PluginCommand','sliceMin','lIHqg','BattleManager_onEscapeFailure','evalDamageFormulaBattleCore','WaitCount','createAnimationSprite','Game_Battler_onTurnEnd','CEBxK','Scene_Battle_createAllWindows','angleDuration','MP_Rate','command236','prev\x20target','JKjbi','iOIkC','IAxIM','isSkewing','YOgRy','updateEffectsContainer','WaitForScale','updateBattlebackBitmap','resizeWindowXPStyle','battleSpriteSkew','CplOR','_spriteset','hasSvBattler','BattleManager_processDefeat','setupShockwaveImpactFilter','_commonEventQueue','YYyvp','performDamage','CdxMl','setGuard','ActSeq_Animation_ChangeBattlePortrait','speed','RTkul','ActSeq_ChangeSkew','onAllActionsEnd','setSkill','parent','PostDamage%1JS','popupDamage','cWnYN','_actorCommandWindow','setValue','alive\x20battlers','Spriteset_Battle_createLowerLayer','VariableHeal','_shadowSprite','ucAnj','setActionState','Scene_Battle_startPartyCommandSelection','applyForcedGameTroopSettingsBattleCore','boxHeight','ShuffleArray','lnSNI','onHomeMoveEnd','Slot','waitForEffect','HpGaugeOffsetX','JS\x20BATTLE\x20VICTORY','aXEep','ActionCenteredName','IconStypeMagic','CommonEventID','18tcQgpy','AutoBattleMsg','PostDamageAsTargetJS','Window_BattleLog_displayFailure','Angle','Turns','DkNyd','DefaultStyle','nextActiveWeaponSlot','addSkillCommands','isActing','isOTB','StartName','deathStateId','applyAngleChange','tPVEk','repeats','partyCommandWindowRect','Fywuk','_preemptive','ActSeq_BattleLog_Clear','_battleCoreNoElement','processRandomizedData','clamp','ApplyImmortal','PostStartActionJS','wzBXV','szsGJ','TuFBb','_phase','ActSeq_Movement_WaitForJump','logWindowRect','ActSeq_Mechanics_StbRemoveExcessActions','itemHeight','padding','GEyrW','applyGlobalCommonEventNotetags','JS\x20ESCAPE\x20SUCCESS','alive\x20enemies\x20not\x20target','setImmortal','BARE\x20HANDS','createInnerPortrait','isOpponent','LYWDI','applyGuard','updateWaitMode','jhLLj','svBattlerName','eaOef','ActSeq_Camera_Clamp','Pre','cmSGZ','Scene_Options_maxCommands','displayCounter','autoBattle','WOsYl','skew','ActSeq_Impact_BlueRedInvert','PostApply%1JS','WaitForCamera','PfsMI','vvDQP','height','OgGjS','Game_Party_addActor','ActSeq_Weapon_ClearActiveWeapon','gainTp','createTroopNote','isForOne','addGuardCommand','showNormalAnimation','_duration','battleGrow','BattleStartEvent','setupIconTextPopup','battleOpacity','DistanceY','ResetFocus','transform','isUndecided','updateBattleProcess','delay','dead\x20actors','jLQRp','WaitForOpacity','nzozY','setBattleZoom','isNextSceneBattleTransitionable','_currentAngle','statusTextAutoBattleStyle','requestMotion','ShowHpDmg','isHidden','MBUOl','OXUEM','_target','NameAlwaysSelectOnly','itemWindowRect','startWeaponAnimation','NameOffsetX','UKczY','_shake','Sprite_Enemy_initVisibility','Parse_Notetags_Targets','status','createAllWindows','softDamageCapRate','createCommandNameWindow','thrust','head','BattleManager_startTurn','commandStyleCheck','makeTargetsBattleCore','FullActions','BattleLogRectJS','autoBattleAtStart','\x5cI[%1]%2','optDisplayTp','Wave','forceMotion','ogJrb','makeEscapeRatio','ClearBattleLog','svBattlerShadowVisible','ActSeq_Mechanics_ArmorPenetration','_logWindow','FlashDuration','description','eSNFo','VmCfs','fLavJ','setBattler','HitFlat','initMembersBattleCore','PrioritySortActors','uqAJG','isMeleeSingleTargetAction','isConfused','itemTextAlign','motionSpeed','useDigitGrouping','wpegt','performActionEnd','vQGPo','base','OffsetX','_battlerHue','BravePoints','mpDamage','iqYnT','JbbGe','setHorrorEffectSettings','statusWindowRectBorderStyle','isAnyoneMoving','performActionMotions','placeGauge','StepDuration','battleMembers','ActSeq_Horror_GlitchRemove','isPreviousScene','HBGvA','FaceDirection','CurrentTurn','NameAlwaysVisible','loadBattleback2','loadSvEnemy','call','_frontAttachmentSprite','applyFreezeMotionFrames','VisuMZ_2_BattleSystemPTB','EnableDamageCap','ActSeq_Target_NextTarget','findTargetSprite','Scene_Battle_logWindowRect','_growX','applyDamageCaps','push','_freezeMotionData','Window_BattleLog_update','_shadowScaleY','processForcedAction','gaugeX','actorId','isOptionsCommandAdded','_tempEquipCheck','processRefresh','ParseArmorNotetags','ekCai','gradientFillRect','waitForNewLine','fIfyY','Scene_Battle_update','_growY','TvVJe','Game_Action_isForFriend','updatePointAnimations','ErnuL','qOUTM','ActSeq_BattleLog_WaitForNewLine','addText','Exploited','HUaXL','MessageWait','oaaIx','tmLxg','dataId','xpnrG','CriticalHitRateJS','autoSelectLastSelected','VisuMZ_1_SkillsStatesCore','PostEndActionJS','startJump','_motionType','process_VisuMZ_BattleCore_Failsafes','Scene_Party','sideview_ui','AutoMeleeSolo','Window_BattleLog_performCounter','origin','setActiveWeaponSlot','context','SkillItemStandardCols','FrontViewSelect','CHCqM','getTraitSetKeys','itemEffectAddAttackState','Scene_Battle_selectNextCommand','eRVrK','attack','_backAttachmentSprite','StatusWindowSkinHide','commandNameWindowDrawBackground','%1StartBattleJS','invokeAction','wYUtc','drawSkillCost','innerWidth','addState','textSizeEx','wtynB','AS\x20USER','createMiss','Game_Action_setGuard','iconWidth','parseForcedGameTroopSettingsBattleCore','Sprite_Battler_startMove','tbded','NFkLB','FlOzt','Sprite_Actor_updateFrame','yUxSX','drawItemStatusListStyle','isSelected','magicSkills','wtypeId','atXdZ','ActSeq_Motion_ClearFreezeFrame','arRedFlat','updateJump','_opacityDuration','allowRandomSpeed','Game_Actor_makeActionList','prototype','sQeDD','Sprite_Battler_damageOffsetX','rowSpacing','SvBattlerSolo-%1-%2','randomInt','createKeyJS','formula','Sprite_Enemy_setBattler','includes','Sprite_Actor_moveToStartPosition','Window_BattleLog_popupDamage','isShownOnBattlePortrait','Sprite_Battler_updatePosition','alive\x20friends','aRgpo','adjustFlippedBattlefield','yvVjB','floor','_commandNameWindow','StateIconOffsetY','alphabetic','AdjustRect','_weaponImageId','<CUSTOM\x20ACTION\x20SEQUENCE>','actionEffect','performActionStart','AeLgt','Radius','Battleback','itemRect','textBaseline','applyVariance','selectPreviousCommand','Window_BattleLog_refresh','ActSeq_Movement_BattleStep','Sprite_AnimationMV_updatePosition','_enemyIDs','isForRandom','isMagicSkill','setCursorRect','charged','FVOHn','performCollapse','PopupShiftY','Window_Options_statusText','targetSpritePosition','updateShadowVisibility','yaVdT','setupBattleback','mhp','SkipPartyCmd','JS\x20%1END\x20BATTLE','removeDamageSprite','performTpbActiveCheckSwitch','code','updateBattlebackBitmap1','swapEnemyIDs','ZfUJL','ActSeq_Impact_Negative','alterPriority','AlphaFilter','addAutoBattleCommands','isJumping','missle','createEnemies','wQaPt','updateHpGaugePosition','ZlnFF','Scene_Battle_createPartyCommandWindow','isPartyCommandWindowDisabled','apply','State-%1-%2','ddSCw','growBattler','statusText','_waitMode','addFightCommand','UYgis','PreRegenerateJS','bkdXJ','CommandWidth','Sprite_Battler_update','MotionAni','Enable','refreshCursor','vQYxa','FMkAp','TPGGJ','onTurnEnd','BtxgP','YaIsK','kXFRl','adjustPosition_ScaleToFit','VarianceFormulaJS','pages','remove','vertCells','_speed','inBattle','EJlal','SgcHu','nBNEx','updateBattlerContainer','BattleLayout','battleCorePreBattleCommonEvent','battleEffect','BindCommonEventKeysForGroup','placeStateIcon','rfqvG','isAnyoneInjectAniPrepping','process_VisuMZ_BattleCore_BaseTroops','changeWeather','Height','createActors','alterType','JS\x20%1START\x20TURN','itemCri','TPqBV','pushBaseLine','NPtNn','fJGrj','setBattlerBattleCore','performMoveToPoint','battleSpin','command3011','updateFlip','QzbFM','mainFontSize','_ptbActionCost','setup','StyleName','oUXOQ','ActSeq_Weapon_SetActiveWeapon','gdEFu','CalcActionSpeedJS','_updateCursorFilterArea','callNextMethod','PreApplyAsUserJS','Game_Action_setAttack','startTpbTurn','addGeneralOptions','_visualHpGauge_JustDied','BattleManager_checkSubstitute','drawActorFace','Game_Actor_setup','Scene_Battle_terminate','weatherType','createStateIconSprite','ZerOO','_lines','TWOyd','TimeScale','border','TPB','weaponTypes','BtFUk','BIoAb','magicReflection','_tpbNeedsPartyCommand','ohfbQ','backColor','KXOOE','dimColor2','Item-%1-%2','Game_BattlerBase_canGuard','value1','Game_Battler_onBattleStart','_updateCursorArea','filter','MAXHP','WeaponTypeID','partyCommandWindowRectXPStyle','updateBattlebackBitmap2','BattleCore','ShowEnemyGauge','ConvertCount','animationId','ynMfO','addAutoBattleCommand','updateCollapse','kQVeY','adjustWeaponSpriteOffset','Game_BattlerBase_addNewState','kFRhU','onMoveEnd','_forcedBattleLayout','KyLSx','updatePadding','_immortal','updateStateSprite','displayBuffs','initMembers','ActSeq_Mechanics_CtbSpeed','setMoveEasingType','SvWeaponMass-%1-%2','attackSkillId','BattleManager_onEscapeSuccess','VcCrv','SvWeaponSolo-%1-%2','ecmWS','performAction','_drawTextBody','JS\x20%1APPLY\x20%2','actionSplicePoint','ActSeq_Zoom_WaitForZoom','createCancelButton','animationWait','BattleManager_startInput','isDamagePopupRequested','IObeh','IconSet','PerformAction','weaponImageId','drawText','HTOxd','AlMrh','createShadowSprite','DmbNu','uoDWO','mpHealingFmt','ShowCounter','zadpW','eZjrm','adjustPosition_1for1','replace','hpHealingFmt','cancel','getMenuImage','portrait','redraw','jQYRx','bJFqQ','vgcya','getWtypeIdWithName','createWeather','map','ForceExploiter','hHLzH','QKIwc','maxItems','getItemDamageAmountLabelBattleCore','OCixA','ATTACK','_battleField','_opacityWholeDuration','isAffectedByBreakShield','lqspp','turnOrderChangeOTB','startActorCommandSelection','ActSeq_Impact_Oversaturate','ActSeq_Camera_Offset','Scene_Battle_onEnemyCancel','ceil','PreStartActionJS','DefaultDamageStyle','Scene_Battle_partyCommandWindowRect','resetFontSettings','nameY','createDamageSprite','playOnceParallelInterpreter','DTB','ICMqE','inputting','ARRAYEVAL','addAnimationSpriteToContainer','currentClass','alterChange','drawSingleSkillCost','_growDuration','ActionCount','chantStyle','drawEnemyName','MaMpW','pop','AS\x20TARGET','ForceDeath','cancelButtonText','edJFW','ActSeq_Movement_Spin','addChildToUiContainer','addOptionsCommand','_targets','battleUIOffsetX','_windowLayer','addEscapeCommand','XcKqH','246fYqhmM','ScaleToFit','AGI','clearHorrorEffects','Game_System_initialize','Window_ItemList_maxCols','aHyXD','requestDragonbonesAnimation','getNextDamagePopup','RegExp','SideviewSelect','hardDamageCap','addAttackCommand','MWBvS','die','_injectAnimationSprite','CriticalHitMultiplier','_lastRegenFrameCount','PopupDuration','ParseAllNotetags','CmdTextAlign','_enemyWindow','type','ActSeq_Movement_HomeReset','Game_Battler_onBattleEnd','AsUser','Victory','_distortionSprite','createUIContainer','rfhte','CIQNF','Game_Interpreter_terminate','frameCount','Game_Action_needsSelection','_autoBattleWindow','clearBattleCoreData','removeStatesAuto','messageSpeed','validTargets','enemyId','refreshStatusWindow','263974GzXDxt','ShowSubstitute','createSeparateDamagePopups','isDead','ActSeq_Mechanics_Immortal','playCancel','JS\x20%1END\x20TURN','isSideView','itemEffectAddNormalState','BattleManager_inputtingAction','waitForMovement','bncIE','eqtKM','ActSeq_Motion_PerformAction','statusWindowRect','getSkillTypes','hTmWc','isNMl','ScaleX','_actions','tvAhP','repositionEnemiesByResolution','bsmYt','loadEnemy','_effectType','Game_Action_apply','ndFDX','occasion','requestFauxAnimation','gIntN','RrQkF','checkShowHideSkillNotetags','string','setupHpGaugeSprite','5112712JhiHaY','_skewDuration','ActionEffect','spriteId','regenerateAllBattleCore','_forcedHomeX','hasSkill','user','changeAtbChargeTime','AutoNotetag','eVLyo','ActSeq_Mechanics_Collapse','_cursorArea','updateGrow','drawGauge','isCharging','random','applyItem','position','XPActorCommandLines','iGTIz','_flinched','actionBattleCoreJS','onActorCancel','fight','coreEngineRepositionEnemies','alterCost','battleFloat','getLastPluginCommandInterpreter','CreateCommonEventKeys','windowAreaHeight','Armor-%1-%2','textWidth','updateStateSpriteBattleCore','checkSubstitute','_hpGaugeSprite','YLkBR','gqSUK','max','animation','canMove','cOoVn','PostStartTurnJS','numTargets','removeImmortal','RsyaC','svBattlerData','lURcc','Window_BattleLog_performActionStart','Game_BattlerBase_die','match','_surprise','gainFullActionsPTB','isFrameVisible','ActSeq_Projectile_Picture','_skewWholeDuration','ZDQrS','makeAutoBattleActions','mZUGc','addSkillTypeCommand','partyCommandWindowRectBorderStyle','displayReflection','zZgoJ','getDamageStyle','activate','_floatEasing','MyAaF','fnordRemovedStates','sortEnemies','Window_BattleLog_displayCritical','slice','BreakShields','oYuVg','CriticalColor','bhHWM','wholeActionSet','_updateFilterArea','StatusWindowAttachmentFront','VisuMZ_2_BattleSystemBTB','isWaiting','BaseTroopIDs','setupTextPopup','performReflection','Game_Battler_startTpbTurn','ActionAnimation','expTotal','Window_ActorCommand_setup','WaitForProjectile','GJrfd','waitForAnimation','HelpFight','tWrzl','isPartyTpbInputtable','isMoving','PkjNh','mKdxU','addShowHpGaugeCommand','rGomk','forceEscapeSprite','_jumpHeight','_allTargets','ZPLAf','mpDamageFmt','vAunB','isIOo','initVisibility','Intensity','repositionCancelButtonBorderStyle','loadPicture','XnXmt','ActSeq_Inject_AnimationStart','children','Window_BattleLog_performCollapse','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','needsSelectionBattleCore','isInputting','maxCols','NlVuS','right','isTpbCharged','_currentActor','isFightCommandEnabled','process_VisuMZ_BattleCore_CreateRegExp','Xqnoc','dnFrx','startSpin','CombatLogIcon','ActSeq_BattleLog_PushBaseLine','checkCacheKey','action','getAttackMotion','Game_Party_removeActor','shift','command283','tOgsz','nCCSv','ActSeq_Camera_WaitForCamera','VNqsC','shouldPopupDamage','_endBattle','_executedValue','addWeaponSwapCommand','FyPBW','ActSeq_Movement_FaceDirection','isBattleCoreTargetScope','battleCommandIcon','requestPointAnimation','commandEscape','performMagicEvasion','Reveal','float','ShowReflect','isAlwaysVisible','kSJdy','hsnlP','ydEej','placeTimeGauge','getColor','VAURw','lcwef','BXuEY','turn','statusWindowRectDefaultStyle','_jumpWholeDuration','svAnchorY','WaitForEffect','ARRAYNUM','_attackAnimationId','wazqe','Oqnjm','waitCount','xfEYP','BattleManager_selectNextCommand','QvXdc','MANUAL','commandNameWindowCenter','createDigits','ShowPortraits','gainCurrentActionsFTB','gWLOc','_battlerName','EqxeU','_createEffectsContainer','ActSeq_Motion_RefreshMotion','VisuMZ_2_HorrorEffects','_linkedSprite','addPartyCommand','MpGaugeOffsetX','YGZSE','addedBuffs','SwitchMissEvade','ZuOEk','autoMeleeSingleTargetActionSet','gkTUF','_scene','helpAreaHeight','recoverAll','mainSpriteScaleY','swing','not\x20focus','nhVrF','VisuMZ_1_ElementStatusCore','updateBitmap','autoSelect','PlsIu','_battleCoreBattleStartEvent','_flashColor','subject','return\x200','createBattleUIOffsetX','dying','Nwbpm','Frame','#ffffff','getBattlePortraitFilename','chant','ActSeq_Mechanics_VariablePopup','adjustPosition_ScaleDown','pTnmO','DisablePartyCmd','damage','Game_Action_executeDamage','AntiTintUiElements','allBattleMembers','onRegeneratePlayStateAnimation','ChangeOrderBy','buffAdd','yYnYQ','battleLayoutStyle','battleInjectPrep','dPieq','Avhut','aqhJo','updateInterpreter','kPHEk','_offsetY','TddYQ','PreEndBattleJS','_padding','gainCurrentActionsETB','PZcBH','CmdIconFight','YJefg','ForceRandom','isOptionsCommandEnabled','alive\x20enemies','ZubQE','xhVwS','%1EndTurnJS','_onceParallelInterpreters','mainSprite','setEventCallback','Parse_Notetags_Action','FkoUA','drawBackgroundRect','processDefeat','aFoxB','collapse','mwXKy','setHelpWindowItem','iconIndex','Scene_Map_initializeAfter','DefaultSoftScaler','_inputting','tone','AJZEQ','_emptyBitmap','PostEndTurnJS','auNss','processBattleCoreJS','updateBorderSprite','ParseClassNotetags','createEffectActionSet','Kkbje','_lastAction','hJnUn','_indent','rbVOi','onEscapeFailure','CoYLu','nYLSw','WfcBs','ActSeq_Movement_Jump','MAT','addChildToBack','show','filterArea','358940NCQeok','_damages','performEvasion','index','maxTp','freezeFrame','showEnemyAttackAnimation','HTkTb','XwJvL','dxoxq','turnCount','StatusWindowAttachmentBackOffsetX','Scene_ItemBase_applyItem','helpAreaBottom','loadSystem','visibilityState','setupMotionBlurImpactFilter','isSkipPartyCommandWindow','hdLAT','Text','createPartyCommandWindowBattleCore','iukIJ','performCastAnimation','alterBreakShield','changeBattlebacks','_pattern','ActSeq_Set_WholeActionSet','toUseBoostPoints','motionIdle','Sprite_Enemy_updateCollapse','setBackgroundType','extraPositionX','viCls','isPhysical','Scene_Battle_createCancelButton','RTWAg','canBattlerMove','Window_PartyCommand_initialize','ActSeq_Horror_TVCreate','toUpperCase','HDVhL','_baseY','Sprite_Battler_updateMain','fontSize','SkewX','VisuMZ_0_CoreEngine','_svBattlerData','basicGaugesY','AnchorY','ActSeq_Impact_Desaturate','performAttackSlot','_animation','imHNI','zvYnQ','SwitchCritical','displayReflectionPlayBack','FodnJ','mainSpriteWidth','ActSeq_Mechanics_WaitForEffect','processActorCommandCancelTPB','BattleEndEvent','NextTurn','getFullActionsPTB','_effectsContainer','RPCNc','debuffAdd','fweuK','Scene_Battle_startActorSelection','createAnimationContainer','left','ActSeq_DB_DragonbonesTimeScale','HvMDU','OHGNw','Elements','QoL','mfLmA','isPlaytest','ubiQI','message4','Class-%1-%2','anchor','ARRAYSTRUCT','updateCancel','clear','logActionList','PostDamageAsUserJS','AddOption','useItem','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','Game_Action_makeTargets','isVisualHpGaugeDisplayed','snapForBackground','alive\x20friends\x20not\x20user','SceneManager_isSceneChanging','isEffecting','DamageType%1','NvVvW','ActSeq_Mechanics_EtbAction','AkJMp','drawItemImage','isForFriendBattleCore','stepBack','Sprite_Enemy_createStateIconSprite','isBattleTest','Game_Map_battleback1Name','LJuOw','pzRHW','CheckSkillCommandShowSwitches','BattleLog','Bbmdd','ActSeq_Movement_FacePoint','filters','isSTB','_tpbState','Sprite_Enemy_updateBossCollapse','createBattleUIOffsetY','unshift','checkAutoCustomActionSequenceNotetagEffect','_stypeIDs','AsTarget','create','members','VisuMZ_3_ActSeqCamera','_motionSpeed','EscapeFail','IzApf','createEnemyNames','enemyNames','bgType','createBorderStylePortraitSprite','VisuMZ_2_PartySystem','PRE-','MDF','performWeaponAnimation','onSkewEnd','cAyWJ','StatusWindowAttachmentBack','bGdYN','_damageContainer','createChildSprite','TpbActiveChangeEnabled','uOCth','isBattlerFlipped','Scene_Battle_updateStatusWindowPosition','setSTBExploited','ActionSkillMsg2','WaitForZoom','CreateActionSequenceTargets','updateBorderStyle','destroy','setWaitMode','ShowAddedState','addDamageSprite','parse','hitFlat','Scene_Boot_onDatabaseLoaded','undecided','RevertAngle','Mechanics','forceAction','tpOkV','Window_BattleLog_performEvasion','tjbno','vMjvN','playReflection','ElementStatusCore','displayChangedStates','alive\x20actors\x20not\x20target','FMdyi','isMeleeMultiTargetAction','abs','HelpEscape','Window_BattleLog_clear','displayChangedBuffs','round','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','parameters','terminate','itemLineRect','Damage','_totalValue','command357','startGrow','PNTbS','createBattleFieldContainer','BattleManager_makeActionOrders','traitObjects','processPostBattleCommonEvents','createActorCommandWindowBattleCore','commandStyle','WrVMR','indexOf','onEnemyCancel','okButtonText','PkFrN','isEnemy','%1StartTurnJS','isForFriend','PopupOffsetX','OdHrW','actorCommandCancelTPB','tzehx','cancelTargetSelectionVisibility','WaitForFloat','qEGEV','battlerShadowScaleY','isDying','Scene_Battle_itemWindowRect','kBUlD','initElementStatusCore','jePlQ','getCommonEventIdWithName','_borderPortraitSprite','value','CmdIconItem','Scene_Map_initialize','isAlwaysHidden','createJS','FdtjO','States','Game_Map_setupBattleback','ActionStart','softDamageCap','frameVisible','AutoBattleOK','_angleRevertOnFinish','ARRAYJSON','tTwmD','checkSceneBattleTransitionable','changeTurnOrderByCTB','VlVJO','angle','drawLineText','isAnyoneFloating','isAtbChargingState','+%1\x20MP','onEscapeSuccess','updatePhase','isTpb','LOQoy','qmHVX','repeatTargets','Uqhei','battleZoom','alive\x20battlers\x20not\x20target','HalfActions','getItemDamageAmountLabelOriginal','missile','xToeP','CastPhysical','cFLQN','isBypassDamageCap','createContents','isCustomBattleScope','format','setActiveWeaponSet','opacityStart','OverallFormulaJS','getInputButtonString','_effectDuration','PreStartBattleJS','_targetHomeY','lJWBE','SkillItemMiddleLayout','_canLose','ActSeq_Mechanics_SwapWeapon','VisuMZ_4_CombatLog','moveBattlerHomeDistance','battleback2Name','TKKRQ','Sprite_Animation_targetSpritePosition','_frame','tOGxU','lineRect','changeCtbCastTime','refreshDimmerBitmap','PreStartTurnJS','NameFontSize','zPtiu','clearRect','abnormal','ShuRS','getStypeIdWithName','_drawTextOutline','setBattlerFacePoint','battleJump','MotionIdle','ZkKGf','Window_ActorCommand_initialize','_updateClientArea','<CENTER>%1','Linear','_tempBattler','RQDqz','showHelpWindow','sort','isDuringNonLoopingMotion','GxsGf','_skewEasing','createAutoBattleWindow','JEsIP','attackAnimationIdSlot','note','process_VisuMZ_BattleCore_Action_Notetags','criticalDmgFlat','becomeSTBExploited','JUYlm','setupChild','processBorderActor','twoNE','Window_BattleStatus_drawItemImage','ActSeq_Movement_Skew','dimColor1','Game_Interpreter_updateWaitMode','fUOCj','battleback1Name','changePaintOpacity','onBattleStartOnceParallels','UmHUl','StartTurnWait','battleAngle','Game_Temp_requestAnimation','IWndx','dDqTe','Window_BattleLog_performRecovery','some','lGTIY','process_VisuMZ_BattleCore_CommonEventKeys','createCommandVisibleJS','KWjyx','isTurnBased','performMoveToTargets','MotionFrameWait','ConvertActionSequenceTarget','bcDjA','finishActorInput','targetDistortionSpritePosition','nJNSS','AttackAnimation','cHSQX','encounterList','ActSeq_Mechanics_RemoveState','unchanged','BattleManager_endAction','measureTextWidth','timeScale','dragonbonesData','Sprite_Actor_createStateSprite','_createClientArea','_battlerContainer','Scene_Battle_startEnemySelection','endBattle','update','PreEndTurnJS','twVGn','constructor','ScaleY','Style','VisuMZ_2_WeaponSwapSystem','alignBattleCoreDamageSprite','Ahamw','_baseLineStack','refreshActorPortrait','NameLegacy','criticalDmgRate','move','Scene_Map_launchBattle','lHHZa','length','Game_BattlerBase_refresh','SvBattlerMass-%1-%2','addOnceParallelInterpreter','addTextToCombatLog','WaitCount1','BTestBypass','ActSeq_Mechanics_AnalyzeWeakness','maiXP','onOpacityEnd','loop','QrNyN','addSingleSkillCommand','Enemy','hpAffected','performSubstitute','gainHalfActionsPTB','regenerateAll','sAzMz','currentAction','centerFrontViewSprite','_stateSprite','exit','Sprite_Actor_setActorHome','CmdTextAutoBattle','IZSbB','ActSeq_Impact_TimeStop','iconHeight','JS\x20ESCAPE\x20FAILURE','aIrfI','ConvertParams','initBattlePortrait','Window_BattleLog_performSubstitute','BattleDefeatJS','dead\x20enemies','xxMLY','Game_Interpreter_command301','EkQCW','PreApplyJS','_isBattlerFlipped','battleProjectiles','nSBGY','equipSlots','AWwzW','GoWuU','Game_Action_isForRandom','Override','_battleCoreBattleResumeAfter','_floatDuration','effect','isCustomActionSequence','JS\x20BATTLE\x20DEFEAT','updateFloat','_borderPortraitDuration','drawItemImagePortraitStyle','preparePartyRefresh','destroyDamageSprite','jjATi','rsXhh','gainBravePoints','MHKCe','updateCallMenu','onEncounter','clone','SmoothImage','isBuffAffected','displayCritical','Sprite_Actor_update','_angleWholeDuration','process_VisuMZ_BattleCore_Notetags','updateShadowPosition','friendsUnit','isNonSubmenuCancel','ekkjM','checkTpbInputClose','contentsOpacity','isFastForward','CmdIconEscape','globalAlpha','dECbv','attackAnimationId1','ActSeq_Movement_HomeMoveToTarget','alive\x20battlers\x20not\x20user','_cacheTextWidth','hasBeenDefeatedBefore','_waitCount','lineHeight','Game_Action_numRepeats','gTFio','canGuardBattleCore','_skewY','adjustPosition_ScaleUp','Scene_Battle_onActorOk','_tpbSceneChangeCacheActor','updateFrame','setBattleCameraPoint','moveToStartPosition','VisuMZ_1_MainMenuCore','currentSymbol','vddbg','Sprite_Damage_createChildSprite','TXkIr','EasingType','Window_BattleLog_displayEvasion','ActSeq_Mechanics_StbExtraAction','ActSeq_Impact_ShockwavePoint','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','VisuMZ_2_BattleSystemSTB','CommandAddAutoBattle','PopupPosition','AutoBattle','twfMb','_actionBattlers','alive\x20opponents','getItemDamageAmountTextBattleCore','pUqFc','_battlePortrait','popBaseLine','partyCommandWindowRectDefaultStyle','ActSeq_Impact_MotionBlurTarget','setupDamagePopup','RRsqS','performFlinch','ITsRO','damageContainer','scale','svBattlerAnchorY','zrSnZ','ActionEndUpdate','ActSeq_Inject_AnimationEnd','updateOnceParallelInterpreters','PostDamageJS','setFullActionsPTB','placeActorName','ActSeq_Weapon_NextActiveWeapon','rwSAk','HelpOptions','AnimationID','MfrFs','numRepeats','ActSeq_Horror_TVRemove','_activeWeaponSlot','targetObjects','selectNextCommand','_svBattlerSprite','getEnemyIdWithName','getBattlePortraitOffsetY','%1Apply%2JS','ShowFailure','fittingHeight','displayAction','displayEvasion','param','faceWidth','AutoBattleCancel','_cache','icon','isImmortal','isDTB','KjUex','updateScale','Spriteset_Battle_updateActors','xBeTw','setBattleCameraTargets','aeOsN','setupOversaturateImpactFilter','createHelpWindowBattleCore','startSkew','_actionInputIndex','DEF','Scale','autoBattleStyle','FlinchDistanceX','targetActionSet','YGPLs','isGuardWaiting','isOnCurrentMap','jNQxA','Shadow','dEZpk','ActSeq_Mechanics_Multipliers','_shadowScaleX','OkJee','lQlGy','process_VisuMZ_BattleCore_DamageStyles','setLastPluginCommandInterpreter','makeHpDamageText','applyImmortal','rKpsa','custom','-%1','checkBattleEnd','canAlterActionCostPTB','uRyTF','CheckMapBattleEventValid','displayMiss','current\x20target','ActSeq_Skew_WaitForSkew','removedBuffs','width','performJump','BrQYt','getConfigValue','putActiveBattlerOnTop'];_0x5916=function(){return _0x1cce7a;};return _0x5916();}var label=_0x1f5c57(0x6b3),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x56714a){const _0x28d1eb=_0x1f5c57;return _0x56714a[_0x28d1eb(0x567)]&&_0x56714a[_0x28d1eb(0x57e)]['includes']('['+label+']');})[0x0];VisuMZ[label][_0x1f5c57(0xbba)]=VisuMZ[label][_0x1f5c57(0xbba)]||{},VisuMZ[_0x1f5c57(0xa1c)]=function(_0x44b28a,_0x5e53a5){const _0xabf8cc=_0x1f5c57;for(const _0x467d78 in _0x5e53a5){if(_0x467d78[_0xabf8cc(0x7a1)](/(.*):(.*)/i)){if('MEPuy'!==_0xabf8cc(0x4d5)){const _0x1ab2f0=String(RegExp['$1']),_0x1a6d19=String(RegExp['$2'])['toUpperCase']()['trim']();let _0x2f22f4,_0x44e5d5,_0x1b585f;switch(_0x1a6d19){case'NUM':_0x2f22f4=_0x5e53a5[_0x467d78]!==''?Number(_0x5e53a5[_0x467d78]):0x0;break;case _0xabf8cc(0x815):_0x44e5d5=_0x5e53a5[_0x467d78]!==''?JSON[_0xabf8cc(0x927)](_0x5e53a5[_0x467d78]):[],_0x2f22f4=_0x44e5d5[_0xabf8cc(0x6f1)](_0x49bdea=>Number(_0x49bdea));break;case _0xabf8cc(0x24c):_0x2f22f4=_0x5e53a5[_0x467d78]!==''?eval(_0x5e53a5[_0x467d78]):null;break;case _0xabf8cc(0x70d):_0x44e5d5=_0x5e53a5[_0x467d78]!==''?JSON[_0xabf8cc(0x927)](_0x5e53a5[_0x467d78]):[],_0x2f22f4=_0x44e5d5[_0xabf8cc(0x6f1)](_0x59d7be=>eval(_0x59d7be));break;case _0xabf8cc(0x44e):_0x2f22f4=_0x5e53a5[_0x467d78]!==''?JSON[_0xabf8cc(0x927)](_0x5e53a5[_0x467d78]):'';break;case _0xabf8cc(0x970):_0x44e5d5=_0x5e53a5[_0x467d78]!==''?JSON['parse'](_0x5e53a5[_0x467d78]):[],_0x2f22f4=_0x44e5d5[_0xabf8cc(0x6f1)](_0x1f66c6=>JSON[_0xabf8cc(0x927)](_0x1f66c6));break;case'FUNC':_0x2f22f4=_0x5e53a5[_0x467d78]!==''?new Function(JSON['parse'](_0x5e53a5[_0x467d78])):new Function(_0xabf8cc(0x83f));break;case'ARRAYFUNC':_0x44e5d5=_0x5e53a5[_0x467d78]!==''?JSON[_0xabf8cc(0x927)](_0x5e53a5[_0x467d78]):[],_0x2f22f4=_0x44e5d5[_0xabf8cc(0x6f1)](_0x2c9ce7=>new Function(JSON['parse'](_0x2c9ce7)));break;case'STR':_0x2f22f4=_0x5e53a5[_0x467d78]!==''?String(_0x5e53a5[_0x467d78]):'';break;case _0xabf8cc(0xc02):_0x44e5d5=_0x5e53a5[_0x467d78]!==''?JSON[_0xabf8cc(0x927)](_0x5e53a5[_0x467d78]):[],_0x2f22f4=_0x44e5d5['map'](_0x3fa13b=>String(_0x3fa13b));break;case'STRUCT':_0x1b585f=_0x5e53a5[_0x467d78]!==''?JSON[_0xabf8cc(0x927)](_0x5e53a5[_0x467d78]):{},_0x44b28a[_0x1ab2f0]={},VisuMZ[_0xabf8cc(0xa1c)](_0x44b28a[_0x1ab2f0],_0x1b585f);continue;case _0xabf8cc(0x8df):_0x44e5d5=_0x5e53a5[_0x467d78]!==''?JSON[_0xabf8cc(0x927)](_0x5e53a5[_0x467d78]):[],_0x2f22f4=_0x44e5d5['map'](_0x3017af=>VisuMZ[_0xabf8cc(0xa1c)]({},JSON['parse'](_0x3017af)));break;default:continue;}_0x44b28a[_0x1ab2f0]=_0x2f22f4;}else{let _0x59d353=_0x431f39(_0x37a288['$1']);while(_0x59d353--){const _0x467984=_0x4b2e14[_0xabf8cc(0x60a)](0x2)===0x0?this[_0xabf8cc(0xb10)]():this[_0xabf8cc(0xa45)]();_0x23ed76['push'](_0x467984[_0xabf8cc(0x259)]());}return this['repeatTargets'](_0x198db5);}}}return _0x44b28a;},(_0x32c894=>{const _0x5218ba=_0x1f5c57,_0x2852c4=_0x32c894[_0x5218ba(0x310)];for(const _0x1aaa76 of dependencies){if(_0x5218ba(0x6e4)===_0x5218ba(0x6e4)){if(!Imported[_0x1aaa76]){alert(_0x5218ba(0xa68)[_0x5218ba(0x98c)](_0x2852c4,_0x1aaa76)),SceneManager['exit']();break;}}else _0x41af8d[_0x5218ba(0x231)](0x0,0x0,_0x42ab2e[_0x5218ba(0xacb)],_0x2de26f[_0x5218ba(0xa64)]);}const _0xd4015a=_0x32c894[_0x5218ba(0x57e)];if(_0xd4015a[_0x5218ba(0x7a1)](/\[Version[ ](.*?)\]/i)){const _0x25c72c=Number(RegExp['$1']);_0x25c72c!==VisuMZ[label][_0x5218ba(0xbd5)]&&(alert(_0x5218ba(0x27a)[_0x5218ba(0x98c)](_0x2852c4,_0x25c72c)),SceneManager[_0x5218ba(0xa14)]());}if(_0xd4015a['match'](/\[Tier[ ](\d+)\]/i)){const _0x3cda2e=Number(RegExp['$1']);_0x3cda2e<tier?(alert(_0x5218ba(0x8e6)[_0x5218ba(0x98c)](_0x2852c4,_0x3cda2e,tier)),SceneManager[_0x5218ba(0xa14)]()):tier=Math[_0x5218ba(0x795)](_0x3cda2e,tier);}VisuMZ['ConvertParams'](VisuMZ[label][_0x5218ba(0xbba)],_0x32c894[_0x5218ba(0x93e)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x552f18){const _0xad9a2e=_0x1f5c57;let _0x4bdff1=[];for(const _0x325f49 of _0x552f18){_0x4bdff1=_0x4bdff1['concat'](VisuMZ['ConvertActionSequenceTarget'](_0x325f49));}return _0x4bdff1[_0xad9a2e(0x6ae)](_0xbeb5be=>_0xbeb5be);},VisuMZ[_0x1f5c57(0x9db)]=function(_0x2e741f){const _0x217dec=_0x1f5c57,_0x4dde27=BattleManager[_0x217dec(0x84e)]()['filter'](_0x3987e7=>_0x3987e7&&_0x3987e7['isAppeared']()),_0x1451d2=BattleManager[_0x217dec(0x33d)],_0x44019c=BattleManager[_0x217dec(0x55e)],_0x3728ee=BattleManager[_0x217dec(0x7d3)]?BattleManager['_allTargets'][_0x217dec(0x7b5)](0x0):_0x4dde27;_0x2e741f=_0x2e741f['toLowerCase']()[_0x217dec(0xc8b)]();if(_0x2e741f===_0x217dec(0x776)){if('kkdGw'!==_0x217dec(0x424))return[_0x1451d2];else{if(this['constructor']!==_0x4ae091)return![];if(!_0x2dc1e9['isSceneBattle']())return![];return _0x49edcf['BattleCore']['Settings']['BattleLayout']['ShowPortraitsBorderStyle'];}}else{if(_0x2e741f===_0x217dec(0xac2))return[_0x44019c];else{if(_0x2e741f===_0x217dec(0x4ca)){if(_0x44019c){const _0x587506=_0x3728ee[_0x217dec(0x94d)](_0x44019c);return _0x587506>=0x0?[_0x3728ee[_0x587506-0x1]||_0x44019c]:[_0x44019c];}}else{if(_0x2e741f===_0x217dec(0x232)){if(_0x44019c){const _0x3d3f06=_0x3728ee['indexOf'](_0x44019c);return _0x3d3f06>=0x0?[_0x3728ee[_0x3d3f06+0x1]||_0x44019c]:[_0x44019c];}}else{if(_0x2e741f===_0x217dec(0x301))return _0x3728ee;else{if(_0x2e741f==='focus'){if(_0x217dec(0x447)==='bqJFh')return[_0x1451d2][_0x217dec(0xba4)](_0x3728ee);else{const _0x29faf1=_0x2ebb42(_0x420804['$1']);this[_0x217dec(0xa0a)](_0x4d9484[_0x29faf1]);}}else{if(_0x2e741f===_0x217dec(0x836))return _0x4dde27[_0x217dec(0x6ae)](_0x31a5c1=>_0x31a5c1!==_0x1451d2&&!_0x3728ee[_0x217dec(0x60e)](_0x31a5c1)&&_0x31a5c1[_0x217dec(0xbde)]());}}}}}}if(_0x1451d2){if(_0x2e741f===_0x217dec(0x613))return _0x1451d2['friendsUnit']()[_0x217dec(0x227)]();else{if(_0x2e741f===_0x217dec(0x8ea)){if(_0x217dec(0x488)===_0x217dec(0x488))return _0x1451d2[_0x217dec(0xa45)]()[_0x217dec(0x227)]()[_0x217dec(0x6ae)](_0x46c567=>_0x46c567!==_0x1451d2);else _0x50448b=_0x4587e5(_0x486219['$1']);}else{if(_0x2e741f===_0x217dec(0xb0c))return _0x1451d2[_0x217dec(0xa45)]()[_0x217dec(0x227)]()[_0x217dec(0x6ae)](_0x3d6d45=>_0x3d6d45!==_0x44019c);else{if(_0x2e741f===_0x217dec(0x274))return _0x1451d2[_0x217dec(0xa45)]()[_0x217dec(0x23a)]();else{if(_0x2e741f[_0x217dec(0x7a1)](/FRIEND INDEX (\d+)/i)){if(_0x217dec(0x70b)!==_0x217dec(0x70b))return _0x30cb6c[_0x217dec(0xb10)]()[_0x217dec(0x227)]();else{const _0x21dc0c=Number(RegExp['$1']);return[_0x1451d2['friendsUnit']()[_0x217dec(0x907)]()[_0x21dc0c]];}}}}}}if(_0x2e741f===_0x217dec(0xa6f)){if('krkwU'!=='krkwU')_0xcfb15a[_0x217dec(0x6b3)]['Spriteset_Battle_update']['call'](this),this['updateUiContainerPosition'](),this[_0x217dec(0x2f1)]();else return _0x1451d2[_0x217dec(0xb10)]()['aliveMembers']();}else{if(_0x2e741f==='alive\x20opponents\x20not\x20target')return _0x1451d2['opponentsUnit']()['aliveMembers']()[_0x217dec(0x6ae)](_0x4d283a=>_0x4d283a!==_0x44019c);else{if(_0x2e741f===_0x217dec(0x49d))return _0x1451d2[_0x217dec(0xb10)]()['deadMembers']();else{if(_0x2e741f[_0x217dec(0x7a1)](/OPPONENT INDEX (\d+)/i)){const _0x999310=Number(RegExp['$1']);return[_0x1451d2[_0x217dec(0xb10)]()[_0x217dec(0x907)]()[_0x999310]];}}}}}if(_0x2e741f==='alive\x20actors')return $gameParty['aliveMembers']();else{if(_0x2e741f===_0x217dec(0x36c))return $gameParty['aliveMembers']()[_0x217dec(0x6ae)](_0x4a24f5=>_0x4a24f5!==_0x1451d2);else{if(_0x2e741f===_0x217dec(0x935)){if('hHLzH'===_0x217dec(0x6f3))return $gameParty[_0x217dec(0x227)]()['filter'](_0x2c2360=>_0x2c2360!==_0x44019c);else _0x428dc8[_0x217dec(0x203)]([_0x327b94]);}else{if(_0x2e741f===_0x217dec(0x551))return $gameParty['deadMembers']();else{if(_0x2e741f['match'](/ACTOR INDEX (\d+)/i)){const _0x4af706=Number(RegExp['$1']);return[$gameParty[_0x217dec(0x907)]()[_0x4af706]];}else{if(_0x2e741f[_0x217dec(0x7a1)](/ACTOR ID (\d+)/i)){if(_0x217dec(0xb24)!==_0x217dec(0xb24))_0x1b254c[_0x217dec(0x8e9)]();else{const _0x471faf=Number(RegExp['$1']);return[$gameActors['actor'](_0x471faf)];}}}}}}}if(_0x2e741f===_0x217dec(0x864)){if(_0x217dec(0x331)!=='QPTfc')return $gameTroop[_0x217dec(0x227)]();else this['_visualHpGauge_JustDied']=!this[_0x217dec(0xa52)](),_0x1a1dad[_0x217dec(0xbfe)](this['enemyId']());}else{if(_0x2e741f===_0x217dec(0x1d5))return _0x217dec(0xa77)!==_0x217dec(0xa77)?_0x450a78[_0x217dec(0x6b3)][_0x217dec(0x729)][_0x217dec(0x5a5)](this):$gameTroop[_0x217dec(0x227)]()['filter'](_0x146b77=>_0x146b77!==_0x1451d2);else{if(_0x2e741f===_0x217dec(0x525)){if(_0x217dec(0x39b)===_0x217dec(0x91b))_0xc2b024['BattleCore'][_0x217dec(0x87e)][_0x217dec(0x5a5)](this,_0x278057);else return $gameTroop[_0x217dec(0x227)]()['filter'](_0x57ef82=>_0x57ef82!==_0x44019c);}else{if(_0x2e741f===_0x217dec(0xa20))return $gameTroop['deadMembers']();else{if(_0x2e741f[_0x217dec(0x7a1)](/ENEMY INDEX (\d+)/i)){const _0x10b23d=Number(RegExp['$1']);return[$gameTroop[_0x217dec(0x907)]()[_0x10b23d]];}else{if(_0x2e741f[_0x217dec(0x7a1)](/ENEMY ID (\d+)/i)){const _0x137ac4=Number(RegExp['$1']);return $gameTroop[_0x217dec(0x227)]()[_0x217dec(0x6ae)](_0x28e48a=>_0x28e48a['enemyId']()===_0x137ac4);}}}}}}if(_0x2e741f===_0x217dec(0x4eb)){if(_0x217dec(0x320)!==_0x217dec(0x320))this[_0x217dec(0xb1e)][_0x217dec(0x2b8)](_0x396751,0x0,_0x4643fe);else return _0x4dde27['filter'](_0x38c385=>_0x38c385[_0x217dec(0x3b0)]());}else{if(_0x2e741f===_0x217dec(0xa50)){if(_0x217dec(0x37e)!=='WNqFR')return _0x4dde27[_0x217dec(0x6ae)](_0xedf392=>_0xedf392[_0x217dec(0x3b0)]()&&_0xedf392!==_0x1451d2);else this[_0x217dec(0xafd)](_0x217dec(0xbf5));}else{if(_0x2e741f===_0x217dec(0x982))return _0x4dde27['filter'](_0x19e8b2=>_0x19e8b2[_0x217dec(0x3b0)]()&&_0x19e8b2!==_0x44019c);else{if(_0x2e741f===_0x217dec(0x1e0))return _0x4dde27[_0x217dec(0x6ae)](_0x4edbe0=>_0x4edbe0[_0x217dec(0x750)]());}}}return[];},PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x279),_0x4f80bb=>{const _0x54f942=_0x1f5c57;if(!SceneManager[_0x54f942(0x2ba)]())return;VisuMZ['ConvertParams'](_0x4f80bb,_0x4f80bb);const _0x4d6a04=$gameTemp[_0x54f942(0x78b)](),_0x5031d7=BattleManager[_0x54f942(0xbfa)],_0x242cea=BattleManager[_0x54f942(0x33d)],_0x5edd47=BattleManager[_0x54f942(0x7d3)]?BattleManager[_0x54f942(0x7d3)][_0x54f942(0x7b5)](0x0):[],_0x27b45b=BattleManager[_0x54f942(0x57c)];if(!_0x4d6a04||!_0x5031d7||!_0x242cea)return;if(!_0x5031d7[_0x54f942(0x20c)]())return;if(_0x4f80bb['DisplayAction'])_0x27b45b[_0x54f942(0xa94)](_0x242cea,_0x5031d7[_0x54f942(0x20c)]());_0x4f80bb[_0x54f942(0x517)]&&_0x27b45b['push'](_0x54f942(0xab9),_0x242cea,_0x5edd47,!![]);if(_0x4f80bb[_0x54f942(0x96b)])_0x27b45b['push']('performActionStart',_0x242cea,_0x5031d7);if(_0x4f80bb[_0x54f942(0x2ae)])_0x27b45b[_0x54f942(0x5af)]('waitForMovement');if(_0x4f80bb[_0x54f942(0xc5e)])_0x27b45b['push']('performCastAnimation',_0x242cea,_0x5031d7);if(_0x4f80bb[_0x54f942(0xc08)])_0x27b45b['push'](_0x54f942(0x7c8));_0x4d6a04[_0x54f942(0x924)]('battlelog');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x8a8),_0x2cfa85=>{const _0x248746=_0x1f5c57;if(!SceneManager[_0x248746(0x2ba)]())return;VisuMZ['ConvertParams'](_0x2cfa85,_0x2cfa85);const _0x1df98d=$gameTemp[_0x248746(0x78b)](),_0x198e98=BattleManager[_0x248746(0xbfa)],_0x69e50e=BattleManager[_0x248746(0x33d)],_0x217897=BattleManager[_0x248746(0x7d3)]?BattleManager['_allTargets']['slice'](0x0):[],_0xf4e182=BattleManager['_logWindow'],_0x4ca392=_0x2cfa85['DualWield']??![];if(!_0x1df98d||!_0x198e98||!_0x69e50e)return;if(!_0x198e98['item']())return;let _0x492a1d=_0x4ca392?_0xf4e182[_0x248746(0x25f)](_0x69e50e):0x1;for(let _0x2f4278=0x0;_0x2f4278<_0x492a1d;_0x2f4278++){_0x4ca392&&_0x69e50e[_0x248746(0xbcf)]()&&_0xf4e182[_0x248746(0x5af)](_0x248746(0x98d),_0x69e50e,_0x2f4278);if(_0x2cfa85[_0x248746(0x6d9)])_0xf4e182[_0x248746(0x5af)](_0x248746(0x6ce),_0x69e50e,_0x198e98);if(_0x2cfa85['WaitCount']>0x0)_0xf4e182[_0x248746(0x5af)](_0x248746(0x819),_0x2cfa85[_0x248746(0x4c2)]);if(_0x2cfa85[_0x248746(0x7c3)])_0xf4e182[_0x248746(0x5af)](_0x248746(0xc82),_0x69e50e,_0x217897,_0x198e98[_0x248746(0x20c)]()['animationId']);if(_0x2cfa85[_0x248746(0xc08)])_0xf4e182[_0x248746(0x5af)](_0x248746(0x7c8));for(const _0x1b1987 of _0x217897){if(!_0x1b1987)continue;if(_0x2cfa85[_0x248746(0x771)])_0xf4e182[_0x248746(0x5af)](_0x248746(0x61e),_0x69e50e,_0x1b1987);}}_0x4ca392&&_0x69e50e[_0x248746(0xbcf)]()&&_0xf4e182[_0x248746(0x5af)]('clearActiveWeaponSet',_0x69e50e);if(_0x2cfa85[_0x248746(0x517)])_0xf4e182[_0x248746(0x5af)](_0x248746(0xab9),_0x69e50e,_0x217897,![]);_0x1df98d['setWaitMode']('battlelog');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xc39),_0x282050=>{const _0x189008=_0x1f5c57;if(!SceneManager[_0x189008(0x2ba)]())return;VisuMZ[_0x189008(0xa1c)](_0x282050,_0x282050);const _0x26f199=$gameTemp[_0x189008(0x78b)](),_0x433142=BattleManager['_action'],_0x8de9f9=BattleManager[_0x189008(0x33d)],_0x1f4561=BattleManager[_0x189008(0x7d3)]?BattleManager[_0x189008(0x7d3)][_0x189008(0x7b5)](0x0):[],_0x533f28=BattleManager[_0x189008(0x57c)],_0x26d502=_0x282050[_0x189008(0x367)]??![];if(!_0x26f199||!_0x433142||!_0x8de9f9)return;if(!_0x433142[_0x189008(0x20c)]())return;let _0x1881b1=_0x26d502?_0x533f28[_0x189008(0x25f)](_0x8de9f9):0x1;for(let _0x164362=0x0;_0x164362<_0x1881b1;_0x164362++){if(_0x189008(0x580)!==_0x189008(0x884))for(const _0x26a629 of _0x1f4561){if(!_0x26a629)continue;_0x26d502&&_0x8de9f9[_0x189008(0xbcf)]()&&_0x533f28[_0x189008(0x5af)](_0x189008(0x98d),_0x8de9f9,_0x164362);if(_0x282050[_0x189008(0x6d9)])_0x533f28[_0x189008(0x5af)](_0x189008(0x6ce),_0x8de9f9,_0x433142);if(_0x282050[_0x189008(0xa03)]>0x0)_0x533f28[_0x189008(0x5af)]('waitCount',_0x282050[_0x189008(0xa03)]);if(_0x282050[_0x189008(0x7c3)])_0x533f28[_0x189008(0x5af)](_0x189008(0xc82),_0x8de9f9,[_0x26a629],_0x433142[_0x189008(0x20c)]()['animationId']);if(_0x282050['WaitCount2']>0x0)_0x533f28['push'](_0x189008(0x819),_0x282050[_0x189008(0xbc5)]);if(_0x282050[_0x189008(0x771)])_0x533f28[_0x189008(0x5af)]('actionEffect',_0x8de9f9,_0x26a629);}else this[_0x189008(0x2b3)]['x']=-this[_0x189008(0x2b3)]['width']-0x4;}_0x26d502&&_0x8de9f9[_0x189008(0xbcf)]()&&_0x533f28[_0x189008(0x5af)]('clearActiveWeaponSet',_0x8de9f9);if(_0x282050[_0x189008(0x517)])_0x533f28[_0x189008(0x5af)](_0x189008(0xab9),_0x8de9f9,_0x1f4561,![]);_0x26f199['setWaitMode'](_0x189008(0xbc3));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0xb71),_0x355822=>{const _0xe9f88c=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xe9f88c(0xa1c)](_0x355822,_0x355822);const _0x472cb9=$gameTemp[_0xe9f88c(0x78b)](),_0x3c8851=BattleManager[_0xe9f88c(0xbfa)],_0x458f06=BattleManager[_0xe9f88c(0x33d)],_0x5c3f96=BattleManager['_allTargets']?BattleManager[_0xe9f88c(0x7d3)][_0xe9f88c(0x7b5)](0x0):[],_0x4e9082=BattleManager[_0xe9f88c(0x57c)];if(!_0x472cb9||!_0x3c8851||!_0x458f06)return;if(!_0x3c8851[_0xe9f88c(0x20c)]())return;if(_0x355822[_0xe9f88c(0x517)])_0x4e9082[_0xe9f88c(0x5af)](_0xe9f88c(0xab9),_0x458f06,_0x5c3f96,![]);if(_0x355822['WaitForNewLine'])_0x4e9082[_0xe9f88c(0x5af)]('waitForNewLine');if(_0x355822[_0xe9f88c(0x814)])_0x4e9082[_0xe9f88c(0x5af)](_0xe9f88c(0x4f8));if(_0x355822[_0xe9f88c(0x579)])_0x4e9082[_0xe9f88c(0x5af)](_0xe9f88c(0x8e1));if(_0x355822[_0xe9f88c(0x26a)])_0x4e9082[_0xe9f88c(0x5af)](_0xe9f88c(0x58d),_0x458f06);if(_0x355822[_0xe9f88c(0x2ae)])_0x4e9082['push'](_0xe9f88c(0x757));_0x472cb9[_0xe9f88c(0x924)](_0xe9f88c(0xbc3));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0xbe6),_0x138ef9=>{const _0x30e992=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x30e992(0x908)])return;VisuMZ[_0x30e992(0xa1c)](_0x138ef9,_0x138ef9);const _0x13faa6=$gameTemp[_0x30e992(0x78b)](),_0x1cc137=_0x138ef9[_0x30e992(0xbce)];if(!_0x13faa6)return;$gameScreen[_0x30e992(0x207)](_0x138ef9['Angle'],_0x138ef9[_0x30e992(0xacb)],_0x138ef9[_0x30e992(0xa64)]);if(_0x1cc137)_0x13faa6[_0x30e992(0x924)](_0x30e992(0x9ce));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0xbbb),_0x59716a=>{const _0x306696=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x306696(0x908)])return;VisuMZ['ConvertParams'](_0x59716a,_0x59716a);const _0x13451b=$gameTemp[_0x306696(0x78b)](),_0x2aab0d=_0x59716a[_0x306696(0xbce)];if(!_0x13451b)return;$gameScreen['setBattleAngle'](0x0,_0x59716a['Duration'],_0x59716a[_0x306696(0xa64)]);if(_0x2aab0d)_0x13451b[_0x306696(0x924)]('battleAngle');}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0xb2b),_0x3d81db=>{const _0x1fb761=_0x1f5c57;if(!SceneManager[_0x1fb761(0x2ba)]())return;if(!Imported[_0x1fb761(0x908)])return;const _0x211c15=$gameTemp[_0x1fb761(0x78b)]();if(!_0x211c15)return;_0x211c15[_0x1fb761(0x924)](_0x1fb761(0x9ce));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Animation_ActionAnimation',_0x27fefa=>{const _0xf8795c=_0x1f5c57;if(!SceneManager[_0xf8795c(0x2ba)]())return;VisuMZ[_0xf8795c(0xa1c)](_0x27fefa,_0x27fefa);const _0x1cf2c8=$gameTemp['getLastPluginCommandInterpreter'](),_0x3557e5=BattleManager['_action'],_0x37bad7=BattleManager['_subject'],_0x206435=VisuMZ[_0xf8795c(0x921)](_0x27fefa['Targets']),_0x598c92=_0x27fefa[_0xf8795c(0x1ef)],_0x14f3a9=BattleManager['_logWindow'];if(!_0x1cf2c8||!_0x3557e5||!_0x37bad7)return;if(!_0x3557e5[_0xf8795c(0x20c)]())return;let _0x1e30fa=_0x3557e5[_0xf8795c(0x20c)]()[_0xf8795c(0x6b6)];if(_0x1e30fa<0x0)_0x1e30fa=_0x37bad7[_0xf8795c(0xa4e)]();$gameTemp['requestAnimation'](_0x206435,_0x1e30fa,_0x598c92);if(_0x27fefa['WaitForAnimation']){if('tOGxU'===_0xf8795c(0x99e))_0x1cf2c8['setWaitMode'](_0xf8795c(0x266));else{if(_0x4c81ea){const _0x3dbe9b=_0x557918[_0xf8795c(0x94d)](_0xa0b30b);return _0x3dbe9b>=0x0?[_0x1efc7a[_0x3dbe9b-0x1]||_0x4eea81]:[_0x517c95];}}}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Animation_AttackAnimation',_0x545fdc=>{const _0x20f1cd=_0x1f5c57;if(!SceneManager[_0x20f1cd(0x2ba)]())return;VisuMZ['ConvertParams'](_0x545fdc,_0x545fdc);const _0x18b6bf=$gameTemp[_0x20f1cd(0x78b)](),_0x4bbf92=BattleManager[_0x20f1cd(0x33d)],_0x51140e=VisuMZ[_0x20f1cd(0x921)](_0x545fdc[_0x20f1cd(0x3cb)]),_0x1911f5=_0x545fdc[_0x20f1cd(0x1ef)],_0x3eb1cf=BattleManager[_0x20f1cd(0x57c)];if(!_0x18b6bf||!_0x4bbf92)return;const _0x3bf838=_0x4bbf92['attackAnimationId1']();$gameTemp[_0x20f1cd(0xad2)](_0x51140e,_0x3bf838,_0x1911f5),_0x545fdc[_0x20f1cd(0xc08)]&&_0x18b6bf[_0x20f1cd(0x924)](_0x20f1cd(0x266));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Animation_AttackAnimation2',_0x3173ac=>{const _0x2d9e4e=_0x1f5c57;if(!SceneManager[_0x2d9e4e(0x2ba)]())return;VisuMZ[_0x2d9e4e(0xa1c)](_0x3173ac,_0x3173ac);const _0x4de346=_0x464791['attackAnimationIdSlot'](_0x3173ac['Slot']);if(_0x4de346<=0x0)return;const _0x342445=$gameTemp[_0x2d9e4e(0x78b)](),_0x464791=BattleManager[_0x2d9e4e(0x33d)],_0x1abe02=VisuMZ[_0x2d9e4e(0x921)](_0x3173ac['Targets']),_0x1aeba3=_0x3173ac['Mirror'],_0x11559d=BattleManager['_logWindow'];if(!_0x342445||!_0x464791)return;$gameTemp[_0x2d9e4e(0xad2)](_0x1abe02,_0x4de346,_0x1aeba3);if(_0x3173ac[_0x2d9e4e(0xc08)]){if(_0x2d9e4e(0xb59)===_0x2d9e4e(0xb59))_0x342445[_0x2d9e4e(0x924)](_0x2d9e4e(0x266));else return _0x1e8cb3(_0x900bbc['$1']);}}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],'ActSeq_Animation_CastAnimation',_0x18c08b=>{const _0x2dc6d3=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2dc6d3(0xa1c)](_0x18c08b,_0x18c08b);const _0x4ea3e1=$gameTemp[_0x2dc6d3(0x78b)](),_0x381f3a=BattleManager[_0x2dc6d3(0xbfa)],_0x331dc4=_0x18c08b[_0x2dc6d3(0x1ef)],_0x5b734e=VisuMZ[_0x2dc6d3(0x921)](_0x18c08b[_0x2dc6d3(0x3cb)]);if(!_0x4ea3e1||!_0x381f3a)return;if(!_0x381f3a[_0x2dc6d3(0x20c)]())return;for(const _0x24210b of _0x5b734e){if(_0x2dc6d3(0xadf)!==_0x2dc6d3(0xadf)){const _0x48c54d=_0x3eaae8(_0x5a7473['$1']),_0x15d6f0=_0x2b1844[_0x2dc6d3(0x6b3)]['createKeyJS'](_0x3543c4,_0x2dc6d3(0x3cb));_0x3c5f92[_0x2dc6d3(0x6b3)]['createTargetsJS'](_0x48c54d,_0x15d6f0);}else{if(!_0x24210b)continue;_0x24210b[_0x2dc6d3(0x8a4)](_0x381f3a,_0x331dc4);}}if(_0x18c08b[_0x2dc6d3(0xc08)])_0x4ea3e1[_0x2dc6d3(0x924)]('battleAnimation');}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x4df),_0x4c27b6=>{const _0xf639ac=_0x1f5c57;VisuMZ['ConvertParams'](_0x4c27b6,_0x4c27b6);const _0x382a9e=$gameTemp[_0xf639ac(0x78b)](),_0x47b610=VisuMZ[_0xf639ac(0x921)](_0x4c27b6[_0xf639ac(0x3cb)]),_0x28011c=_0x4c27b6['Filename'];if(!_0x28011c)return;for(const _0x37af97 of _0x47b610){if('YUjit'!=='hBnAE'){if(!_0x37af97)continue;if(!_0x37af97[_0xf639ac(0xbcf)]())continue;_0x37af97[_0xf639ac(0xc6b)](_0x28011c);}else return _0x59591c[_0xf639ac(0x6b3)][_0xf639ac(0xbba)][_0xf639ac(0x1df)]['AnchorY'];}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Animation_PlayAtCoordinate',_0x36a3c1=>{const _0x1438bf=_0x1f5c57;if(!SceneManager[_0x1438bf(0x831)])return;if(!SceneManager[_0x1438bf(0x831)]['_spriteset'])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x1438bf(0xa1c)](_0x36a3c1,_0x36a3c1);const _0x25f08d=$gameTemp['getLastPluginCommandInterpreter'](),_0x118e55=Math[_0x1438bf(0x93c)](_0x36a3c1[_0x1438bf(0x33b)]),_0x2f2eae=Math[_0x1438bf(0x93c)](_0x36a3c1['pointY']);$gameTemp[_0x1438bf(0x801)](_0x118e55,_0x2f2eae,_0x36a3c1[_0x1438bf(0xa87)],_0x36a3c1['Mirror'],_0x36a3c1[_0x1438bf(0x21a)]),_0x36a3c1[_0x1438bf(0x42c)]&&_0x25f08d&&(SceneManager['_scene'][_0x1438bf(0x4d6)][_0x1438bf(0x5c2)](),_0x25f08d[_0x1438bf(0x924)](_0x1438bf(0x266)));}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],'ActSeq_Animation_ShowAnimation',_0x58d418=>{const _0x1d8b5c=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1d8b5c(0xa1c)](_0x58d418,_0x58d418);const _0x5b4daf=$gameTemp[_0x1d8b5c(0x78b)](),_0x2f2efb=VisuMZ[_0x1d8b5c(0x921)](_0x58d418[_0x1d8b5c(0x3cb)]),_0x17d44f=_0x58d418[_0x1d8b5c(0xa87)],_0x1dd350=_0x58d418[_0x1d8b5c(0x1ef)];if(!_0x5b4daf)return;$gameTemp[_0x1d8b5c(0xad2)](_0x2f2efb,_0x17d44f,_0x1dd350);if(_0x58d418[_0x1d8b5c(0xc08)])_0x5b4daf[_0x1d8b5c(0x924)](_0x1d8b5c(0x266));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Animation_WaitForAnimation',_0x57e172=>{const _0x2e4452=_0x1f5c57;if(!SceneManager[_0x2e4452(0x2ba)]())return;const _0x1230b0=$gameTemp[_0x2e4452(0x78b)]();if(!_0x1230b0)return;_0x1230b0[_0x2e4452(0x924)](_0x2e4452(0x266));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x3ed),_0x9b84c2=>{const _0x1297a5=_0x1f5c57;if(!SceneManager[_0x1297a5(0x2ba)]())return;VisuMZ['ConvertParams'](_0x9b84c2,_0x9b84c2);const _0x31c01a=BattleManager[_0x1297a5(0x57c)],_0x2fa245=_0x9b84c2[_0x1297a5(0xaf3)]&&Imported[_0x1297a5(0x998)];_0x31c01a['addText'](_0x9b84c2['Text']),_0x2fa245&&Imported[_0x1297a5(0x998)]&&$gameSystem[_0x1297a5(0xa02)](_0x9b84c2['Text']||'',_0x9b84c2['CombatLogIcon']||0x0);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x513),_0x375560=>{const _0x1df740=_0x1f5c57;if(!SceneManager[_0x1df740(0x2ba)]())return;const _0x19bfd3=BattleManager[_0x1df740(0x57c)];_0x19bfd3['clear']();}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x3a3),_0x31665f=>{const _0x4f79ec=_0x1f5c57;if(!SceneManager[_0x4f79ec(0x2ba)]())return;const _0x448206=$gameTemp['getLastPluginCommandInterpreter'](),_0x55aabb=BattleManager[_0x4f79ec(0xbfa)],_0x59c13b=BattleManager[_0x4f79ec(0x33d)],_0x2b8364=BattleManager[_0x4f79ec(0x57c)];if(!_0x448206||!_0x55aabb||!_0x59c13b)return;if(!_0x55aabb[_0x4f79ec(0x20c)]())return;_0x2b8364[_0x4f79ec(0xa94)](_0x59c13b,_0x55aabb['item']()),_0x448206[_0x4f79ec(0x924)](_0x4f79ec(0xbc3));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_BattleLog_PopBaseLine',_0x4200d0=>{const _0x55e3af=_0x1f5c57;if(!SceneManager[_0x55e3af(0x2ba)]())return;const _0x2e27fd=BattleManager[_0x55e3af(0x57c)];_0x2e27fd['popBaseLine']();}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x7ee),_0x416ab1=>{const _0x11c4c4=_0x1f5c57;if(!SceneManager[_0x11c4c4(0x2ba)]())return;const _0x42341a=BattleManager[_0x11c4c4(0x57c)];_0x42341a[_0x11c4c4(0x67c)]();}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x2d3),_0x229fd=>{const _0x3826b6=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;const _0x2b8a12=BattleManager[_0x3826b6(0x57c)];_0x2b8a12[_0x3826b6(0xba7)]();}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x211),_0x2130e4=>{const _0x5651ac=_0x1f5c57;if(!SceneManager[_0x5651ac(0x2ba)]())return;VisuMZ[_0x5651ac(0xa1c)](_0x2130e4,_0x2130e4),SceneManager[_0x5651ac(0x831)]['setVisibleUI'](_0x2130e4[_0x5651ac(0x338)]);}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],'ActSeq_BattleLog_WaitForBattleLog',_0x3feb15=>{const _0x230c41=_0x1f5c57;if(!SceneManager[_0x230c41(0x2ba)]())return;const _0x49edb1=$gameTemp['getLastPluginCommandInterpreter']();_0x49edb1[_0x230c41(0x924)]('battlelog');}),PluginManager['registerCommand'](pluginData['name'],_0x1f5c57(0x5c5),_0x3631b5=>{const _0x4a5c08=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;const _0x1bb289=$gameTemp['getLastPluginCommandInterpreter'](),_0x408c43=BattleManager['_logWindow'];_0x408c43[_0x4a5c08(0x5bc)](),_0x1bb289[_0x4a5c08(0x924)](_0x4a5c08(0xbc3));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x530),_0x57816e=>{const _0x5d3077=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5d3077(0x908)])return;VisuMZ[_0x5d3077(0xa1c)](_0x57816e,_0x57816e);const _0x5cce2b=$gameScreen[_0x5d3077(0x2e9)]();_0x5cce2b[_0x5d3077(0xb6f)]=_0x57816e[_0x5d3077(0xb57)];}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Camera_FocusPoint',_0x2c2afe=>{const _0x38befc=_0x1f5c57;if(!SceneManager[_0x38befc(0x2ba)]())return;if(!Imported[_0x38befc(0x908)])return;VisuMZ[_0x38befc(0xa1c)](_0x2c2afe,_0x2c2afe);const _0x13a42a=$gameTemp[_0x38befc(0x78b)](),_0x536066=_0x2c2afe['WaitForCamera'];$gameScreen['setBattleCameraPoint'](_0x2c2afe['FocusX'],_0x2c2afe[_0x38befc(0x25c)],_0x2c2afe[_0x38befc(0xacb)],_0x2c2afe[_0x38befc(0xa64)]);if(_0x536066)_0x13a42a[_0x38befc(0x924)](_0x38befc(0x3a7));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x21c),_0x2bb4fe=>{const _0x32298a=_0x1f5c57;if(!SceneManager[_0x32298a(0x2ba)]())return;if(!Imported[_0x32298a(0x908)])return;VisuMZ[_0x32298a(0xa1c)](_0x2bb4fe,_0x2bb4fe);const _0x181ccc=$gameTemp[_0x32298a(0x78b)](),_0xb107ed=VisuMZ[_0x32298a(0x921)](_0x2bb4fe['Targets']),_0x150a6f=_0x2bb4fe['WaitForCamera'];$gameScreen[_0x32298a(0xaa1)](_0xb107ed,_0x2bb4fe[_0x32298a(0xacb)],_0x2bb4fe['EasingType']);if(_0x150a6f)_0x181ccc['setWaitMode'](_0x32298a(0x3a7));}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x700),_0x2c3a1f=>{const _0x3fac7d=_0x1f5c57;if(!SceneManager[_0x3fac7d(0x2ba)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x3fac7d(0xa1c)](_0x2c3a1f,_0x2c3a1f);const _0x5e1f92=$gameTemp['getLastPluginCommandInterpreter'](),_0x33a30d=_0x2c3a1f[_0x3fac7d(0x53a)];$gameScreen[_0x3fac7d(0x231)](_0x2c3a1f[_0x3fac7d(0x590)],_0x2c3a1f[_0x3fac7d(0x2a8)],_0x2c3a1f[_0x3fac7d(0xacb)],_0x2c3a1f[_0x3fac7d(0xa64)]);if(_0x33a30d)_0x5e1f92['setWaitMode']('battleCamera');}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x202),_0x42181b=>{const _0x3a0d03=_0x1f5c57;if(!SceneManager[_0x3a0d03(0x2ba)]())return;if(!Imported[_0x3a0d03(0x908)])return;VisuMZ[_0x3a0d03(0xa1c)](_0x42181b,_0x42181b);const _0x4c1471=$gameTemp[_0x3a0d03(0x78b)](),_0x423799=_0x42181b[_0x3a0d03(0x54c)],_0xbaff10=_0x42181b['ResetOffset'],_0x297c05=_0x42181b[_0x3a0d03(0x53a)];if(_0x423799){const _0x41efdf=Math['round'](Graphics[_0x3a0d03(0xac5)]/0x2),_0x290c1d=Math[_0x3a0d03(0x93c)](Graphics[_0x3a0d03(0x53d)]/0x2);$gameScreen[_0x3a0d03(0xa5d)](_0x41efdf,_0x290c1d,_0x42181b['Duration'],_0x42181b[_0x3a0d03(0xa64)]);}_0xbaff10&&$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x42181b[_0x3a0d03(0xacb)],_0x42181b[_0x3a0d03(0xa64)]);if(_0x297c05)_0x4c1471[_0x3a0d03(0x924)]('battleCamera');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x7f7),_0x37cf1d=>{const _0x38b18a=_0x1f5c57;if(!SceneManager[_0x38b18a(0x2ba)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x3956fa=$gameTemp[_0x38b18a(0x78b)]();if(!_0x3956fa)return;_0x3956fa[_0x38b18a(0x924)](_0x38b18a(0x3a7));}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x242),_0x1c5b5a=>{const _0x50209f=_0x1f5c57;if(!SceneManager[_0x50209f(0x2ba)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ['ConvertParams'](_0x1c5b5a,_0x1c5b5a);const _0x314383=VisuMZ[_0x50209f(0x921)](_0x1c5b5a[_0x50209f(0x3cb)]),_0x34959d=_0x1c5b5a[_0x50209f(0x658)]['toLowerCase']()[_0x50209f(0xc8b)]();for(const _0x5e33a7 of _0x314383){if(_0x50209f(0x1eb)===_0x50209f(0xa71))_0x2c0d72[_0x50209f(0x6b3)]['Game_Battler_performEvasion']['call'](this),this['performFlinch']();else{if(!_0x5e33a7)continue;_0x5e33a7[_0x50209f(0x72b)](_0x34959d);}}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x8d4),_0x272add=>{const _0x2e82f2=_0x1f5c57;if(!SceneManager[_0x2e82f2(0x2ba)]())return;if(!Imported[_0x2e82f2(0xc5c)])return;VisuMZ[_0x2e82f2(0xa1c)](_0x272add,_0x272add);const _0x475a55=VisuMZ[_0x2e82f2(0x921)](_0x272add['Targets']),_0x417021=_0x272add[_0x2e82f2(0x69d)];for(const _0x299b8f of _0x475a55){if(!_0x299b8f)continue;_0x299b8f[_0x2e82f2(0x9e8)]()[_0x2e82f2(0x9e7)]=_0x417021;}}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xb21),_0x579800=>{const _0x55dc2e=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x55dc2e(0x838)])return;VisuMZ[_0x55dc2e(0xa1c)](_0x579800,_0x579800);const _0x5ba29b=BattleManager[_0x55dc2e(0xbfa)],_0x4a40cb=_0x579800[_0x55dc2e(0x8d7)];if(!_0x5ba29b)return;_0x5ba29b[_0x55dc2e(0xc18)]=_0x4a40cb;}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],'ActSeq_Element_Clear',_0x34a772=>{const _0x6b419a=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x6b419a(0x838)])return;const _0x1922e9=BattleManager[_0x6b419a(0xbfa)];if(!_0x1922e9)return;_0x1922e9['clearElementChanges']();}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xc79),_0x31993c=>{const _0x3856b1=_0x1f5c57;if(!SceneManager[_0x3856b1(0x2ba)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x3856b1(0xa1c)](_0x31993c,_0x31993c);const _0x23b57e=BattleManager['_action'],_0x47cd25=_0x31993c[_0x3856b1(0x8d7)];if(!_0x23b57e)return;_0x23b57e['_battleCoreForcedElements']=_0x47cd25;}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Element_NullElements',_0x3c321c=>{const _0xc179d0=_0x1f5c57;if(!SceneManager[_0xc179d0(0x2ba)]())return;if(!Imported[_0xc179d0(0x838)])return;const _0x5208d1=BattleManager[_0xc179d0(0xbfa)];if(!_0x5208d1)return;_0x5208d1[_0xc179d0(0x514)]=!![];}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x230),_0x9d9a09=>{const _0x1237ba=_0x1f5c57;if(!Imported[_0x1237ba(0x827)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1237ba(0xa1c)](_0x9d9a09,_0x9d9a09);const _0x4a0fa4=VisuMZ[_0x1237ba(0x921)](_0x9d9a09['Targets']);for(const _0x441cde of _0x4a0fa4){if(!_0x441cde)continue;_0x441cde[_0x1237ba(0x37d)](_0x1237ba(0x341)),_0x441cde[_0x1237ba(0x37d)](_0x1237ba(0xc37)),_0x441cde[_0x1237ba(0x37d)]('tv'),_0x441cde[_0x1237ba(0x727)]();}$gamePlayer[_0x1237ba(0xba7)]();}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Horror_GlitchCreate',_0xc520a8=>{const _0x544e72=_0x1f5c57;if(!Imported[_0x544e72(0x827)])return;if(!SceneManager[_0x544e72(0x2ba)]())return;VisuMZ[_0x544e72(0xa1c)](_0xc520a8,_0xc520a8);const _0x3a8955=VisuMZ[_0x544e72(0x921)](_0xc520a8['Targets']),_0x31ce8c='glitch';_0xc520a8[_0x544e72(0x4be)]=Math[_0x544e72(0x702)](_0xc520a8[_0x544e72(0x3e2)]/0x2),_0xc520a8['sliceMax']=_0xc520a8[_0x544e72(0x3e2)],_0xc520a8['refreshRequest']=!![];for(const _0x5984b3 of _0x3a8955){if(!_0x5984b3)continue;_0x5984b3[_0x544e72(0x596)](_0x31ce8c,_0xc520a8);}$gamePlayer['refresh']();}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x59d),_0x635f26=>{const _0x237874=_0x1f5c57;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x237874(0xa1c)](_0x635f26,_0x635f26);const _0xb83436=VisuMZ[_0x237874(0x921)](_0x635f26[_0x237874(0x3cb)]);for(const _0xeb10c4 of _0xb83436){if(!_0xeb10c4)continue;_0xeb10c4[_0x237874(0x37d)](_0x237874(0xc37));}$gamePlayer[_0x237874(0xba7)]();}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0xc57),_0x26c59d=>{const _0x185d8e=_0x1f5c57;if(!Imported[_0x185d8e(0x827)])return;if(!SceneManager[_0x185d8e(0x2ba)]())return;VisuMZ[_0x185d8e(0xa1c)](_0x26c59d,_0x26c59d);const _0x1b8893=VisuMZ['CreateActionSequenceTargets'](_0x26c59d[_0x185d8e(0x3cb)]),_0x59edd4='noise';for(const _0x1157ff of _0x1b8893){if(!_0x1157ff)continue;_0x1157ff[_0x185d8e(0x596)](_0x59edd4,_0x26c59d);}$gamePlayer['refresh']();}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x20b),_0x1039ad=>{const _0x4e721d=_0x1f5c57;if(!Imported[_0x4e721d(0x827)])return;if(!SceneManager[_0x4e721d(0x2ba)]())return;VisuMZ[_0x4e721d(0xa1c)](_0x1039ad,_0x1039ad);const _0x15b7d4=VisuMZ[_0x4e721d(0x921)](_0x1039ad[_0x4e721d(0x3cb)]);for(const _0x1c3ced of _0x15b7d4){if(_0x4e721d(0x1fd)==='NkLBO'){const _0x2aaa0c=_0xa1a08c[_0x4e721d(0x6b3)][_0x4e721d(0xbba)][_0x4e721d(0x92c)];_0xadc701!==_0x4e721d(0x90a)&&_0x2aaa0c['BattleEndEvent']&&_0x5d504c[_0x4e721d(0x6b3)][_0x4e721d(0xac0)](_0x2aaa0c[_0x4e721d(0x8ca)])&&_0x5e90e4['reserveCommonEvent'](_0x2aaa0c[_0x4e721d(0x8ca)]);const _0x5c9609=_0x4e721d(0x253)[_0x4e721d(0x98c)](_0x57acfe);_0x2aaa0c[_0x5c9609]&&_0xe7da1f[_0x4e721d(0x6b3)][_0x4e721d(0xac0)](_0x2aaa0c[_0x5c9609])&&_0xf9e7d7[_0x4e721d(0x3ff)](_0x2aaa0c[_0x5c9609]);}else{if(!_0x1c3ced)continue;_0x1c3ced[_0x4e721d(0x37d)](_0x4e721d(0x341));}}$gamePlayer['refresh']();}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x8b4),_0x28278e=>{const _0x2e8211=_0x1f5c57;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x2e8211(0x2ba)]())return;VisuMZ[_0x2e8211(0xa1c)](_0x28278e,_0x28278e);const _0x438ef1=VisuMZ['CreateActionSequenceTargets'](_0x28278e[_0x2e8211(0x3cb)]),_0x4731f2='tv';for(const _0x21d62a of _0x438ef1){if(!_0x21d62a)continue;_0x21d62a[_0x2e8211(0x596)](_0x4731f2,_0x28278e);}$gamePlayer[_0x2e8211(0xba7)]();}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xa8a),_0x20b99c=>{const _0x1133bd=_0x1f5c57;if(!Imported[_0x1133bd(0x827)])return;if(!SceneManager[_0x1133bd(0x2ba)]())return;VisuMZ[_0x1133bd(0xa1c)](_0x20b99c,_0x20b99c);const _0x5bcca8=VisuMZ[_0x1133bd(0x921)](_0x20b99c['Targets']);for(const _0x576040 of _0x5bcca8){if(!_0x576040)continue;_0x576040[_0x1133bd(0x37d)]('tv');}$gamePlayer[_0x1133bd(0xba7)]();}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x538),_0x365128=>{const _0x2f24c6=_0x1f5c57;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x52cbfe=SceneManager[_0x2f24c6(0x831)]['_spriteset'];if(!_0x52cbfe)return;if(VisuMZ['ActSeqImpact'][_0x2f24c6(0xbd5)]<=1.04){alert(_0x2f24c6(0xad8)),SceneManager['exit']();return;}VisuMZ[_0x2f24c6(0xa1c)](_0x365128,_0x365128);const _0x2e427c=_0x365128[_0x2f24c6(0x659)];_0x52cbfe[_0x2f24c6(0xba8)](_0x2e427c);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xbc6),_0x497a4a=>{const _0x3cf9b5=_0x1f5c57;if(!SceneManager[_0x3cf9b5(0x2ba)]())return;if(!Imported[_0x3cf9b5(0x32a)])return;const _0x14c10a=SceneManager[_0x3cf9b5(0x831)][_0x3cf9b5(0x4d6)];if(!_0x14c10a)return;VisuMZ[_0x3cf9b5(0xa1c)](_0x497a4a,_0x497a4a);const _0x2f971a=_0x497a4a[_0x3cf9b5(0x7d9)]||0x1,_0x376a58=_0x497a4a[_0x3cf9b5(0xacb)]||0x1,_0x15d3c8=_0x497a4a[_0x3cf9b5(0xa64)]||_0x3cf9b5(0x9b1);_0x14c10a[_0x3cf9b5(0x3d1)](_0x2f971a,_0x376a58,_0x15d3c8);}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x8bf),_0x2fa014=>{const _0x402407=_0x1f5c57;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xad9f3c=SceneManager['_scene'][_0x402407(0x4d6)];if(!_0xad9f3c)return;if(VisuMZ['ActSeqImpact'][_0x402407(0xbd5)]<=1.04){if('fYHtw'===_0x402407(0x3a4)){_0x5e8814=_0x14247f||'',_0x2b5aef=_0x18a613||'';_0x4ec083===''&&_0x530246===''&&(_0xb1f918=this['_back1Sprite'][_0x402407(0x9c9)](),_0x50a134=this[_0x402407(0x258)]['battleback2Name']());const _0x19b6c5=_0x499724[_0x402407(0xacc)](_0x274782),_0x169f9c=_0xd3ebc[_0x402407(0x5a3)](_0x33d73a);_0x19b6c5[_0x402407(0xc30)](this[_0x402407(0x63d)][_0x402407(0xc00)](this,this[_0x402407(0xbb4)],this['_back2Sprite'],_0x19b6c5,_0x169f9c));}else{alert(_0x402407(0xad8)),SceneManager['exit']();return;}}VisuMZ[_0x402407(0xa1c)](_0x2fa014,_0x2fa014);const _0x3533a1=_0x2fa014[_0x402407(0x659)];_0xad9f3c[_0x402407(0xc0f)](_0x3533a1);}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],'ActSeq_Impact_MotionBlurScreen',_0x12b822=>{const _0x1ee92e=_0x1f5c57;if(!SceneManager[_0x1ee92e(0x2ba)]())return;if(!Imported[_0x1ee92e(0x32a)])return;const _0x922e9b=SceneManager[_0x1ee92e(0x831)][_0x1ee92e(0x4d6)];if(!_0x922e9b)return;VisuMZ[_0x1ee92e(0xa1c)](_0x12b822,_0x12b822);const _0x45c3d8=Number(_0x12b822['Angle'])||0x0,_0x2840a5=Number(_0x12b822[_0x1ee92e(0x36a)]),_0x26c403=_0x12b822[_0x1ee92e(0xacb)]||0x1,_0x5896a4=_0x12b822['EasingType']||_0x1ee92e(0x9b1);_0x922e9b['setupMotionBlurImpactFilter'](_0x45c3d8,_0x2840a5,_0x26c403,_0x5896a4);}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0xa75),_0x2ae9d0=>{const _0xeb3ed4=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xeb3ed4(0x32a)])return;const _0x2a81b6=SceneManager[_0xeb3ed4(0x831)][_0xeb3ed4(0x4d6)];if(!_0x2a81b6)return;VisuMZ['ConvertParams'](_0x2ae9d0,_0x2ae9d0);const _0x222af1=Number(_0x2ae9d0[_0xeb3ed4(0x503)])||0x0,_0x4349d5=Number(_0x2ae9d0[_0xeb3ed4(0x36a)]),_0x2127ab=_0x2ae9d0[_0xeb3ed4(0xacb)]||0x1,_0x47697a=_0x2ae9d0[_0xeb3ed4(0xa64)]||_0xeb3ed4(0x9b1),_0x1823fa=VisuMZ['CreateActionSequenceTargets'](_0x2ae9d0['Targets']);for(const _0x3493ea of _0x1823fa){if(!_0x3493ea)continue;if(!_0x3493ea[_0xeb3ed4(0x4b2)]())continue;_0x3493ea[_0xeb3ed4(0x4b2)]()[_0xeb3ed4(0x89e)](_0x222af1,_0x4349d5,_0x2127ab,_0x47697a);}}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],'ActSeq_Impact_MotionTrailCreate',_0x27f454=>{const _0x1733e5=_0x1f5c57;if(!SceneManager[_0x1733e5(0x2ba)]())return;if(!Imported[_0x1733e5(0x32a)])return;VisuMZ[_0x1733e5(0xa1c)](_0x27f454,_0x27f454);const _0x5b2b36={'delay':_0x27f454[_0x1733e5(0x550)],'duration':_0x27f454[_0x1733e5(0xb0d)],'hue':_0x27f454[_0x1733e5(0x3a9)],'opacityStart':_0x27f454[_0x1733e5(0x98e)],'tone':_0x27f454[_0x1733e5(0x877)],'visible':!![]},_0x4e8410=VisuMZ[_0x1733e5(0x921)](_0x27f454[_0x1733e5(0x3cb)]);for(const _0x22cc68 of _0x4e8410){if(!_0x22cc68)continue;_0x22cc68[_0x1733e5(0x3e7)](_0x5b2b36);}}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x243),_0x385aa6=>{const _0x2be155=_0x1f5c57;if(!SceneManager[_0x2be155(0x2ba)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x2be155(0xa1c)](_0x385aa6,_0x385aa6);const _0x1e8e6e=VisuMZ[_0x2be155(0x921)](_0x385aa6[_0x2be155(0x3cb)]);for(const _0x23093a of _0x1e8e6e){if(!_0x23093a)continue;_0x23093a[_0x2be155(0xc9a)]();}}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x640),_0x1ec629=>{const _0x1ee0e0=_0x1f5c57;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x36b83b=SceneManager[_0x1ee0e0(0x831)][_0x1ee0e0(0x4d6)];if(!_0x36b83b)return;if(VisuMZ[_0x1ee0e0(0xb6b)]['version']<=1.04){alert(_0x1ee0e0(0xad8)),SceneManager[_0x1ee0e0(0xa14)]();return;}VisuMZ['ConvertParams'](_0x1ec629,_0x1ec629);const _0x3d9619=_0x1ec629[_0x1ee0e0(0x659)];_0x36b83b[_0x1ee0e0(0x4a8)](_0x3d9619);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x6ff),_0x21d679=>{const _0x12f749=_0x1f5c57;if(!Imported[_0x12f749(0x32a)])return;const _0x40b348=SceneManager[_0x12f749(0x831)]['_spriteset'];if(!_0x40b348)return;if(VisuMZ[_0x12f749(0xb6b)][_0x12f749(0xbd5)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x12f749(0xa14)]();return;}VisuMZ[_0x12f749(0xa1c)](_0x21d679,_0x21d679);const _0x58b0cd=_0x21d679[_0x12f749(0x659)];_0x40b348[_0x12f749(0xaa3)](_0x58b0cd);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xa67),_0x1464ff=>{const _0x535e90=_0x1f5c57;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2632f2=SceneManager[_0x535e90(0x831)][_0x535e90(0x4d6)];if(!_0x2632f2)return;VisuMZ['ConvertParams'](_0x1464ff,_0x1464ff);const _0x371bab=_0x1464ff['X']||0x0,_0x34d4f1=_0x1464ff['Y']||0x0,_0x4e0046=_0x1464ff[_0x535e90(0x374)]||0x0,_0x31f37f=_0x1464ff['Wave']||0x0,_0x4b0755=_0x1464ff[_0x535e90(0xacb)]||0x1;_0x2632f2[_0x535e90(0x4d9)](_0x371bab,_0x34d4f1,_0x4e0046,_0x31f37f,_0x4b0755);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x3ae),_0x204a3c=>{const _0x5041f4=_0x1f5c57;if(!SceneManager[_0x5041f4(0x2ba)]())return;if(!Imported[_0x5041f4(0x32a)])return;const _0x840708=SceneManager[_0x5041f4(0x831)][_0x5041f4(0x4d6)];if(!_0x840708)return;VisuMZ[_0x5041f4(0xa1c)](_0x204a3c,_0x204a3c);const _0xda690c=VisuMZ[_0x5041f4(0x921)](_0x204a3c[_0x5041f4(0x3cb)]),_0x36df96=_0x204a3c[_0x5041f4(0xb5c)],_0x4e3a24=_0x204a3c[_0x5041f4(0x590)]||0x0,_0x3fae9e=_0x204a3c[_0x5041f4(0x2a8)]||0x0,_0x17fb37=_0x204a3c[_0x5041f4(0x374)]||0x0,_0x194b40=_0x204a3c[_0x5041f4(0x575)]||0x0,_0x2595b5=_0x204a3c['Duration']||0x1;for(const _0x52a752 of _0xda690c){if(!_0x52a752)continue;if(!_0x52a752['battler']())continue;const _0x249281=_0x52a752[_0x5041f4(0x4b2)]();let _0x5ca1e5=_0x249281['_baseX'],_0x1150a6=_0x249281['_baseY'];_0x5ca1e5+=(Graphics[_0x5041f4(0xac5)]-Graphics[_0x5041f4(0xb4d)])/0x2,_0x1150a6+=(Graphics[_0x5041f4(0x53d)]-Graphics['boxHeight'])/0x2;if(_0x36df96['match'](/front/i))_0x5ca1e5+=(_0x52a752[_0x5041f4(0x951)]()?0x1:-0x1)*_0x249281['mainSpriteWidth']()/0x2;else _0x36df96[_0x5041f4(0x7a1)](/back/i)&&(_0x5ca1e5+=(_0x52a752[_0x5041f4(0x951)]()?-0x1:0x1)*_0x249281['mainSpriteWidth']()/0x2);if(_0x36df96[_0x5041f4(0x7a1)](/head/i))_0x1150a6-=_0x249281[_0x5041f4(0xc35)]();else _0x36df96[_0x5041f4(0x7a1)](/center/i)&&('BZakq'===_0x5041f4(0x7e4)?(this[_0x5041f4(0x3a8)](),this[_0x5041f4(0x7e7)]=null,this[_0x5041f4(0x876)]=![]):_0x1150a6-=_0x249281[_0x5041f4(0xc35)]()/0x2);_0x5ca1e5+=_0x4e3a24,_0x1150a6+=_0x3fae9e,_0x840708[_0x5041f4(0x4d9)](_0x5ca1e5,_0x1150a6,_0x17fb37,_0x194b40,_0x2595b5);}}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],'ActSeq_Impact_ShockwaveCenterTargets',_0x49f4c5=>{const _0x3c20d7=_0x1f5c57;if(!SceneManager[_0x3c20d7(0x2ba)]())return;if(!Imported[_0x3c20d7(0x32a)])return;const _0x1db68b=SceneManager[_0x3c20d7(0x831)]['_spriteset'];if(!_0x1db68b)return;VisuMZ[_0x3c20d7(0xa1c)](_0x49f4c5,_0x49f4c5);const _0x394c6e=VisuMZ[_0x3c20d7(0x921)](_0x49f4c5['Targets']),_0x3407f7=_0x49f4c5[_0x3c20d7(0xb5c)],_0x582f8a=_0x49f4c5[_0x3c20d7(0x590)]||0x0,_0x5d6646=_0x49f4c5[_0x3c20d7(0x2a8)]||0x0,_0x281a50=_0x49f4c5[_0x3c20d7(0x374)]||0x0,_0x9f6624=_0x49f4c5[_0x3c20d7(0x575)]||0x0,_0x1d15f4=_0x49f4c5['Duration']||0x1,_0x14548a=Math[_0x3c20d7(0xaea)](..._0x394c6e['map'](_0x1e1908=>_0x1e1908[_0x3c20d7(0x4b2)]()['_baseX']-_0x1e1908[_0x3c20d7(0x4b2)]()[_0x3c20d7(0x8c7)]()/0x2)),_0x51b517=Math[_0x3c20d7(0x795)](..._0x394c6e[_0x3c20d7(0x6f1)](_0x3f326f=>_0x3f326f[_0x3c20d7(0x4b2)]()['_baseX']+_0x3f326f[_0x3c20d7(0x4b2)]()[_0x3c20d7(0x8c7)]()/0x2)),_0x14d8c7=Math[_0x3c20d7(0xaea)](..._0x394c6e[_0x3c20d7(0x6f1)](_0x539d4c=>_0x539d4c[_0x3c20d7(0x4b2)]()[_0x3c20d7(0x8b7)]-_0x539d4c[_0x3c20d7(0x4b2)]()[_0x3c20d7(0xc35)]())),_0x194258=Math[_0x3c20d7(0x795)](..._0x394c6e[_0x3c20d7(0x6f1)](_0x3af29b=>_0x3af29b['battler']()['_baseY'])),_0xeff394=_0x394c6e['filter'](_0x2b3477=>_0x2b3477[_0x3c20d7(0xbcf)]())[_0x3c20d7(0x9fe)],_0x3741a2=_0x394c6e[_0x3c20d7(0x6ae)](_0x4157bf=>_0x4157bf['isEnemy']())[_0x3c20d7(0x9fe)];let _0x4f9e67=0x0,_0x357b69=0x0;if(_0x3407f7[_0x3c20d7(0x7a1)](/front/i))_0x4f9e67=_0xeff394>=_0x3741a2?_0x14548a:_0x51b517;else{if(_0x3407f7['match'](/middle/i))_0x4f9e67=(_0x14548a+_0x51b517)/0x2,melee=-0x1;else _0x3407f7[_0x3c20d7(0x7a1)](/back/i)&&(_0x4f9e67=_0xeff394>=_0x3741a2?_0x51b517:_0x14548a);}if(_0x3407f7[_0x3c20d7(0x7a1)](/head/i))_0x357b69=_0x14d8c7;else{if(_0x3407f7['match'](/center/i))_0x357b69=(_0x14d8c7+_0x194258)/0x2;else{if(_0x3407f7[_0x3c20d7(0x7a1)](/base/i)){if(_0x3c20d7(0x9ad)===_0x3c20d7(0x9ad))_0x357b69=_0x194258;else return this[_0x3c20d7(0xbe3)]();}}}_0x4f9e67+=(Graphics[_0x3c20d7(0xac5)]-Graphics['boxWidth'])/0x2,_0x357b69+=(Graphics[_0x3c20d7(0x53d)]-Graphics[_0x3c20d7(0x4f3)])/0x2,_0x4f9e67+=_0x582f8a,_0x357b69+=_0x5d6646,_0x1db68b['setupShockwaveImpactFilter'](_0x4f9e67,_0x357b69,_0x281a50,_0x9f6624,_0x1d15f4);}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],'ActSeq_Impact_TimeScale',_0x5694cd=>{const _0x4ec21a=_0x1f5c57;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x414c18=SceneManager[_0x4ec21a(0x831)]['_spriteset'];if(!_0x414c18)return;if(VisuMZ[_0x4ec21a(0xb6b)][_0x4ec21a(0xbd5)]<=1.04){alert(_0x4ec21a(0xad8)),SceneManager[_0x4ec21a(0xa14)]();return;}VisuMZ[_0x4ec21a(0xa1c)](_0x5694cd,_0x5694cd);const _0x52a851=$gameTemp[_0x4ec21a(0x78b)](),_0x4da132=Math[_0x4ec21a(0x795)](0.01,_0x5694cd[_0x4ec21a(0xaa8)]);$gameTemp['setBattleImpactTimeScale'](_0x4da132,_0x52a851);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xa18),_0x4b3ee8=>{const _0x53d001=_0x1f5c57;if(!Imported[_0x53d001(0x32a)])return;const _0x516852=SceneManager['_scene'][_0x53d001(0x4d6)];if(!_0x516852)return;if(VisuMZ[_0x53d001(0xb6b)]['version']<=1.04){alert(_0x53d001(0xad8)),SceneManager[_0x53d001(0xa14)]();return;}VisuMZ['ConvertParams'](_0x4b3ee8,_0x4b3ee8);const _0x130b07=$gameTemp['getLastPluginCommandInterpreter'](),_0x4c45be=_0x4b3ee8['ms']||0x1;VisuMZ[_0x53d001(0xb6b)]['freezeTime'](_0x4c45be,_0x130b07);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Impact_ZoomBlurPoint',_0x4ca73f=>{const _0x421c75=_0x1f5c57;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x45811b=SceneManager['_scene'][_0x421c75(0x4d6)];if(!_0x45811b)return;VisuMZ[_0x421c75(0xa1c)](_0x4ca73f,_0x4ca73f);const _0x497d2e=_0x4ca73f['X']||0x0,_0x4927a8=_0x4ca73f['Y']||0x0,_0xc7c4b7=_0x4ca73f['Strength']||0x0,_0x17a738=_0x4ca73f[_0x421c75(0x621)]||0x0,_0x10a480=_0x4ca73f[_0x421c75(0xacb)]||0x1,_0x210f39=_0x4ca73f[_0x421c75(0xa64)]||'Linear';_0x45811b[_0x421c75(0xbe1)](_0xc7c4b7,_0x497d2e,_0x4927a8,_0x17a738,_0x10a480,_0x210f39);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x50cbc0=>{const _0x4d40db=_0x1f5c57;if(!Imported[_0x4d40db(0x32a)])return;const _0x314626=SceneManager['_scene'][_0x4d40db(0x4d6)];if(!_0x314626)return;VisuMZ[_0x4d40db(0xa1c)](_0x50cbc0,_0x50cbc0);const _0x5e86fc=VisuMZ[_0x4d40db(0x921)](_0x50cbc0[_0x4d40db(0x3cb)]),_0x5e647d=_0x50cbc0[_0x4d40db(0xb5c)],_0x5a79ed=_0x50cbc0[_0x4d40db(0x590)]||0x0,_0x15216e=_0x50cbc0['OffsetY']||0x0,_0x2776d6=_0x50cbc0['Strength']||0x0,_0x1e02cd=_0x50cbc0[_0x4d40db(0x621)]||0x0,_0xfe81f1=_0x50cbc0['Duration']||0x1,_0x5ebef9=_0x50cbc0[_0x4d40db(0xa64)]||_0x4d40db(0x9b1),_0x13f58a=Math[_0x4d40db(0xaea)](..._0x5e86fc[_0x4d40db(0x6f1)](_0x3e2ab5=>_0x3e2ab5[_0x4d40db(0x4b2)]()['_baseX']-_0x3e2ab5[_0x4d40db(0x4b2)]()[_0x4d40db(0x8c7)]()/0x2)),_0x3e9104=Math[_0x4d40db(0x795)](..._0x5e86fc['map'](_0x5d4628=>_0x5d4628['battler']()[_0x4d40db(0x1ed)]+_0x5d4628[_0x4d40db(0x4b2)]()['mainSpriteWidth']()/0x2)),_0x3d6683=Math['min'](..._0x5e86fc[_0x4d40db(0x6f1)](_0x1b1121=>_0x1b1121[_0x4d40db(0x4b2)]()[_0x4d40db(0x8b7)]-_0x1b1121[_0x4d40db(0x4b2)]()[_0x4d40db(0xc35)]())),_0x575ac5=Math[_0x4d40db(0x795)](..._0x5e86fc['map'](_0x2697d6=>_0x2697d6[_0x4d40db(0x4b2)]()[_0x4d40db(0x8b7)])),_0x20f4aa=_0x5e86fc[_0x4d40db(0x6ae)](_0x18427d=>_0x18427d[_0x4d40db(0xbcf)]())[_0x4d40db(0x9fe)],_0x210a9e=_0x5e86fc[_0x4d40db(0x6ae)](_0xf1b550=>_0xf1b550['isEnemy']())['length'];let _0x768382=0x0,_0x52632a=0x0;if(_0x5e647d[_0x4d40db(0x7a1)](/front/i))_0x4d40db(0xbda)===_0x4d40db(0xbda)?_0x768382=_0x20f4aa>=_0x210a9e?_0x13f58a:_0x3e9104:(this[_0x4d40db(0x73f)][_0x4d40db(0x537)]['x']=this[_0x4d40db(0x423)],this[_0x4d40db(0x73f)][_0x4d40db(0x537)]['y']=this['_targetSkewY']);else{if(_0x5e647d[_0x4d40db(0x7a1)](/middle/i))_0x768382=(_0x13f58a+_0x3e9104)/0x2,melee=-0x1;else _0x5e647d[_0x4d40db(0x7a1)](/back/i)&&(_0x4d40db(0x882)===_0x4d40db(0x1db)?this[_0x4d40db(0xc6a)]=this[_0x4d40db(0xb5a)]:_0x768382=_0x20f4aa>=_0x210a9e?_0x3e9104:_0x13f58a);}if(_0x5e647d[_0x4d40db(0x7a1)](/head/i))_0x52632a=_0x3d6683;else{if(_0x5e647d[_0x4d40db(0x7a1)](/center/i)){if(_0x4d40db(0x809)!==_0x4d40db(0x64e))_0x52632a=(_0x3d6683+_0x575ac5)/0x2;else return _0x1bbed1(_0x5aa317['$1']);}else _0x5e647d[_0x4d40db(0x7a1)](/base/i)&&(_0x4d40db(0xc87)==='pgdCC'?_0x2b75ba[_0x4d40db(0x630)]():_0x52632a=_0x575ac5);}_0x768382+=(Graphics['width']-Graphics[_0x4d40db(0xb4d)])/0x2,_0x52632a+=(Graphics[_0x4d40db(0x53d)]-Graphics[_0x4d40db(0x4f3)])/0x2,_0x768382+=_0x5a79ed,_0x52632a+=_0x15216e,_0x314626[_0x4d40db(0xbe1)](_0x2776d6,_0x768382,_0x52632a,_0x1e02cd,_0xfe81f1,_0x5ebef9);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x7dd),_0x36724c=>{const _0x4c7cba=_0x1f5c57;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1f0729=SceneManager[_0x4c7cba(0x831)][_0x4c7cba(0x4d6)];if(!_0x1f0729)return;if(VisuMZ[_0x4c7cba(0xb6b)][_0x4c7cba(0xbd5)]<=1.05){if(_0x4c7cba(0x2bb)!==_0x4c7cba(0x2bb))this['addCombatLogCommand']();else{alert(_0x4c7cba(0xad8)),SceneManager[_0x4c7cba(0xa14)]();return;}}VisuMZ[_0x4c7cba(0xa1c)](_0x36724c,_0x36724c);const _0xad9852=VisuMZ['CreateActionSequenceTargets'](_0x36724c[_0x4c7cba(0x3cb)]),_0x5452f6={'filename':_0x36724c['Filename'],'horzCells':_0x36724c['horzCells']||0x1,'vertCells':_0x36724c[_0x4c7cba(0x666)]||0x1,'frameDelay':_0x36724c[_0x4c7cba(0x3bc)]||0x1,'smooth':_0x36724c[_0x4c7cba(0xb4f)]||![],'anchorX':_0x36724c[_0x4c7cba(0xbb7)]||0x0,'anchorY':_0x36724c[_0x4c7cba(0xb41)]||0x0,'offsetX':_0x36724c['offsetX']||0x0,'offsetY':_0x36724c[_0x4c7cba(0xbbe)]||0x0};for(const _0x4f6668 of _0xad9852){if(!_0x4f6668)continue;if(!_0x4f6668[_0x4c7cba(0x4b2)]())continue;_0x4f6668[_0x4c7cba(0x4b2)]()['startInjectAnimation'](_0x5452f6);}const _0x4f85a4=$gameTemp[_0x4c7cba(0x78b)]();_0x4f85a4&&_0x4f85a4[_0x4c7cba(0x924)]('battleInjectPrep');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xa7f),_0x5abbfb=>{const _0x542294=_0x1f5c57;if(!Imported[_0x542294(0x32a)])return;const _0x1c8a2a=SceneManager[_0x542294(0x831)][_0x542294(0x4d6)];if(!_0x1c8a2a)return;if(VisuMZ['ActSeqImpact'][_0x542294(0xbd5)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x542294(0xa1c)](_0x5abbfb,_0x5abbfb);const _0x419965=VisuMZ[_0x542294(0x921)](_0x5abbfb[_0x542294(0x3cb)]);for(const _0x3de88e of _0x419965){if(!_0x3de88e)continue;if(!_0x3de88e['battler']())continue;_0x3de88e[_0x542294(0x4b2)]()[_0x542294(0xb29)]();}}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x346),_0x5cf868=>{const _0x4e8823=_0x1f5c57;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3a59f2=SceneManager[_0x4e8823(0x831)][_0x4e8823(0x4d6)];if(!_0x3a59f2)return;if(VisuMZ[_0x4e8823(0xb6b)]['version']<=1.05){alert(_0x4e8823(0xad8)),SceneManager[_0x4e8823(0xa14)]();return;}VisuMZ[_0x4e8823(0xa1c)](_0x5cf868,_0x5cf868);const _0x2a75de=VisuMZ[_0x4e8823(0x921)](_0x5cf868[_0x4e8823(0x3cb)]),_0x445ea0=_0x5cf868[_0x4e8823(0x4b7)];for(const _0x445539 of _0x2a75de){if(!_0x445539)continue;if(!_0x445539[_0x4e8823(0x4b2)]())continue;_0x445539[_0x4e8823(0x4b2)]()[_0x4e8823(0x41c)](_0x445ea0);}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Inject_WaitForInjectAni',_0x52f30a=>{const _0x4be29b=_0x1f5c57;if(!SceneManager[_0x4be29b(0x2ba)]())return;const _0x1786b0=$gameTemp[_0x4be29b(0x78b)]();if(!_0x1786b0)return;_0x1786b0['setWaitMode'](_0x4be29b(0xb27));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x428),_0x3fc977=>{const _0x2f09c4=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2f09c4(0xa1c)](_0x3fc977,_0x3fc977);const _0x3ff4a0=$gameTemp[_0x2f09c4(0x78b)](),_0x1ef2cc=BattleManager[_0x2f09c4(0xbfa)],_0x3d70d1=BattleManager['_subject'],_0x43fe0e=BattleManager[_0x2f09c4(0x57c)];if(!_0x3ff4a0||!_0x1ef2cc||!_0x3d70d1)return;if(!_0x1ef2cc['item']())return;const _0xdae4ec=VisuMZ[_0x2f09c4(0x921)](_0x3fc977[_0x2f09c4(0x3cb)]);for(const _0x23a3f2 of _0xdae4ec){if('vvDQP'===_0x2f09c4(0x53c)){if(!_0x23a3f2)continue;_0x43fe0e['push'](_0x2f09c4(0x61e),_0x3d70d1,_0x23a3f2);}else this[_0x2f09c4(0xb07)][_0x2f09c4(0x2a1)](0x0,0x0,this[_0x2f09c4(0xb07)]['width'],this[_0x2f09c4(0x991)]);}_0x3ff4a0[_0x2f09c4(0x924)](_0x2f09c4(0xbc3));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],'ActSeq_Mechanics_AddBuffDebuff',_0x2a82cc=>{const _0x1aa341=_0x1f5c57;if(!SceneManager[_0x1aa341(0x2ba)]())return;VisuMZ['ConvertParams'](_0x2a82cc,_0x2a82cc);const _0x288999=[_0x1aa341(0x6af),_0x1aa341(0xc84),'ATK','DEF',_0x1aa341(0x88a),_0x1aa341(0x912),_0x1aa341(0x726),'LUK'],_0x161104=_0x2a82cc[_0x1aa341(0x1d1)],_0x21b5d4=_0x2a82cc[_0x1aa341(0x457)],_0x227d9c=_0x2a82cc[_0x1aa341(0x504)],_0x25e643=VisuMZ[_0x1aa341(0x921)](_0x2a82cc['Targets']);for(const _0x5058ea of _0x25e643){if(_0x1aa341(0x373)===_0x1aa341(0x373)){if(!_0x5058ea)continue;for(const _0x59a46c of _0x161104){const _0xc082b3=_0x288999[_0x1aa341(0x94d)](_0x59a46c[_0x1aa341(0x8b5)]()[_0x1aa341(0xc8b)]());_0xc082b3>=0x0&&_0xc082b3<=0x7&&_0x5058ea[_0x1aa341(0xbe5)](_0xc082b3,_0x227d9c);}for(const _0x21444f of _0x21b5d4){const _0x53e512=_0x288999['indexOf'](_0x21444f[_0x1aa341(0x8b5)]()['trim']());_0x53e512>=0x0&&_0x53e512<=0x7&&(_0x1aa341(0x3f5)!=='UTmgq'?_0x5058ea[_0x1aa341(0x3d6)](_0x53e512,_0x227d9c):_0x3c5dd4=[_0x1aa341(0x56b),_0x1aa341(0x835),'missile'][_0x1fd020['type']]||_0x1aa341(0x835));}}else{if(_0x520574[_0x1aa341(0x6bf)]!==_0x16b0c8)return _0x30ae5f['_forcedBattleLayout'];if(this['_battleLayoutStyle'])return this[_0x1aa341(0xc20)];return this['_battleLayoutStyle']=_0x5aaa58[_0x1aa341(0x6b3)][_0x1aa341(0xbba)][_0x1aa341(0x66d)][_0x1aa341(0x9f3)][_0x1aa341(0x281)]()[_0x1aa341(0xc8b)](),this[_0x1aa341(0xc20)]===_0x1aa341(0x5d6)&&!_0x291615['VisuMZ_3_SideviewBattleUI']&&(this[_0x1aa341(0xc20)]=_0x1aa341(0x3b1)),this[_0x1aa341(0xc20)];}}}),PluginManager['registerCommand'](pluginData['name'],_0x1f5c57(0x493),_0x82d43c=>{const _0x249898=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x249898(0xa1c)](_0x82d43c,_0x82d43c);const _0x28986d=_0x82d43c['States'],_0x5b02bc=VisuMZ['CreateActionSequenceTargets'](_0x82d43c['Targets']);for(const _0x2bc658 of _0x5b02bc){if(!_0x2bc658)continue;for(const _0x25f343 of _0x28986d){_0x2bc658[_0x249898(0x5ec)](_0x25f343);}}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x57b),_0xf19d1c=>{const _0x40b849=_0x1f5c57;if(!SceneManager[_0x40b849(0x2ba)]())return;VisuMZ[_0x40b849(0xa1c)](_0xf19d1c,_0xf19d1c);const _0x5e445d=BattleManager[_0x40b849(0xbfa)],_0x2b8f7a={'arPenRate':_0xf19d1c[_0x40b849(0xb94)],'arPenFlat':_0xf19d1c[_0x40b849(0x28b)],'arRedRate':_0xf19d1c[_0x40b849(0xc36)],'arRedFlat':_0xf19d1c[_0x40b849(0x4b4)]};_0x5e445d[_0x40b849(0xb63)]=_0x2b8f7a;}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0xa05),_0x54e348=>{const _0x15bb5e=_0x1f5c57;if(!SceneManager[_0x15bb5e(0x2ba)]())return;if(!Imported[_0x15bb5e(0xb0a)])return;VisuMZ[_0x15bb5e(0xa1c)](_0x54e348,_0x54e348);const _0xc126fc=VisuMZ[_0x15bb5e(0x921)](_0x54e348['Targets']),_0x202f66=_0x54e348[_0x15bb5e(0x804)]||0x1;for(const _0x5e9943 of _0xc126fc){if(_0x15bb5e(0x45e)===_0x15bb5e(0xa27))_0x757747['BattleCore']['Game_Battler_forceAction'][_0x15bb5e(0x5a5)](this,_0x5e0e08,_0x13e629),this[_0x15bb5e(0x760)][this[_0x15bb5e(0x760)][_0x15bb5e(0x9fe)]-0x1][_0x15bb5e(0x1ff)]=!![];else{if(!_0x5e9943)continue;if(!_0x5e9943[_0x15bb5e(0x951)]())continue;_0x5e9943[_0x15bb5e(0x490)](_0x202f66);}}}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x3c7),_0x42257c=>{const _0x87f0e3=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;if(!BattleManager['isATB']())return;VisuMZ[_0x87f0e3(0xa1c)](_0x42257c,_0x42257c);const _0x4ab689=VisuMZ[_0x87f0e3(0x921)](_0x42257c[_0x87f0e3(0x3cb)]),_0x3cfc75=_0x42257c[_0x87f0e3(0xc3a)],_0x3a4cef=_0x42257c[_0x87f0e3(0xc3a)],_0x3a854e=_0x42257c['Interrupt'];for(const _0x59ffcd of _0x4ab689){if(_0x87f0e3(0x2ff)==='HCkuN'){const _0x56a3e6=this[_0x87f0e3(0x853)]();['xp',_0x87f0e3(0x6ea),_0x87f0e3(0x69e)][_0x87f0e3(0x60e)](_0x56a3e6)&&this['_actorCommandWindow'][_0x87f0e3(0x45a)](),(_0x56a3e6===_0x87f0e3(0x69e)||this['isSkillItemWindowsMiddle']())&&(this['_skillWindow'][_0x87f0e3(0x45a)](),this['_itemWindow'][_0x87f0e3(0x45a)]());}else{if(!_0x59ffcd)continue;if(_0x59ffcd[_0x87f0e3(0x978)]())_0x59ffcd[_0x87f0e3(0x777)](_0x3cfc75);else{if(_0x59ffcd[_0x87f0e3(0x210)]()){_0x59ffcd[_0x87f0e3(0x2ce)](_0x3a4cef);if(_0x3a854e)_0x59ffcd['atbInterrupt']();}}}}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Mechanics_BoostPointsChange',_0x424571=>{const _0x2ed7da=_0x1f5c57;if(!SceneManager[_0x2ed7da(0x2ba)]())return;if(!Imported[_0x2ed7da(0x21b)])return;VisuMZ[_0x2ed7da(0xa1c)](_0x424571,_0x424571);const _0x234b31=VisuMZ['CreateActionSequenceTargets'](_0x424571[_0x2ed7da(0x3cb)]),_0x5c6d35=_0x424571['BoostPoints'];for(const _0x26a520 of _0x234b31){if(!_0x26a520)continue;_0x26a520[_0x2ed7da(0xb77)](_0x5c6d35);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_BoostPointsStoreData',_0x590492=>{const _0x2d2963=_0x1f5c57;if(!SceneManager[_0x2d2963(0x2ba)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x2d2963(0x33d)])return;VisuMZ[_0x2d2963(0xa1c)](_0x590492,_0x590492);const _0x421bea=_0x590492['VariableID'];$gameVariables['setValue'](_0x421bea,BattleManager[_0x2d2963(0x33d)][_0x2d2963(0x8a9)]());}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x21f),_0x2e1b62=>{const _0x1618f5=_0x1f5c57;if(!SceneManager[_0x1618f5(0x2ba)]())return;if(!Imported[_0x1618f5(0x484)])return;VisuMZ[_0x1618f5(0xa1c)](_0x2e1b62,_0x2e1b62);const _0x53beb9=VisuMZ[_0x1618f5(0x921)](_0x2e1b62[_0x1618f5(0x3cb)]),_0x13ec4b=_0x2e1b62[_0x1618f5(0x7b6)];for(const _0x54e45b of _0x53beb9){if(_0x1618f5(0xb2e)!==_0x1618f5(0xb2e))this[_0x1618f5(0xaab)](_0x2d2796,_0x4a4a17,_0x444cc4);else{if(!_0x54e45b)continue;if(_0x54e45b[_0x1618f5(0xad5)]())continue;if(!_0x54e45b[_0x1618f5(0x6fb)]())continue;_0x54e45b[_0x1618f5(0x8a5)](_0x13ec4b);}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_BreakShieldReset',_0x651f2c=>{const _0x6eac9c=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x6eac9c(0xa1c)](_0x651f2c,_0x651f2c);const _0x540c10=VisuMZ[_0x6eac9c(0x921)](_0x651f2c[_0x6eac9c(0x3cb)]);for(const _0x260992 of _0x540c10){if(!_0x260992)continue;if(_0x260992[_0x6eac9c(0xad5)]())continue;if(!_0x260992[_0x6eac9c(0x6fb)]())continue;_0x260992[_0x6eac9c(0xbe0)]();}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x385),_0x376338=>{const _0x415e03=_0x1f5c57;if(!SceneManager[_0x415e03(0x2ba)]())return;if(!Imported[_0x415e03(0x7bd)])return;if(!BattleManager['isBTB']())return;VisuMZ[_0x415e03(0xa1c)](_0x376338,_0x376338);const _0x4f10ac=VisuMZ['CreateActionSequenceTargets'](_0x376338[_0x415e03(0x3cb)]),_0x116a95=_0x376338[_0x415e03(0x592)];for(const _0x3b1310 of _0x4f10ac){if(!_0x3b1310)continue;_0x3b1310[_0x415e03(0xa39)](_0x116a95);}}),PluginManager['registerCommand'](pluginData['name'],_0x1f5c57(0x77a),_0x5b56c9=>{const _0x3636d1=_0x1f5c57;if(!SceneManager[_0x3636d1(0x2ba)]())return;VisuMZ[_0x3636d1(0xa1c)](_0x5b56c9,_0x5b56c9);const _0x315e95=$gameTemp[_0x3636d1(0x78b)](),_0x56fdb8=BattleManager['_action'],_0x29d95e=BattleManager[_0x3636d1(0x33d)];if(!_0x315e95||!_0x56fdb8||!_0x29d95e)return;if(!_0x56fdb8[_0x3636d1(0x20c)]())return;const _0x47a1e=VisuMZ[_0x3636d1(0x921)](_0x5b56c9[_0x3636d1(0x3cb)]);for(const _0x221646 of _0x47a1e){if(!_0x221646)continue;if(_0x5b56c9[_0x3636d1(0x719)]){if(_0x3636d1(0xaa2)!==_0x3636d1(0xaa2)){if(!_0x250dd4[_0x3636d1(0x754)]())return;_0x1ac9ff[_0x3636d1(0x6b3)][_0x3636d1(0x9c4)][_0x3636d1(0x5a5)](this,_0x2bb9de);}else _0x221646[_0x3636d1(0x79b)](),_0x221646[_0x3636d1(0x5ec)](_0x221646[_0x3636d1(0x50c)]());}_0x221646['isDeathStateAffected']()&&(_0x3636d1(0x6bd)==='kFRhU'?_0x221646[_0x3636d1(0x630)]():(_0x554a0f['BattleCore'][_0x3636d1(0x728)]['call'](this),this[_0x3636d1(0x31f)]()));}_0x315e95[_0x3636d1(0x924)]('battleEffect');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x205),_0x1a86bc=>{const _0x13e811=_0x1f5c57;if(!SceneManager[_0x13e811(0x2ba)]())return;if(!Imported[_0x13e811(0x2fc)])return;if(!BattleManager[_0x13e811(0x319)]())return;VisuMZ[_0x13e811(0xa1c)](_0x1a86bc,_0x1a86bc);const _0xa97aa3=VisuMZ[_0x13e811(0x921)](_0x1a86bc['Targets']),_0x2efbab=_0x1a86bc[_0x13e811(0x850)];for(const _0xc01807 of _0xa97aa3){if(_0x13e811(0x216)===_0x13e811(0xa38))_0x5e19e4['BattleCore'][_0x13e811(0x697)][_0x13e811(0x5a5)](this);else{if(!_0xc01807)continue;_0xc01807[_0x13e811(0x973)](_0x2efbab);}}}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x6c6),_0xcb1ffe=>{const _0xbf7f74=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xbf7f74(0x2fc)])return;if(!BattleManager[_0xbf7f74(0x319)]())return;VisuMZ[_0xbf7f74(0xa1c)](_0xcb1ffe,_0xcb1ffe);const _0x1c40a9=VisuMZ[_0xbf7f74(0x921)](_0xcb1ffe[_0xbf7f74(0x3cb)]),_0x216da3=_0xcb1ffe[_0xbf7f74(0xc3a)],_0x1f7fa2=_0xcb1ffe[_0xbf7f74(0xc3a)];for(const _0x28e618 of _0x1c40a9){if(_0xbf7f74(0x65c)===_0xbf7f74(0x65f))_0x350345[_0xbf7f74(0x605)][_0xbf7f74(0x706)]['call'](this),this[_0xbf7f74(0x36b)][_0xbf7f74(0x8b9)]=_0xc78505[_0xbf7f74(0x6b3)][_0xbf7f74(0xbba)]['Enemy'][_0xbf7f74(0x9a3)];else{if(!_0x28e618)continue;if(_0x28e618[_0xbf7f74(0x8ff)]==='charging')_0x28e618[_0xbf7f74(0xc1f)](_0x216da3);else _0x28e618[_0xbf7f74(0x8ff)]===_0xbf7f74(0xada)&&_0x28e618[_0xbf7f74(0x9a0)](_0x1f7fa2);}}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Mechanics_CustomDmgFormula',_0x32c962=>{const _0x27b63d=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x27b63d(0xa1c)](_0x32c962,_0x32c962);const _0x19fa25=BattleManager[_0x27b63d(0xbfa)];if(!_0x19fa25)return;let _0x598432=_0x32c962[_0x27b63d(0x369)];_0x19fa25[_0x27b63d(0x29e)](_0x598432);}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x27e),_0x42bd3d=>{const _0x4528d2=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x42bd3d,_0x42bd3d);const _0x3d7e68=VisuMZ[_0x4528d2(0x921)](_0x42bd3d[_0x4528d2(0x3cb)]);for(const _0x3b4915 of _0x3d7e68){if('dmItp'!==_0x4528d2(0xc27)){if(!_0x3b4915)continue;if(_0x3b4915[_0x4528d2(0x7f9)]())_0x3b4915[_0x4528d2(0x372)]();}else{const _0x331b47=this[_0x4528d2(0x94b)](),_0x8c26d2=_0x2ad577['BattleCore'][_0x4528d2(0xbba)][_0x4528d2(0x415)][_0x4528d2(0xaf2)],_0x4840a5=_0x331b47===_0x4528d2(0x245)?_0x2800e8[_0x4528d2(0x535)]:_0x4528d2(0x573)[_0x4528d2(0x98c)](_0x8c26d2,_0x225ffa[_0x4528d2(0x535)]),_0x16883b=this[_0x4528d2(0x27f)]();this[_0x4528d2(0xc54)](_0x4840a5,_0x4528d2(0x535),_0x16883b);}}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Mechanics_DeathBreak',_0x57071c=>{const _0x42366c=_0x1f5c57;if(!SceneManager[_0x42366c(0x2ba)]())return;VisuMZ['ConvertParams'](_0x57071c,_0x57071c);const _0x5893d2=$gameTemp[_0x42366c(0x78b)](),_0x551e77=BattleManager[_0x42366c(0x33d)],_0x12b425=_0x57071c[_0x42366c(0x354)];if(!_0x5893d2)return;if(!_0x551e77)return;if(_0x551e77&&_0x551e77['isDead']()&&_0x12b425[_0x42366c(0x8b5)]()['trim']()!=='UNTITLED'){if(_0x42366c(0x988)===_0x42366c(0x6df)){if(!_0xea4c8[_0x42366c(0x2ba)]())return;_0x3c9de3[_0x42366c(0xa1c)](_0x3fc10c,_0x45d860);const _0x2a949e=_0x217c36[_0x42366c(0x9bb)](_0x1ecf51[_0x42366c(0x4f7)]);if(_0x2a949e<=0x0)return;const _0x11964d=_0x4e9732[_0x42366c(0x78b)](),_0x217c36=_0x584c7d[_0x42366c(0x33d)],_0x4fedbd=_0x25a16e['CreateActionSequenceTargets'](_0x41651b[_0x42366c(0x3cb)]),_0x2f0dcf=_0x3e46a4[_0x42366c(0x1ef)],_0x104e76=_0x5d20f9[_0x42366c(0x57c)];if(!_0x11964d||!_0x217c36)return;_0x5203a2[_0x42366c(0xad2)](_0x4fedbd,_0x2a949e,_0x2f0dcf),_0x146a79[_0x42366c(0xc08)]&&_0x11964d['setWaitMode']('battleAnimation');}else _0x5893d2[_0x42366c(0x203)]([_0x12b425]);}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x41a),_0x9d90bc=>{const _0x47380d=_0x1f5c57;if(!SceneManager[_0x47380d(0x2ba)]())return;VisuMZ[_0x47380d(0xa1c)](_0x9d90bc,_0x9d90bc);const _0x217a4b=VisuMZ[_0x47380d(0x921)](_0x9d90bc[_0x47380d(0x3cb)]);for(const _0x427bed of _0x217a4b){if(_0x47380d(0x30c)!=='mmSyc'){if(!_0x427bed)continue;if(!_0x427bed[_0x47380d(0x951)]())continue;_0x427bed[_0x47380d(0xad6)]();}else this[_0x47380d(0x38c)](...arguments);}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x8ef),_0x4827ab=>{const _0xf888fd=_0x1f5c57;if(!SceneManager[_0xf888fd(0x2ba)]())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager[_0xf888fd(0x1fb)]())return;VisuMZ[_0xf888fd(0xa1c)](_0x4827ab,_0x4827ab);const _0x7f50d3=_0x4827ab[_0xf888fd(0x713)];if(BattleManager['_subject']){if('QjiUz'!==_0xf888fd(0x3d9))return _0x3f3227[_0xf888fd(0x2ba)]()?(_0x421a2c[_0xf888fd(0x831)][_0xf888fd(0x4d6)][_0xf888fd(0x8a6)](_0x1523a9[0x0],_0x5e702d[0x1]),!![]):_0x3e67cf['BattleCore']['Game_Interpreter_command283'][_0xf888fd(0x5a5)](this,_0x49159b);else BattleManager[_0xf888fd(0x33d)][_0xf888fd(0xa45)]()[_0xf888fd(0x85e)](_0x7f50d3);}}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x396),_0x45fe14=>{const _0x4561de=_0x1f5c57;if(!SceneManager[_0x4561de(0x2ba)]())return;if(!Imported[_0x4561de(0x330)])return;if(!BattleManager[_0x4561de(0x4a3)]())return;VisuMZ[_0x4561de(0xa1c)](_0x45fe14,_0x45fe14);const _0x533ab8=_0x45fe14[_0x4561de(0x713)];BattleManager[_0x4561de(0x33d)]&&(_0x4561de(0x55c)===_0x4561de(0x2d1)?_0x3e9f2c[_0x4561de(0x33d)][_0x4561de(0xa45)]()[_0x4561de(0x821)](_0x5782a9):BattleManager[_0x4561de(0x33d)][_0x4561de(0xa45)]()['gainCurrentActionsFTB'](_0x533ab8));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xc3e),_0x4f3d7f=>{const _0x55bd2f=_0x1f5c57;if(!SceneManager[_0x55bd2f(0x2ba)]())return;VisuMZ[_0x55bd2f(0xa1c)](_0x4f3d7f,_0x4f3d7f);const _0x520a1c=VisuMZ[_0x55bd2f(0x921)](_0x4f3d7f[_0x55bd2f(0x3cb)]),_0x16b0e0=_0x4f3d7f[_0x55bd2f(0x476)],_0x3c6753=_0x4f3d7f['HP_Flat'],_0x53dbf8=_0x4f3d7f[_0x55bd2f(0x4c8)],_0x3ebde6=_0x4f3d7f[_0x55bd2f(0x2fb)],_0x178d39=_0x4f3d7f[_0x55bd2f(0x3e4)],_0xc19a9f=_0x4f3d7f['TP_Flat'],_0x51007=_0x4f3d7f['ShowPopup'];for(const _0x72f510 of _0x520a1c){if(!_0x72f510)continue;const _0x929349=_0x72f510[_0x55bd2f(0x3b0)](),_0x5df9d2=Math[_0x55bd2f(0x93c)](_0x16b0e0*_0x72f510[_0x55bd2f(0x637)]+_0x3c6753),_0x4de611=Math[_0x55bd2f(0x93c)](_0x53dbf8*_0x72f510['mmp']+_0x3ebde6),_0x141c58=Math[_0x55bd2f(0x93c)](_0x178d39*_0x72f510[_0x55bd2f(0x892)]()+_0xc19a9f);if(_0x5df9d2!==0x0)_0x72f510['gainHp'](_0x5df9d2);if(_0x4de611!==0x0)_0x72f510['gainMp'](_0x4de611);if(_0x141c58!==0x0)_0x72f510[_0x55bd2f(0x541)](_0x141c58);if(_0x51007)_0x72f510['startDamagePopup']();_0x929349&&_0x72f510['isDead']()&&_0x72f510[_0x55bd2f(0x630)]();}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x751),_0x321a97=>{const _0x148156=_0x1f5c57;if(!SceneManager[_0x148156(0x2ba)]())return;VisuMZ[_0x148156(0xa1c)](_0x321a97,_0x321a97);const _0xfba3ff=VisuMZ[_0x148156(0x921)](_0x321a97['Targets']);for(const _0x4b05fe of _0xfba3ff){if(!_0x4b05fe)continue;_0x4b05fe[_0x148156(0x526)](_0x321a97[_0x148156(0x458)]);}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xab2),_0x48b94d=>{const _0x4c5708=_0x1f5c57;if(!SceneManager[_0x4c5708(0x2ba)]())return;VisuMZ[_0x4c5708(0xa1c)](_0x48b94d,_0x48b94d);const _0x23a851=BattleManager['_action'],_0xfd7236={'criticalHitRate':_0x48b94d['CriticalHitRate'],'criticalHitFlat':_0x48b94d[_0x4c5708(0xafb)],'criticalDmgRate':_0x48b94d['CriticalDmgRate'],'criticalDmgFlat':_0x48b94d[_0x4c5708(0x3c3)],'damageRate':_0x48b94d[_0x4c5708(0x298)],'damageFlat':_0x48b94d[_0x4c5708(0x237)],'hitRate':_0x48b94d['HitRate'],'hitFlat':_0x48b94d[_0x4c5708(0x583)]};_0x23a851[_0x4c5708(0xc4e)]=_0xfd7236;}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Mechanics_OnceParallel',_0x30effc=>{const _0x44b5b4=_0x1f5c57;if(!SceneManager[_0x44b5b4(0x2ba)]())return;VisuMZ[_0x44b5b4(0xa1c)](_0x30effc,_0x30effc);const _0x267692=_0x30effc[_0x44b5b4(0x4fe)];SceneManager[_0x44b5b4(0x831)][_0x44b5b4(0x709)](_0x267692);}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x2a2),_0xe17c78=>{const _0x320e58=_0x1f5c57;if(!SceneManager[_0x320e58(0x2ba)]())return;if(!Imported[_0x320e58(0x435)])return;if(!BattleManager[_0x320e58(0x50a)]())return;VisuMZ['ConvertParams'](_0xe17c78,_0xe17c78);const _0x25d507=VisuMZ[_0x320e58(0x921)](_0xe17c78[_0x320e58(0x3cb)]);for(const _0x9d8108 of _0x25d507){if(!_0x9d8108)continue;let _0x54c32d=_0xe17c78[_0x320e58(0x5a1)],_0x564991=_0xe17c78[_0x320e58(0x8cb)],_0x49d4bf=_0xe17c78['FollowTurn'];BattleManager['_actionBattlers']['includes'](_0x9d8108)?_0x54c32d+=_0x49d4bf:_0x564991+=_0x49d4bf,BattleManager['turnOrderChangeOTB'](_0x9d8108,-_0x54c32d,![]),BattleManager[_0x320e58(0x6fd)](_0x9d8108,-_0x564991,!![]);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_PtbAlterCost',_0x10adcf=>{const _0x299672=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x299672(0x5a8)])return;if(!BattleManager[_0x299672(0x3da)]())return;VisuMZ[_0x299672(0xa1c)](_0x10adcf,_0x10adcf);const _0x3f0975=BattleManager[_0x299672(0x33d)][_0x299672(0xa45)](),_0x1d258f=_0x10adcf[_0x299672(0xa2c)],_0x4fcb7a=_0x10adcf[_0x299672(0x710)]||_0x299672(0x9e4),_0x3fe9f2=_0x10adcf[_0x299672(0x678)]||_0x299672(0x9e4),_0x4d6050=_0x10adcf[_0x299672(0x789)]||0x0,_0x3f262e=_0x10adcf[_0x299672(0x641)]||0x0;if(_0x3f0975[_0x299672(0xabe)]()||_0x1d258f){if(_0x299672(0xc09)!==_0x299672(0x865))_0x1d258f&&(_0x3f0975[_0x299672(0x686)]=_0x3f0975[_0x299672(0x686)]||{},_0x3f0975[_0x299672(0x686)]['priority']=0x0),_0x3f0975[_0x299672(0xc71)](_0x4fcb7a,_0x3fe9f2,_0x4d6050,_0x3f262e);else{if(!_0x42f645[_0x299672(0x2ba)]())return;if(!_0x5c2bbc[_0x299672(0x908)])return;const _0x4b2001=_0x5d96d9['getLastPluginCommandInterpreter']();if(!_0x4b2001)return;_0x4b2001[_0x299672(0x924)](_0x299672(0x265));}}}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],'ActSeq_Mechanics_PtbConvert',_0x216681=>{const _0x10cd62=_0x1f5c57;if(!SceneManager[_0x10cd62(0x2ba)]())return;if(!Imported[_0x10cd62(0x5a8)])return;if(!BattleManager[_0x10cd62(0x3da)]())return;VisuMZ[_0x10cd62(0xa1c)](_0x216681,_0x216681);const _0x32aebd=BattleManager['_subject'][_0x10cd62(0xa45)]();let _0x51972b=Math[_0x10cd62(0x795)](_0x216681[_0x10cd62(0x6b5)],0x0),_0x5416b7=_0x32aebd[_0x10cd62(0x8cc)](),_0x4df60a=_0x32aebd[_0x10cd62(0xc17)]();while(_0x51972b--){if(_0x10cd62(0x32e)===_0x10cd62(0x32e)){if(_0x5416b7<=0x0&&_0x4df60a<=0x0)break;else _0x5416b7>0x0?(_0x5416b7--,_0x4df60a++):_0x4df60a--;}else _0x223391[_0x10cd62(0x87c)](_0x15e81f),_0x366b36['processBattleCoreJS'](_0x5755c1);}_0x32aebd[_0x10cd62(0xa82)](_0x5416b7),_0x32aebd[_0x10cd62(0xb2f)](_0x4df60a);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Mechanics_PtbFullHalfAction',_0x3d020d=>{const _0xf71776=_0x1f5c57;if(!SceneManager[_0xf71776(0x2ba)]())return;if(!Imported[_0xf71776(0x5a8)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0xf71776(0xa1c)](_0x3d020d,_0x3d020d);const _0x2f1c6f=BattleManager[_0xf71776(0x33d)][_0xf71776(0xa45)]();let _0x2bcc24=_0x3d020d[_0xf71776(0x570)],_0x30059f=_0x3d020d[_0xf71776(0x983)];_0x2f1c6f[_0xf71776(0x7a3)](_0x2bcc24),_0x2f1c6f[_0xf71776(0xa0e)](_0x30059f);}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x2f282b=>{const _0x575f69=_0x1f5c57;if(!SceneManager[_0x575f69(0x2ba)]())return;VisuMZ[_0x575f69(0xa1c)](_0x2f282b,_0x2f282b);const _0x194806=['MAXHP',_0x575f69(0xc84),'ATK',_0x575f69(0xaa7),_0x575f69(0x88a),_0x575f69(0x912),_0x575f69(0x726),'LUK'],_0x1a9756=_0x2f282b[_0x575f69(0x1d1)],_0x3180eb=_0x2f282b['Debuffs'],_0x1fbcaa=VisuMZ['CreateActionSequenceTargets'](_0x2f282b[_0x575f69(0x3cb)]);for(const _0x37a46d of _0x1fbcaa){if(_0x575f69(0x7dc)==='Woezm'){if(!this[_0x575f69(0xa57)]())return![];return _0x4b7c4f[_0x575f69(0x6b3)]['Game_BattlerBase_canGuard']['call'](this);}else{if(!_0x37a46d)continue;for(const _0xea584b of _0x1a9756){if('UpJMf'===_0x575f69(0x2c5)){const _0x261084=_0x194806['indexOf'](_0xea584b['toUpperCase']()['trim']());_0x261084>=0x0&&_0x261084<=0x7&&_0x37a46d[_0x575f69(0xa3f)](_0x261084)&&_0x37a46d['removeBuff'](_0x261084);}else this[_0x575f69(0x1f3)](),this[_0x575f69(0x825)](),_0x5666f2[_0x575f69(0x605)][_0x575f69(0x9ea)][_0x575f69(0x5a5)](this),this[_0x575f69(0x3d3)]();}for(const _0x196391 of _0x3180eb){const _0x1b270a=_0x194806[_0x575f69(0x94d)](_0x196391['toUpperCase']()[_0x575f69(0xc8b)]());_0x1b270a>=0x0&&_0x1b270a<=0x7&&_0x37a46d['isDebuffAffected'](_0x1b270a)&&_0x37a46d[_0x575f69(0x2c7)](_0x1b270a);}}}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x9e3),_0x99fa18=>{const _0x5b4261=_0x1f5c57;if(!SceneManager[_0x5b4261(0x2ba)]())return;VisuMZ[_0x5b4261(0xa1c)](_0x99fa18,_0x99fa18);const _0x35e40b=_0x99fa18['States'],_0x591ab9=VisuMZ['CreateActionSequenceTargets'](_0x99fa18['Targets']);for(const _0x5273b5 of _0x591ab9){if(!_0x5273b5)continue;for(const _0x5a24b8 of _0x35e40b){_0x5273b5['removeState'](_0x5a24b8);}}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x406),_0x2517e3=>{const _0x34d4b1=_0x1f5c57;if(!SceneManager[_0x34d4b1(0x2ba)]())return;if(!Imported[_0x34d4b1(0xa69)])return;if(!BattleManager[_0x34d4b1(0x8fe)]())return;VisuMZ[_0x34d4b1(0xa1c)](_0x2517e3,_0x2517e3);const _0x1a6d46=_0x2517e3[_0x34d4b1(0x5c7)],_0x4f328a=VisuMZ['CreateActionSequenceTargets'](_0x2517e3[_0x34d4b1(0x3cb)]),_0x5370e7=_0x2517e3[_0x34d4b1(0xb7b)],_0x5cb0db=_0x2517e3[_0x34d4b1(0x2dc)],_0x3a05a2=_0x2517e3[_0x34d4b1(0x6f2)],_0x114351=BattleManager['_action'];if(_0x1a6d46){if(_0x34d4b1(0x410)===_0x34d4b1(0x410))for(const _0x45692d of _0x4f328a){if(!_0x45692d)continue;if(_0x45692d===user)continue;if(_0x5370e7)_0x45692d[_0x34d4b1(0x91e)](![]);_0x45692d[_0x34d4b1(0x9bf)](BattleManager[_0x34d4b1(0x33d)],_0x114351);}else _0x2d34ba[_0x34d4b1(0x6b3)][_0x34d4b1(0x46d)][_0x34d4b1(0x5a5)](this,_0x43c559),this['callNextMethod']();}if(_0x5cb0db&&BattleManager[_0x34d4b1(0x33d)]){if(_0x3a05a2)BattleManager[_0x34d4b1(0x33d)][_0x34d4b1(0x91e)](![]);const _0x4ea78a=_0x4f328a[0x0];BattleManager[_0x34d4b1(0x2e3)](_0x4ea78a,_0x114351);}}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xa66),_0x1b1680=>{const _0x36147c=_0x1f5c57;if(!SceneManager[_0x36147c(0x2ba)]())return;if(!Imported[_0x36147c(0xa69)])return;if(!BattleManager[_0x36147c(0x8fe)]())return;VisuMZ[_0x36147c(0xa1c)](_0x1b1680,_0x1b1680);const _0x5df044=_0x1b1680[_0x36147c(0x446)];BattleManager['_subject']&&BattleManager[_0x36147c(0x33d)][_0x36147c(0xc4c)](_0x5df044);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x51f),_0x5ac727=>{const _0x4e9e30=_0x1f5c57;if(!SceneManager[_0x4e9e30(0x2ba)]())return;if(!Imported[_0x4e9e30(0xa69)])return;if(!BattleManager[_0x4e9e30(0x8fe)]())return;VisuMZ[_0x4e9e30(0xa1c)](_0x5ac727,_0x5ac727);let _0x19e20c=_0x5ac727[_0x4e9e30(0x446)];if(BattleManager[_0x4e9e30(0x33d)]){if(_0x4e9e30(0x808)!==_0x4e9e30(0x808)){this[_0x4e9e30(0x962)]=new _0x5f2ee1();const _0x5e8db2=_0x239c51[_0x4e9e30(0x831)],_0x435841=_0x5e8db2['children']['indexOf'](_0x5e8db2[_0x4e9e30(0x721)]);_0x5e8db2[_0x4e9e30(0xbb0)](this['_borderPortraitSprite'],_0x435841),this[_0x4e9e30(0x962)]['anchor']['x']=0.5,this[_0x4e9e30(0x962)][_0x4e9e30(0x8de)]['y']=0x1;const _0x1d632c=_0x2b0f90[_0x4e9e30(0x6b3)][_0x4e9e30(0xbba)][_0x4e9e30(0x66d)]['PortraitScaleBorderStyle'];this[_0x4e9e30(0x962)]['scale']['x']=_0x1d632c,this[_0x4e9e30(0x962)][_0x4e9e30(0xa7b)]['y']=_0x1d632c,this[_0x4e9e30(0x962)]['y']=this['y']+this[_0x4e9e30(0x53d)],this[_0x4e9e30(0xa33)]=0x0;}else{BattleManager[_0x4e9e30(0x33d)][_0x4e9e30(0x760)]=BattleManager[_0x4e9e30(0x33d)]['_actions']||[];while(_0x19e20c--){if(BattleManager['_subject'][_0x4e9e30(0x760)][_0x4e9e30(0x9fe)]<=0x0)break;BattleManager['_subject'][_0x4e9e30(0x760)]['shift']();}}}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x997),_0x54509a=>{const _0x32c15d=_0x1f5c57;if(!SceneManager[_0x32c15d(0x2ba)]())return;if(!Imported[_0x32c15d(0x9f4)])return;VisuMZ[_0x32c15d(0xa1c)](_0x54509a,_0x54509a);const _0x514ad3=VisuMZ[_0x32c15d(0x921)](_0x54509a[_0x32c15d(0x3cb)]),_0x443aae=_0x54509a[_0x32c15d(0x6b0)];for(const _0x2ae4b3 of _0x514ad3){if(!_0x2ae4b3)continue;if(!_0x2ae4b3[_0x32c15d(0xbcf)]())continue;_0x2ae4b3['switchToWeaponType'](_0x443aae);}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x1fc),_0x2eb1d8=>{const _0x5895c8=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5895c8(0xa1c)](_0x2eb1d8,_0x2eb1d8);const _0x1ff887=VisuMZ[_0x5895c8(0x921)](_0x2eb1d8[_0x5895c8(0x3cb)]),_0x31ed83=_0x2eb1d8[_0x5895c8(0x8a1)],_0x4eaf21={'textColor':ColorManager['getColor'](_0x2eb1d8['TextColor']),'flashColor':_0x2eb1d8[_0x5895c8(0x1d7)],'flashDuration':_0x2eb1d8[_0x5895c8(0x57d)]};for(const _0x28c982 of _0x1ff887){if(_0x5895c8(0x236)==='ZZaGi')this[_0x5895c8(0x83e)]()&&this[_0x5895c8(0x83e)]()[_0x5895c8(0x306)]()?_0x580a97[_0x5895c8(0x6b3)][_0x5895c8(0x690)][_0x5895c8(0x5a5)](this):this[_0x5895c8(0x8e1)]();else{if(!_0x28c982)continue;_0x28c982['setupTextPopup'](_0x31ed83,_0x4eaf21);}}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x847),_0x603ec2=>{const _0x202b9f=_0x1f5c57;if(!SceneManager[_0x202b9f(0x2ba)]())return;VisuMZ['ConvertParams'](_0x603ec2,_0x603ec2);const _0x2e8f7c=VisuMZ['CreateActionSequenceTargets'](_0x603ec2[_0x202b9f(0x3cb)]);let _0x440fe7=$gameVariables[_0x202b9f(0x963)](_0x603ec2['Variable']);Imported[_0x202b9f(0x8bb)]&&_0x603ec2['DigitGrouping']&&(_0x440fe7=VisuMZ['GroupDigits'](_0x440fe7));const _0x176cbd=String(_0x440fe7),_0x2abc3c={'textColor':ColorManager[_0x202b9f(0x80c)](_0x603ec2['TextColor']),'flashColor':_0x603ec2[_0x202b9f(0x1d7)],'flashDuration':_0x603ec2[_0x202b9f(0x57d)]};for(const _0x17f609 of _0x2e8f7c){if('TKKRQ'===_0x202b9f(0x99b)){if(!_0x17f609)continue;_0x17f609['setupTextPopup'](_0x176cbd,_0x2abc3c);}else return this[_0x202b9f(0x4e5)]?this[_0x202b9f(0x4e5)][_0x202b9f(0xae2)]===0x0&&this[_0x202b9f(0x4e5)]['_offsetY']===0x0:!![];}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x8c8),_0x573913=>{const _0x5d95b9=_0x1f5c57;if(!SceneManager[_0x5d95b9(0x2ba)]())return;const _0x10fdcb=$gameTemp[_0x5d95b9(0x78b)]();if(!_0x10fdcb)return;_0x10fdcb[_0x5d95b9(0x924)](_0x5d95b9(0x66f));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x5ff),_0x2a67aa=>{const _0x3e9bc6=_0x1f5c57;if(!SceneManager[_0x3e9bc6(0x2ba)]())return;VisuMZ[_0x3e9bc6(0xa1c)](_0x2a67aa,_0x2a67aa);const _0x2b9014=VisuMZ['CreateActionSequenceTargets'](_0x2a67aa[_0x3e9bc6(0x3cb)]);for(const _0x365756 of _0x2b9014){if(!_0x365756)continue;_0x365756[_0x3e9bc6(0x439)]();}}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x30e),_0x1240af=>{const _0x4fb0d6=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4fb0d6(0xa1c)](_0x1240af,_0x1240af);const _0x5ad484=VisuMZ[_0x4fb0d6(0x921)](_0x1240af['Targets']),_0x162ab5=_0x1240af[_0x4fb0d6(0xc93)][_0x4fb0d6(0x281)]()[_0x4fb0d6(0xc8b)]();let _0x43262a=_0x1240af[_0x4fb0d6(0x1f0)];const _0x44819d=_0x1240af[_0x4fb0d6(0x843)];!['attack',_0x4fb0d6(0x56b),_0x4fb0d6(0x835),_0x4fb0d6(0x985)][_0x4fb0d6(0x60e)](_0x162ab5)&&(_0x43262a=![]);for(const _0x28828f of _0x5ad484){if(!_0x28828f)continue;_0x28828f[_0x4fb0d6(0x1e8)](_0x162ab5,_0x43262a,_0x44819d);}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xafc),_0x3237fb=>{const _0x1a1c04=_0x1f5c57;if(!SceneManager[_0x1a1c04(0x2ba)]())return;VisuMZ[_0x1a1c04(0xa1c)](_0x3237fb,_0x3237fb);const _0x51228d=VisuMZ[_0x1a1c04(0x921)](_0x3237fb['Targets']),_0x106119=_0x3237fb[_0x1a1c04(0xc93)][_0x1a1c04(0x281)]()[_0x1a1c04(0xc8b)](),_0x1b0811=_0x3237fb[_0x1a1c04(0x1f0)];for(const _0x2709cd of _0x51228d){if(_0x1a1c04(0x606)==='sQeDD'){if(!_0x2709cd)continue;if(_0x106119[_0x1a1c04(0x7a1)](/ATTACK[ ](\d+)/i))_0x2709cd[_0x1a1c04(0x8c0)](Number(RegExp['$1']));else _0x106119==='attack'?_0x2709cd[_0x1a1c04(0xb49)]():_0x2709cd[_0x1a1c04(0x559)](_0x106119);if(!_0x1b0811)_0x2709cd['startWeaponAnimation'](0x0);else{if(_0x1b0811&&[_0x1a1c04(0x56b),_0x1a1c04(0x835),_0x1a1c04(0x645)][_0x1a1c04(0x60e)](_0x106119)){}}}else{if(this[_0x1a1c04(0x4d7)]())this[_0x1a1c04(0xa8e)]['forceWeaponAnimation'](_0x143efc);}}}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x75a),_0xe17b80=>{const _0x35ee7d=_0x1f5c57;if(!SceneManager[_0x35ee7d(0x2ba)]())return;VisuMZ[_0x35ee7d(0xa1c)](_0xe17b80,_0xe17b80);const _0x57c9a4=BattleManager[_0x35ee7d(0xbfa)];if(!_0x57c9a4)return;if(!_0x57c9a4[_0x35ee7d(0x20c)]())return;const _0x8661db=VisuMZ[_0x35ee7d(0x921)](_0xe17b80['Targets']);for(const _0x33b5fe of _0x8661db){if(!_0x33b5fe)continue;_0x33b5fe[_0x35ee7d(0x6ce)](_0x57c9a4);}}),PluginManager['registerCommand'](pluginData['name'],_0x1f5c57(0x826),_0x1b2c9d=>{const _0x505926=_0x1f5c57;if(!SceneManager[_0x505926(0x2ba)]())return;VisuMZ[_0x505926(0xa1c)](_0x1b2c9d,_0x1b2c9d);const _0x4dcc70=VisuMZ[_0x505926(0x921)](_0x1b2c9d[_0x505926(0x3cb)]);for(const _0xe3b2e9 of _0x4dcc70){if(_0x505926(0xb69)!==_0x505926(0xb69)){const _0x8c9ead=_0x3e8d3b['isActor']()?_0x57d18a[_0x505926(0xc91)]:_0x149953['message2'];_0x8c9ead&&_0x34e6f0[_0x505926(0x6b3)][_0x505926(0xbba)]['BattleLog']['ShowAddedState']&&(this[_0x505926(0x5af)](_0x505926(0xbf2)),this[_0x505926(0x5af)]('popBaseLine'),this['push'](_0x505926(0x67c)),this[_0x505926(0x5af)](_0x505926(0x5c6),_0x8c9ead[_0x505926(0x98c)](_0x593f45[_0x505926(0x310)]())),this['push']('wait')),_0x4cc7d7['id']===_0x31217e[_0x505926(0x50c)]()&&this['push'](_0x505926(0x630),_0x48660b);}else{if(!_0xe3b2e9)continue;if(!_0xe3b2e9[_0x505926(0x4b2)]())continue;_0xe3b2e9[_0x505926(0x4b2)]()[_0x505926(0x485)]();}}}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0xb34),_0x4a597d=>{const _0x2bfeb6=_0x1f5c57;if(!SceneManager[_0x2bfeb6(0x2ba)]())return;VisuMZ[_0x2bfeb6(0xa1c)](_0x4a597d,_0x4a597d);const _0x844a90=$gameTemp[_0x2bfeb6(0x78b)](),_0x46b620=_0x4a597d[_0x2bfeb6(0x9da)]*Sprite_Battler['_motionSpeed'];_0x844a90[_0x2bfeb6(0x478)](_0x46b620);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x628),_0x259b16=>{const _0x46251d=_0x1f5c57;if(!SceneManager[_0x46251d(0x2ba)]())return;VisuMZ[_0x46251d(0xa1c)](_0x259b16,_0x259b16);const _0x45b989=$gameTemp[_0x46251d(0x78b)](),_0x1eb50a=BattleManager[_0x46251d(0xbfa)];if(!_0x45b989||!_0x1eb50a)return;if(!_0x1eb50a[_0x46251d(0x20c)]())return;const _0x55e81e=VisuMZ[_0x46251d(0x921)](_0x259b16[_0x46251d(0x3cb)]);for(const _0x10f780 of _0x55e81e){if(!_0x10f780)continue;_0x10f780[_0x46251d(0x61f)](_0x1eb50a);}if(_0x259b16[_0x46251d(0x2ae)])_0x45b989[_0x46251d(0x924)](_0x46251d(0x397));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Movement_HomeMoveBy',_0x46e881=>{const _0x54c702=_0x1f5c57;if(!SceneManager[_0x54c702(0x2ba)]())return;if(!$gameSystem[_0x54c702(0x754)]())return;VisuMZ[_0x54c702(0xa1c)](_0x46e881,_0x46e881);const _0x575951=$gameTemp[_0x54c702(0x78b)](),_0xfa8127=VisuMZ['CreateActionSequenceTargets'](_0x46e881[_0x54c702(0x3cb)]),_0x3dfff3=_0x46e881[_0x54c702(0xbcd)],_0x16bce9=_0x46e881[_0x54c702(0xaf0)],_0x493c7a=_0x46e881[_0x54c702(0x54b)],_0x177794=_0x46e881[_0x54c702(0xacb)],_0x403c78=_0x46e881[_0x54c702(0x5a0)],_0x52bfd4=_0x46e881[_0x54c702(0xa64)],_0x18797e=_0x46e881[_0x54c702(0xc93)],_0x3194ef=_0x46e881['WaitForMovement'];if(!_0x575951)return;for(const _0x2138c0 of _0xfa8127){if(!_0x2138c0)continue;let _0x2be8a8=_0x16bce9,_0x5654d3=_0x493c7a;if(_0x3dfff3[_0x54c702(0x7a1)](/horz/i))_0x2be8a8*=_0x2138c0[_0x54c702(0xbcf)]()?-0x1:0x1;if(_0x3dfff3[_0x54c702(0x7a1)](/vert/i))_0x5654d3*=_0x2138c0[_0x54c702(0xbcf)]()?-0x1:0x1;_0x2138c0[_0x54c702(0x999)](_0x2be8a8,_0x5654d3,_0x177794,_0x403c78,_0x52bfd4),_0x2138c0[_0x54c702(0x559)](_0x18797e);}if(_0x3194ef)_0x575951[_0x54c702(0x924)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x437),_0x370b57=>{const _0x483539=_0x1f5c57;if(!SceneManager[_0x483539(0x2ba)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x483539(0xa1c)](_0x370b57,_0x370b57);const _0x203756=$gameTemp['getLastPluginCommandInterpreter'](),_0x3e697a=VisuMZ[_0x483539(0x921)](_0x370b57[_0x483539(0x3cb)]),_0x111380=_0x370b57[_0x483539(0x2f5)],_0x559944=_0x370b57[_0x483539(0xc3b)],_0x29752f=_0x370b57[_0x483539(0x590)],_0x42e1ff=_0x370b57[_0x483539(0x2a8)],_0x2a666d=_0x370b57[_0x483539(0xacb)],_0x17bcd7=_0x370b57[_0x483539(0x5a0)],_0x30bbce=_0x370b57[_0x483539(0xa64)],_0x5d47b4=_0x370b57['MotionType'],_0x25134c=_0x370b57[_0x483539(0x2ae)];if(!_0x203756)return;for(const _0x1c7512 of _0x3e697a){if(!_0x1c7512)continue;let _0x9c96bb=_0x1c7512[_0x483539(0x4b2)]()[_0x483539(0x1ed)],_0x14cf6d=_0x1c7512['battler']()[_0x483539(0x8b7)];if(_0x111380[_0x483539(0x7a1)](/home/i))_0x9c96bb=_0x1c7512[_0x483539(0x4b2)]()[_0x483539(0x2b9)],_0x14cf6d=_0x1c7512[_0x483539(0x4b2)]()[_0x483539(0xc60)];else{if(_0x111380['match'](/center/i)){if(_0x483539(0x897)!==_0x483539(0x897)){this['bitmap'][_0x483539(0x8e1)]();const _0x546cf5=this[_0x483539(0x29a)]();!_0x592fdd(_0x546cf5)&&this[_0x483539(0x77d)]();}else _0x9c96bb=Graphics[_0x483539(0xb4d)]/0x2,_0x14cf6d=Graphics[_0x483539(0x4f3)]/0x2;}else _0x111380[_0x483539(0x7a1)](/point (\d+), (\d+)/i)&&(_0x9c96bb=Number(RegExp['$1']),_0x14cf6d=Number(RegExp['$2']));}if(_0x559944[_0x483539(0x7a1)](/none/i)){if(_0x483539(0x669)!=='lfSVt')_0x9c96bb+=_0x29752f,_0x14cf6d+=_0x42e1ff;else{this[_0x483539(0x462)][_0x483539(0x337)]=0x0;return;}}else{if(_0x559944['match'](/horz/i)&&_0x559944[_0x483539(0x7a1)](/vert/i))'fzBip'!==_0x483539(0xa85)?(_0x9c96bb+=_0x1c7512['isActor']()?-_0x29752f:_0x29752f,_0x14cf6d+=_0x1c7512['isActor']()?-_0x42e1ff:_0x42e1ff):(_0x4de28b[_0x483539(0x6b3)][_0x483539(0x209)][_0x483539(0x5a5)](this),this[_0x483539(0x312)]());else{if(_0x559944[_0x483539(0x7a1)](/horz/i))_0x9c96bb+=_0x1c7512[_0x483539(0xbcf)]()?-_0x29752f:_0x29752f,_0x14cf6d+=_0x42e1ff;else _0x559944[_0x483539(0x7a1)](/vert/i)&&(_0x9c96bb+=_0x29752f,_0x14cf6d+=_0x1c7512[_0x483539(0xbcf)]()?-_0x42e1ff:_0x42e1ff);}}_0x1c7512[_0x483539(0x24a)](_0x9c96bb,_0x14cf6d,_0x2a666d,_0x17bcd7,_0x30bbce,-0x1),_0x1c7512[_0x483539(0x559)](_0x5d47b4);}if(_0x25134c)_0x203756[_0x483539(0x924)](_0x483539(0x397));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xa4f),_0x26c997=>{const _0x3f1bfb=_0x1f5c57;if(!SceneManager[_0x3f1bfb(0x2ba)]())return;if(!$gameSystem[_0x3f1bfb(0x754)]())return;VisuMZ[_0x3f1bfb(0xa1c)](_0x26c997,_0x26c997);const _0x20f20b=$gameTemp[_0x3f1bfb(0x78b)](),_0x203596=VisuMZ[_0x3f1bfb(0x921)](_0x26c997[_0x3f1bfb(0x287)]),_0x305dcb=VisuMZ[_0x3f1bfb(0x921)](_0x26c997[_0x3f1bfb(0x345)]),_0x1c8aef=_0x26c997[_0x3f1bfb(0xb5c)];let _0x3f94e0=_0x26c997['MeleeDistance'];const _0x476ce2=_0x26c997[_0x3f1bfb(0xc3b)],_0x2bdf15=_0x26c997['OffsetX'],_0x4c9012=_0x26c997['OffsetY'],_0x6a96c=_0x26c997[_0x3f1bfb(0xacb)],_0x56c0d9=_0x26c997[_0x3f1bfb(0x5a0)],_0x3d8563=_0x26c997[_0x3f1bfb(0xa64)],_0x234310=_0x26c997[_0x3f1bfb(0xc93)],_0xe3d096=_0x26c997[_0x3f1bfb(0x2ae)],_0x433d4c=Math[_0x3f1bfb(0xaea)](..._0x305dcb[_0x3f1bfb(0x6f1)](_0x3e41e7=>_0x3e41e7[_0x3f1bfb(0x4b2)]()[_0x3f1bfb(0x1ed)]-_0x3e41e7['battler']()[_0x3f1bfb(0x8c7)]()/0x2)),_0x19e87a=Math[_0x3f1bfb(0x795)](..._0x305dcb['map'](_0x11a509=>_0x11a509[_0x3f1bfb(0x4b2)]()['_baseX']+_0x11a509[_0x3f1bfb(0x4b2)]()[_0x3f1bfb(0x8c7)]()/0x2)),_0xebc1b1=Math[_0x3f1bfb(0xaea)](..._0x305dcb[_0x3f1bfb(0x6f1)](_0x2f3a79=>_0x2f3a79[_0x3f1bfb(0x4b2)]()[_0x3f1bfb(0x8b7)]-_0x2f3a79['battler']()[_0x3f1bfb(0xc35)]())),_0x3fd7bb=Math[_0x3f1bfb(0x795)](..._0x305dcb[_0x3f1bfb(0x6f1)](_0x5e93c0=>_0x5e93c0[_0x3f1bfb(0x4b2)]()[_0x3f1bfb(0x8b7)])),_0x54b0f6=_0x305dcb[_0x3f1bfb(0x6ae)](_0xe1e2fc=>_0xe1e2fc[_0x3f1bfb(0xbcf)]())[_0x3f1bfb(0x9fe)],_0x1ac930=_0x305dcb[_0x3f1bfb(0x6ae)](_0x963e44=>_0x963e44[_0x3f1bfb(0x951)]())[_0x3f1bfb(0x9fe)];let _0x4fd54e=0x0,_0x406c34=0x0;if(_0x1c8aef[_0x3f1bfb(0x7a1)](/front/i)){if(_0x3f1bfb(0x7ce)===_0x3f1bfb(0x7ce))_0x4fd54e=_0x54b0f6>=_0x1ac930?_0x433d4c:_0x19e87a;else{return _0x27b236[_0x3f1bfb(0x605)]['isRightInputMode'][_0x3f1bfb(0x5a5)](this);;}}else{if(_0x1c8aef[_0x3f1bfb(0x7a1)](/middle/i))_0x4fd54e=(_0x433d4c+_0x19e87a)/0x2,_0x3f94e0=-0x1;else _0x1c8aef[_0x3f1bfb(0x7a1)](/back/i)&&(_0x4fd54e=_0x54b0f6>=_0x1ac930?_0x19e87a:_0x433d4c);}if(_0x1c8aef[_0x3f1bfb(0x7a1)](/head/i))_0x406c34=_0xebc1b1;else{if(_0x1c8aef['match'](/center/i))_0x406c34=(_0xebc1b1+_0x3fd7bb)/0x2;else _0x1c8aef[_0x3f1bfb(0x7a1)](/base/i)&&(_0x406c34=_0x3fd7bb);}if(!_0x20f20b)return;for(const _0x455d78 of _0x203596){if(!_0x455d78)continue;let _0x3d49e6=_0x4fd54e,_0x3478f0=_0x406c34;if(_0x476ce2[_0x3f1bfb(0x7a1)](/none/i)){if(_0x3f1bfb(0xa3a)===_0x3f1bfb(0x3be))return _0x53fc0['BattleCore'][_0x3f1bfb(0xa55)][_0x3f1bfb(0x5a5)](this);else _0x3d49e6+=_0x2bdf15,_0x3478f0+=_0x4c9012;}else{if(_0x476ce2[_0x3f1bfb(0x7a1)](/horz/i)&&_0x476ce2[_0x3f1bfb(0x7a1)](/vert/i))_0x3f1bfb(0xade)!==_0x3f1bfb(0x866)?(_0x3d49e6+=_0x455d78['isActor']()?-_0x2bdf15:_0x2bdf15,_0x3478f0+=_0x455d78[_0x3f1bfb(0xbcf)]()?-_0x4c9012:_0x4c9012):(_0x13557d[_0x3f1bfb(0x605)][_0x3f1bfb(0x38c)][_0x3f1bfb(0x5a5)](this,_0x10e7f0),this[_0x3f1bfb(0x8ac)](this[_0x3f1bfb(0x90e)]()),this[_0x3f1bfb(0xba7)]());else{if(_0x476ce2[_0x3f1bfb(0x7a1)](/horz/i)){if(_0x3f1bfb(0x8a3)!==_0x3f1bfb(0xa29))_0x3d49e6+=_0x455d78[_0x3f1bfb(0xbcf)]()?-_0x2bdf15:_0x2bdf15,_0x3478f0+=_0x4c9012;else{const _0x54240f=_0x57bb9b[_0x3f1bfb(0x94d)](_0x3b7552);return _0x54240f>=0x0?[_0x26b153[_0x54240f-0x1]||_0x4b0d60]:[_0xb1fa4b];}}else _0x476ce2['match'](/vert/i)&&(_0x3d49e6+=_0x2bdf15,_0x3478f0+=_0x455d78[_0x3f1bfb(0xbcf)]()?-_0x4c9012:_0x4c9012);}}_0x455d78[_0x3f1bfb(0x24a)](_0x3d49e6,_0x3478f0,_0x6a96c,_0x56c0d9,_0x3d8563,_0x3f94e0),_0x455d78[_0x3f1bfb(0x559)](_0x234310);}if(_0xe3d096)_0x20f20b[_0x3f1bfb(0x924)]('battleMove');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x7fe),_0x43612e=>{const _0x109786=_0x1f5c57;if(!SceneManager[_0x109786(0x2ba)]())return;if(!$gameSystem[_0x109786(0x754)]())return;VisuMZ[_0x109786(0xa1c)](_0x43612e,_0x43612e);const _0x352fc7=VisuMZ[_0x109786(0x921)](_0x43612e['Targets']);let _0x3fc639=_0x43612e['Direction'][_0x109786(0x7a1)](/back/i);for(const _0x4638c0 of _0x352fc7){if(_0x109786(0x40e)!==_0x109786(0x7b9)){if(!_0x4638c0)continue;if(_0x43612e[_0x109786(0x4ba)][_0x109786(0x7a1)](/rand/i))_0x3fc639=Math[_0x109786(0x60a)](0x2);_0x4638c0[_0x109786(0x2b2)](!!_0x3fc639);}else this[_0x109786(0x5af)]('performCollapse',_0x3d1ed4);}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x8fc),_0x31694d=>{const _0x4bc5bd=_0x1f5c57;if(!SceneManager[_0x4bc5bd(0x2ba)]())return;if(!$gameSystem[_0x4bc5bd(0x754)]())return;VisuMZ[_0x4bc5bd(0xa1c)](_0x31694d,_0x31694d);const _0x3e818d=VisuMZ['CreateActionSequenceTargets'](_0x31694d[_0x4bc5bd(0x3cb)]);let _0x572efc=_0x31694d[_0x4bc5bd(0x2b4)];const _0x5e87f5=_0x31694d[_0x4bc5bd(0x360)];for(const _0xbc1251 of _0x3e818d){if(!_0xbc1251)continue;let _0x573388=_0xbc1251['battler']()[_0x4bc5bd(0x1ed)],_0x1414a9=_0xbc1251['battler']()['_baseY'];if(_0x572efc['match'](/home/i))_0x573388=_0xbc1251[_0x4bc5bd(0x4b2)]()['_homeX'],_0x1414a9=_0xbc1251[_0x4bc5bd(0x4b2)]()[_0x4bc5bd(0xc60)];else{if(_0x572efc[_0x4bc5bd(0x7a1)](/center/i))_0x573388=Graphics['boxWidth']/0x2,_0x1414a9=Graphics[_0x4bc5bd(0x4f3)]/0x2;else _0x572efc[_0x4bc5bd(0x7a1)](/point (\d+), (\d+)/i)&&(_0x573388=Number(RegExp['$1']),_0x1414a9=Number(RegExp['$2']));}_0xbc1251[_0x4bc5bd(0x9aa)](Math['round'](_0x573388),Math[_0x4bc5bd(0x93c)](_0x1414a9),!!_0x5e87f5);}}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0xbd4),_0x1d036a=>{const _0x1ee892=_0x1f5c57;if(!SceneManager[_0x1ee892(0x2ba)]())return;if(!$gameSystem[_0x1ee892(0x754)]())return;VisuMZ[_0x1ee892(0xa1c)](_0x1d036a,_0x1d036a);const _0x28250c=VisuMZ['CreateActionSequenceTargets'](_0x1d036a[_0x1ee892(0x287)]),_0x467fc9=VisuMZ[_0x1ee892(0x921)](_0x1d036a[_0x1ee892(0x345)]),_0x132293=_0x467fc9['map'](_0x45b919=>_0x45b919&&_0x45b919[_0x1ee892(0x4b2)]()?_0x45b919[_0x1ee892(0x4b2)]()['_baseX']:0x0)/(_0x467fc9[_0x1ee892(0x9fe)]||0x1),_0x3e4374=_0x467fc9['map'](_0x50a105=>_0x50a105&&_0x50a105[_0x1ee892(0x4b2)]()?_0x50a105[_0x1ee892(0x4b2)]()['_baseY']:0x0)/(_0x467fc9['length']||0x1),_0x590ffc=_0x1d036a[_0x1ee892(0x360)];for(const _0x52b684 of _0x28250c){if(!_0x52b684)continue;_0x52b684[_0x1ee892(0x9aa)](Math[_0x1ee892(0x93c)](_0x132293),Math['round'](_0x3e4374),!!_0x590ffc);}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Movement_Float',_0x510ca5=>{const _0x390b5d=_0x1f5c57;if(!SceneManager[_0x390b5d(0x2ba)]())return;VisuMZ['ConvertParams'](_0x510ca5,_0x510ca5);const _0x2e921b=$gameTemp[_0x390b5d(0x78b)](),_0x271893=VisuMZ[_0x390b5d(0x921)](_0x510ca5[_0x390b5d(0x3cb)]),_0x565d7f=_0x510ca5[_0x390b5d(0x676)],_0x5d0c1d=_0x510ca5[_0x390b5d(0xacb)],_0x524f73=_0x510ca5[_0x390b5d(0xa64)],_0x3d0439=_0x510ca5[_0x390b5d(0x959)];if(!_0x2e921b)return;for(const _0x35006b of _0x271893){if(!_0x35006b)continue;_0x35006b['floatBattler'](_0x565d7f,_0x5d0c1d,_0x524f73);}if(_0x3d0439)_0x2e921b[_0x390b5d(0x924)](_0x390b5d(0x78a));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x73b),_0x39cb17=>{const _0x468708=_0x1f5c57;if(!SceneManager[_0x468708(0x2ba)]())return;VisuMZ[_0x468708(0xa1c)](_0x39cb17,_0x39cb17);const _0x589ef7=$gameTemp[_0x468708(0x78b)]();if(!_0x589ef7)return;const _0x320528=VisuMZ[_0x468708(0x921)](_0x39cb17[_0x468708(0x3cb)]);for(const _0x5eeb58 of _0x320528){if(!_0x5eeb58)continue;_0x5eeb58[_0x468708(0xc5b)]();}BattleManager[_0x468708(0x33d)]&&BattleManager[_0x468708(0x33d)]['performActionEnd']();if(_0x39cb17[_0x468708(0x2ae)])_0x589ef7[_0x468708(0x924)](_0x468708(0x397));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x889),_0x1ce883=>{const _0x32f5a2=_0x1f5c57;if(!SceneManager[_0x32f5a2(0x2ba)]())return;VisuMZ['ConvertParams'](_0x1ce883,_0x1ce883);const _0x229707=$gameTemp[_0x32f5a2(0x78b)](),_0x2dd8b9=VisuMZ[_0x32f5a2(0x921)](_0x1ce883['Targets']),_0x3f5ea0=_0x1ce883['Height'],_0x56d311=_0x1ce883[_0x32f5a2(0xacb)],_0x5e4a17=_0x1ce883['WaitForJump'];if(!_0x229707)return;for(const _0x56d6e4 of _0x2dd8b9){if(!_0x56d6e4)continue;_0x56d6e4[_0x32f5a2(0x365)](_0x3f5ea0,_0x56d311);}if(_0x5e4a17)_0x229707[_0x32f5a2(0x924)]('battleJump');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xadd),_0x432798=>{const _0x1ba3dc=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x1ba3dc(0x754)]())return;VisuMZ[_0x1ba3dc(0xa1c)](_0x432798,_0x432798);const _0x4f73f7=$gameTemp[_0x1ba3dc(0x78b)](),_0x1fc081=VisuMZ[_0x1ba3dc(0x921)](_0x432798[_0x1ba3dc(0x3cb)]),_0x54a2d7=_0x432798[_0x1ba3dc(0xbcd)],_0x3fd6ac=_0x432798[_0x1ba3dc(0xaf0)],_0x46dce2=_0x432798[_0x1ba3dc(0x54b)],_0x473060=_0x432798['Duration'],_0x45e5e1=_0x432798['FaceDirection'],_0x48f300=_0x432798['EasingType'],_0x248601=_0x432798['MotionType'],_0x255821=_0x432798[_0x1ba3dc(0x2ae)];if(!_0x4f73f7)return;for(const _0x1ca7da of _0x1fc081){if(_0x1ba3dc(0x931)===_0x1ba3dc(0x80e))_0x16b3f8[_0x1ba3dc(0x6b3)][_0x1ba3dc(0x5f1)][_0x1ba3dc(0x5a5)](this);else{if(!_0x1ca7da)continue;let _0x36376a=_0x3fd6ac,_0x3062fa=_0x46dce2;if(_0x54a2d7[_0x1ba3dc(0x7a1)](/horz/i))_0x36376a*=_0x1ca7da[_0x1ba3dc(0xbcf)]()?-0x1:0x1;if(_0x54a2d7[_0x1ba3dc(0x7a1)](/vert/i))_0x3062fa*=_0x1ca7da[_0x1ba3dc(0xbcf)]()?-0x1:0x1;_0x1ca7da['moveBattlerDistance'](_0x36376a,_0x3062fa,_0x473060,_0x45e5e1,_0x48f300),_0x1ca7da['requestMotion'](_0x248601);}}if(_0x255821)_0x4f73f7[_0x1ba3dc(0x924)]('battleMove');}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],'ActSeq_Movement_MoveToPoint',_0x54a025=>{const _0x28ed1b=_0x1f5c57;if(!SceneManager[_0x28ed1b(0x2ba)]())return;if(!$gameSystem[_0x28ed1b(0x754)]())return;VisuMZ[_0x28ed1b(0xa1c)](_0x54a025,_0x54a025);const _0xba4cea=$gameTemp[_0x28ed1b(0x78b)](),_0x268496=VisuMZ[_0x28ed1b(0x921)](_0x54a025[_0x28ed1b(0x3cb)]),_0xe97b33=_0x54a025['Destination'],_0x237654=_0x54a025[_0x28ed1b(0xc3b)],_0x186964=_0x54a025[_0x28ed1b(0x590)],_0x4b8a06=_0x54a025[_0x28ed1b(0x2a8)],_0x1279ec=_0x54a025[_0x28ed1b(0xacb)],_0x34f7ba=_0x54a025[_0x28ed1b(0x5a0)],_0x10ba4a=_0x54a025[_0x28ed1b(0xa64)],_0x275672=_0x54a025[_0x28ed1b(0xc93)],_0x4ed99a=_0x54a025[_0x28ed1b(0x2ae)];if(!_0xba4cea)return;for(const _0x11a7b1 of _0x268496){if(!_0x11a7b1)continue;let _0x1004a8=_0x11a7b1[_0x28ed1b(0x4b2)]()[_0x28ed1b(0x1ed)],_0x517db7=_0x11a7b1[_0x28ed1b(0x4b2)]()[_0x28ed1b(0x8b7)];if(_0xe97b33['match'](/home/i)){if(_0x28ed1b(0xbf3)!=='pgUoZ'){if(!_0x321d35[_0x28ed1b(0x8af)]())return![];if(!_0x609972['isForAll']())return![];if(!_0x4528f1[_0x28ed1b(0x38f)]())return![];return _0x43fab3[_0x28ed1b(0x6b3)][_0x28ed1b(0xbba)][_0x28ed1b(0xbaa)][_0x28ed1b(0xbab)];}else _0x1004a8=_0x11a7b1['battler']()['_homeX'],_0x517db7=_0x11a7b1['battler']()[_0x28ed1b(0xc60)];}else{if(_0xe97b33[_0x28ed1b(0x7a1)](/center/i)){if('jhLLj'!==_0x28ed1b(0x52d)){const _0x31aab9=this[_0x28ed1b(0x21e)](),_0x51e37d=_0x31aab9[0x0]?_0x31aab9[0x0][_0x28ed1b(0x5fd)]:0x0,_0x2f4e65=_0x4c6104['attackMotions'][_0x51e37d];_0x2f4e65&&this[_0x28ed1b(0x561)](_0x2f4e65[_0x28ed1b(0x6da)]);}else _0x1004a8=Graphics[_0x28ed1b(0xb4d)]/0x2,_0x517db7=Graphics[_0x28ed1b(0x4f3)]/0x2;}else _0xe97b33[_0x28ed1b(0x7a1)](/point (\d+), (\d+)/i)&&(_0x1004a8=Number(RegExp['$1']),_0x517db7=Number(RegExp['$2']));}if(_0x237654[_0x28ed1b(0x7a1)](/none/i))_0x28ed1b(0xaf8)!==_0x28ed1b(0xaf8)?(_0xda5fa5['BattleCore'][_0x28ed1b(0x8b0)][_0x28ed1b(0x5a5)](this),this[_0x28ed1b(0x853)]()===_0x28ed1b(0x69e)&&this[_0x28ed1b(0x7da)]()):(_0x1004a8+=_0x186964,_0x517db7+=_0x4b8a06);else{if(_0x237654[_0x28ed1b(0x7a1)](/horz/i)&&_0x237654[_0x28ed1b(0x7a1)](/vert/i))_0x1004a8+=_0x11a7b1['isActor']()?-_0x186964:_0x186964,_0x517db7+=_0x11a7b1[_0x28ed1b(0xbcf)]()?-_0x4b8a06:_0x4b8a06;else{if(_0x237654[_0x28ed1b(0x7a1)](/horz/i))_0x1004a8+=_0x11a7b1[_0x28ed1b(0xbcf)]()?-_0x186964:_0x186964,_0x517db7+=_0x4b8a06;else _0x237654[_0x28ed1b(0x7a1)](/vert/i)&&(_0x1004a8+=_0x186964,_0x517db7+=_0x11a7b1[_0x28ed1b(0xbcf)]()?-_0x4b8a06:_0x4b8a06);}}_0x11a7b1[_0x28ed1b(0x464)](_0x1004a8,_0x517db7,_0x1279ec,_0x34f7ba,_0x10ba4a,-0x1),_0x11a7b1[_0x28ed1b(0x559)](_0x275672);}if(_0x4ed99a)_0xba4cea['setWaitMode'](_0x28ed1b(0x397));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Movement_MoveToTarget',_0xfb8908=>{const _0x455083=_0x1f5c57;if(!SceneManager[_0x455083(0x2ba)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x455083(0xa1c)](_0xfb8908,_0xfb8908);const _0x57c4e6=$gameTemp[_0x455083(0x78b)](),_0x48693c=VisuMZ['CreateActionSequenceTargets'](_0xfb8908[_0x455083(0x287)]),_0xcfd36f=VisuMZ[_0x455083(0x921)](_0xfb8908['Targets2']),_0x29c64e=_0xfb8908['TargetLocation'];let _0x5e5fee=_0xfb8908['MeleeDistance'];const _0x376b1b=_0xfb8908[_0x455083(0xc3b)],_0x1dcc67=_0xfb8908[_0x455083(0x590)],_0x2bfcdf=_0xfb8908[_0x455083(0x2a8)],_0x1c4202=_0xfb8908[_0x455083(0xacb)],_0x52f3ac=_0xfb8908[_0x455083(0x5a0)],_0x587653=_0xfb8908[_0x455083(0xa64)],_0x23d370=_0xfb8908[_0x455083(0xc93)],_0x3522d3=_0xfb8908[_0x455083(0x2ae)],_0x5884be=Math[_0x455083(0xaea)](..._0xcfd36f['map'](_0x362902=>_0x362902[_0x455083(0x4b2)]()[_0x455083(0x1ed)]-_0x362902[_0x455083(0x4b2)]()[_0x455083(0x8c7)]()/0x2)),_0x1730d2=Math[_0x455083(0x795)](..._0xcfd36f[_0x455083(0x6f1)](_0x2de95a=>_0x2de95a[_0x455083(0x4b2)]()[_0x455083(0x1ed)]+_0x2de95a[_0x455083(0x4b2)]()[_0x455083(0x8c7)]()/0x2)),_0x2ffe0a=Math[_0x455083(0xaea)](..._0xcfd36f['map'](_0x344780=>_0x344780[_0x455083(0x4b2)]()[_0x455083(0x8b7)]-_0x344780[_0x455083(0x4b2)]()['mainSpriteHeight']())),_0x2b82fb=Math['max'](..._0xcfd36f['map'](_0x995354=>_0x995354[_0x455083(0x4b2)]()['_baseY'])),_0x515880=_0xcfd36f[_0x455083(0x6ae)](_0x129a4c=>_0x129a4c['isActor']())[_0x455083(0x9fe)],_0x53c255=_0xcfd36f['filter'](_0x31dad2=>_0x31dad2['isEnemy']())[_0x455083(0x9fe)];let _0x14f599=0x0,_0x2895e1=0x0;if(_0x29c64e[_0x455083(0x7a1)](/front/i)){if(_0x455083(0x342)!=='WPoaV')_0x14f599=_0x515880>=_0x53c255?_0x5884be:_0x1730d2;else return!![];}else{if(_0x29c64e[_0x455083(0x7a1)](/middle/i))_0x14f599=(_0x5884be+_0x1730d2)/0x2,_0x5e5fee=-0x1;else{if(_0x29c64e[_0x455083(0x7a1)](/back/i)){if(_0x455083(0x62f)!==_0x455083(0x62f)){let _0x34dd6a=_0x455083(0x720);if(this[_0x455083(0x7ef)](_0x34dd6a))return this[_0x455083(0xa99)][_0x34dd6a];return this[_0x455083(0xa99)][_0x34dd6a]=this['createBattleUIOffsetX'](this[_0x455083(0xc2a)]()),this[_0x455083(0xa99)][_0x34dd6a];}else _0x14f599=_0x515880>=_0x53c255?_0x1730d2:_0x5884be;}}}if(_0x29c64e[_0x455083(0x7a1)](/head/i))_0x2895e1=_0x2ffe0a;else{if(_0x29c64e[_0x455083(0x7a1)](/center/i)){if(_0x455083(0x957)===_0x455083(0x957))_0x2895e1=(_0x2ffe0a+_0x2b82fb)/0x2;else{if(!_0x36a8ec[_0x455083(0x6b3)][_0x455083(0xbba)][_0x455083(0x3b3)][_0x455083(0x39e)])return;const _0x509466=_0x59853d[_0x455083(0x2c2)],_0xa0fada=_0x455083(0x2c2);this['addCommand'](_0x509466,_0xa0fada);}}else _0x29c64e['match'](/base/i)&&(_0x2895e1=_0x2b82fb);}if(!_0x57c4e6)return;for(const _0x37b380 of _0x48693c){if(!_0x37b380)continue;let _0x5cc256=_0x14f599,_0x2c1a90=_0x2895e1;if(_0x376b1b['match'](/none/i))_0x5cc256+=_0x1dcc67,_0x2c1a90+=_0x2bfcdf;else{if(_0x376b1b[_0x455083(0x7a1)](/horz/i)&&_0x376b1b[_0x455083(0x7a1)](/vert/i))_0x5cc256+=_0x37b380['isActor']()?-_0x1dcc67:_0x1dcc67,_0x2c1a90+=_0x37b380[_0x455083(0xbcf)]()?-_0x2bfcdf:_0x2bfcdf;else{if(_0x376b1b[_0x455083(0x7a1)](/horz/i)){if(_0x455083(0x3ec)!==_0x455083(0x3ec)){_0x190d56[_0x455083(0x605)][_0x455083(0x3f4)]['call'](this);if(this['_commandNameWindow'])this[_0x455083(0xc3f)]();}else _0x5cc256+=_0x37b380[_0x455083(0xbcf)]()?-_0x1dcc67:_0x1dcc67,_0x2c1a90+=_0x2bfcdf;}else{if(_0x376b1b[_0x455083(0x7a1)](/vert/i)){if('BrQYt'===_0x455083(0xac7))_0x5cc256+=_0x1dcc67,_0x2c1a90+=_0x37b380['isActor']()?-_0x2bfcdf:_0x2bfcdf;else{const _0x4d9060=_0x23f249(_0x201869['$1']);return[_0x3bba14[_0x455083(0xa45)]()[_0x455083(0x907)]()[_0x4d9060]];}}}}}_0x37b380['moveBattlerToPoint'](_0x5cc256,_0x2c1a90,_0x1c4202,_0x52f3ac,_0x587653,_0x5e5fee),_0x37b380[_0x455083(0x559)](_0x23d370);}if(_0x3522d3)_0x57c4e6[_0x455083(0x924)]('battleMove');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Movement_Opacity',_0x550475=>{const _0x4b9195=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4b9195(0xa1c)](_0x550475,_0x550475);const _0x1da60f=$gameTemp[_0x4b9195(0x78b)](),_0x35831a=VisuMZ[_0x4b9195(0x921)](_0x550475[_0x4b9195(0x3cb)]),_0x4e77e0=_0x550475['Opacity'],_0x20f888=_0x550475[_0x4b9195(0xacb)],_0x2f215e=_0x550475['EasingType'],_0x362a2c=_0x550475[_0x4b9195(0x553)];if(!_0x1da60f)return;for(const _0x3d2a29 of _0x35831a){if(!_0x3d2a29)continue;_0x3d2a29[_0x4b9195(0x4b5)](_0x4e77e0,_0x20f888,_0x2f215e);}if(_0x362a2c)_0x1da60f['setWaitMode'](_0x4b9195(0x54a));}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xb88),_0x5404e1=>{const _0x80b546=_0x1f5c57;if(!SceneManager[_0x80b546(0x2ba)]())return;VisuMZ[_0x80b546(0xa1c)](_0x5404e1,_0x5404e1);const _0x4b7ef9=$gameTemp[_0x80b546(0x78b)](),_0x412199=VisuMZ[_0x80b546(0x921)](_0x5404e1[_0x80b546(0x3cb)]),_0x381486=_0x5404e1[_0x80b546(0x75f)],_0x37952b=_0x5404e1[_0x80b546(0x9f2)],_0x517fe1=_0x5404e1[_0x80b546(0xacb)],_0x3cfe79=_0x5404e1[_0x80b546(0xa64)],_0x158a62=_0x5404e1[_0x80b546(0x4d1)];if(!_0x4b7ef9)return;for(const _0x833a9d of _0x412199){if(!_0x833a9d)continue;_0x833a9d[_0x80b546(0x64f)](_0x381486,_0x37952b,_0x517fe1,_0x3cfe79);}if(_0x158a62)_0x4b7ef9[_0x80b546(0x924)](_0x80b546(0x547));}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x9c5),_0x2fd00c=>{const _0x317f72=_0x1f5c57;if(!SceneManager[_0x317f72(0x2ba)]())return;VisuMZ[_0x317f72(0xa1c)](_0x2fd00c,_0x2fd00c);const _0x19ecee=$gameTemp[_0x317f72(0x78b)](),_0x508782=VisuMZ[_0x317f72(0x921)](_0x2fd00c[_0x317f72(0x3cb)]),_0x19f37f=_0x2fd00c[_0x317f72(0x8ba)],_0x355e01=_0x2fd00c[_0x317f72(0x22b)],_0x817ff9=_0x2fd00c['Duration'],_0x1cef26=_0x2fd00c['EasingType'],_0x864bed=_0x2fd00c['WaitForSkew'];if(!_0x19ecee)return;for(const _0x56e30e of _0x508782){if('uhAuV'===_0x317f72(0x9c0))this[_0x317f72(0x2c9)](_0x2d4195,_0x35a106['x'],_0x114302['y'],_0x1c926d);else{if(!_0x56e30e)continue;_0x56e30e['skewBattler'](_0x19f37f,_0x355e01,_0x817ff9,_0x1cef26);}}if(_0x864bed)_0x19ecee[_0x317f72(0x924)](_0x317f72(0x4d4));}),PluginManager['registerCommand'](pluginData['name'],_0x1f5c57(0x71c),_0x514019=>{const _0xf6057f=_0x1f5c57;if(!SceneManager[_0xf6057f(0x2ba)]())return;VisuMZ[_0xf6057f(0xa1c)](_0x514019,_0x514019);const _0x12bed5=$gameTemp[_0xf6057f(0x78b)](),_0x63875b=VisuMZ[_0xf6057f(0x921)](_0x514019['Targets']),_0x5643cc=_0x514019[_0xf6057f(0x503)],_0x4de708=_0x514019[_0xf6057f(0xacb)],_0x14eb19=_0x514019[_0xf6057f(0xa64)],_0x5d3f95=_0x514019[_0xf6057f(0x92b)],_0x315112=_0x514019['WaitForSpin'];if(!_0x12bed5)return;for(const _0x471b33 of _0x63875b){if(_0xf6057f(0xaed)==='lMmex'){if(!_0x471b33)continue;_0x471b33[_0xf6057f(0xc31)](_0x5643cc,_0x4de708,_0x14eb19,_0x5d3f95);}else return _0x180834;}if(_0x315112)_0x12bed5[_0xf6057f(0x924)]('battleSpin');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Movement_WaitForFloat',_0x5663b8=>{const _0x414165=_0x1f5c57;if(!SceneManager[_0x414165(0x2ba)]())return;const _0x358dd4=$gameTemp[_0x414165(0x78b)]();if(!_0x358dd4)return;_0x358dd4[_0x414165(0x924)](_0x414165(0x78a));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x51d),_0x38c0ed=>{const _0x288c08=_0x1f5c57;if(!SceneManager[_0x288c08(0x2ba)]())return;const _0x4e7699=$gameTemp[_0x288c08(0x78b)]();if(!_0x4e7699)return;_0x4e7699[_0x288c08(0x924)](_0x288c08(0x9ab));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0xbd2),_0x4eab70=>{const _0x1679a=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;const _0x2dd9fa=$gameTemp[_0x1679a(0x78b)]();if(!_0x2dd9fa)return;_0x2dd9fa[_0x1679a(0x924)]('battleMove');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x1e5),_0x5ac37f=>{const _0x3215b6=_0x1f5c57;if(!SceneManager[_0x3215b6(0x2ba)]())return;const _0xdecdb9=$gameTemp[_0x3215b6(0x78b)]();if(!_0xdecdb9)return;_0xdecdb9['setWaitMode'](_0x3215b6(0x54a));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],'ActSeq_Movement_WaitForScale',_0x2359a0=>{if(!SceneManager['isSceneBattle']())return;const _0x3db600=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3db600)return;_0x3db600['setWaitMode']('battleGrow');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Movement_WaitForSkew',_0x2a3f80=>{const _0x1fea59=_0x1f5c57;if(!SceneManager[_0x1fea59(0x2ba)]())return;const _0x58ba5a=$gameTemp[_0x1fea59(0x78b)]();if(!_0x58ba5a)return;_0x58ba5a[_0x1fea59(0x924)]('battleSpriteSkew');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Movement_WaitForSpin',_0x5881fe=>{const _0x24dc3f=_0x1f5c57;if(!SceneManager[_0x24dc3f(0x2ba)]())return;const _0x492319=$gameTemp[_0x24dc3f(0x78b)]();if(!_0x492319)return;_0x492319[_0x24dc3f(0x924)](_0x24dc3f(0x681));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],'ActSeq_Projectile_Animation',_0x3de4dc=>{const _0x1ee596=_0x1f5c57;if(!SceneManager[_0x1ee596(0x2ba)]())return;if(!Imported[_0x1ee596(0x350)])return;VisuMZ['ConvertParams'](_0x3de4dc,_0x3de4dc);const _0x4c0727=$gameTemp[_0x1ee596(0x78b)](),_0xf1421=_0x3de4dc[_0x1ee596(0x7c6)];if(!_0x4c0727)return;const _0x14404d=BattleManager[_0x1ee596(0x4d6)];if(!_0x14404d)return;_0x14404d['createActionSequenceProjectile'](_0x3de4dc);if(_0xf1421)_0x4c0727[_0x1ee596(0x924)](_0x1ee596(0xa26));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x311),_0x5848e4=>{const _0x417d9a=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x417d9a(0xa1c)](_0x5848e4,_0x5848e4);const _0x1afbce=$gameTemp['getLastPluginCommandInterpreter'](),_0x1a7f5e=_0x5848e4[_0x417d9a(0x7c6)];if(!_0x1afbce)return;const _0x2ab826=BattleManager[_0x417d9a(0x4d6)];if(!_0x2ab826)return;_0x2ab826[_0x417d9a(0x28d)](_0x5848e4);if(_0x1a7f5e)_0x1afbce[_0x417d9a(0x924)]('battleProjectiles');}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x7a5),_0x410368=>{const _0x1ebad3=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1ebad3(0x350)])return;VisuMZ['ConvertParams'](_0x410368,_0x410368);const _0x28f3d9=$gameTemp['getLastPluginCommandInterpreter'](),_0x36e640=_0x410368[_0x1ebad3(0x7c6)];if(!_0x28f3d9)return;const _0x497c21=BattleManager[_0x1ebad3(0x4d6)];if(!_0x497c21)return;_0x497c21[_0x1ebad3(0x28d)](_0x410368);if(_0x36e640)_0x28f3d9[_0x1ebad3(0x924)](_0x1ebad3(0xa26));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x4e2),_0x46b0ec=>{const _0x5508ae=_0x1f5c57;if(!SceneManager[_0x5508ae(0x2ba)]())return;if(!Imported[_0x5508ae(0x908)])return;VisuMZ[_0x5508ae(0xa1c)](_0x46b0ec,_0x46b0ec);const _0x1e210b=$gameTemp[_0x5508ae(0x78b)](),_0x1b227b=_0x46b0ec[_0x5508ae(0x285)];if(!_0x1e210b)return;$gameScreen[_0x5508ae(0xbed)](_0x46b0ec[_0x5508ae(0x8ba)],_0x46b0ec['SkewY'],_0x46b0ec[_0x5508ae(0xacb)],_0x46b0ec[_0x5508ae(0xa64)]);if(_0x1b227b)_0x1e210b[_0x5508ae(0x924)]('battleSkew');}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xbcb),_0x46cb74=>{const _0x59750c=_0x1f5c57;if(!SceneManager[_0x59750c(0x2ba)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x59750c(0xa1c)](_0x46cb74,_0x46cb74);const _0x20b808=$gameTemp[_0x59750c(0x78b)](),_0x54d852=_0x46cb74[_0x59750c(0x285)];if(!_0x20b808)return;$gameScreen[_0x59750c(0xbed)](0x0,0x0,_0x46cb74[_0x59750c(0xacb)],_0x46cb74[_0x59750c(0xa64)]);if(_0x54d852)_0x20b808['setWaitMode'](_0x59750c(0x265));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xac3),_0x1423f7=>{const _0x30c58d=_0x1f5c57;if(!SceneManager[_0x30c58d(0x2ba)]())return;if(!Imported[_0x30c58d(0x908)])return;const _0x1fe34c=$gameTemp[_0x30c58d(0x78b)]();if(!_0x1fe34c)return;_0x1fe34c[_0x30c58d(0x924)](_0x30c58d(0x265));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x240),_0x250d02=>{const _0x4fdedf=_0x1f5c57;if(!SceneManager[_0x4fdedf(0x2ba)]())return;VisuMZ[_0x4fdedf(0xa1c)](_0x250d02,_0x250d02);const _0x9f8eed=$gameTemp[_0x4fdedf(0x78b)](),_0x4a1988=_0x250d02[_0x4fdedf(0x3e5)],_0x150f0e=_0x250d02[_0x4fdedf(0x354)];if(!_0x9f8eed)return;BattleManager['_targetIndex']=_0x4a1988,BattleManager[_0x4fdedf(0x55e)]=BattleManager['_allTargets']?BattleManager[_0x4fdedf(0x7d3)][BattleManager['_targetIndex']]||null:null,BattleManager[_0x4fdedf(0x55e)]&&_0x150f0e[_0x4fdedf(0x8b5)]()[_0x4fdedf(0xc8b)]()!==_0x4fdedf(0xadb)&&_0x9f8eed['command119']([_0x150f0e]);}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x5aa),_0x5d3dc1=>{const _0x13bb4b=_0x1f5c57;if(!SceneManager[_0x13bb4b(0x2ba)]())return;VisuMZ[_0x13bb4b(0xa1c)](_0x5d3dc1,_0x5d3dc1);const _0x228f87=$gameTemp['getLastPluginCommandInterpreter'](),_0xaaf31b=_0x5d3dc1[_0x13bb4b(0x354)];if(!_0x228f87)return;BattleManager[_0x13bb4b(0x443)]++,BattleManager[_0x13bb4b(0x55e)]=BattleManager[_0x13bb4b(0x7d3)][BattleManager[_0x13bb4b(0x443)]]||null,BattleManager[_0x13bb4b(0x55e)]&&_0xaaf31b['toUpperCase']()[_0x13bb4b(0xc8b)]()!==_0x13bb4b(0xadb)&&_0x228f87[_0x13bb4b(0x203)]([_0xaaf31b]);}),PluginManager['registerCommand'](pluginData[_0x1f5c57(0x310)],'ActSeq_Target_PrevTarget',_0x504ed3=>{const _0x5625e7=_0x1f5c57;if(!SceneManager[_0x5625e7(0x2ba)]())return;VisuMZ[_0x5625e7(0xa1c)](_0x504ed3,_0x504ed3);const _0x1a0adc=$gameTemp[_0x5625e7(0x78b)](),_0x126147=_0x504ed3[_0x5625e7(0x354)];if(!_0x1a0adc)return;BattleManager[_0x5625e7(0x443)]--,BattleManager[_0x5625e7(0x55e)]=BattleManager[_0x5625e7(0x7d3)][BattleManager['_targetIndex']]||null,BattleManager['_target']&&_0x126147[_0x5625e7(0x8b5)]()[_0x5625e7(0xc8b)]()!==_0x5625e7(0xadb)&&(_0x5625e7(0xbb2)===_0x5625e7(0xbb2)?_0x1a0adc[_0x5625e7(0x203)]([_0x126147]):_0x178ac5[_0x5625e7(0x831)][_0x5625e7(0x1ee)]['addDamageSprite'](_0x9ce47f,this[_0x5625e7(0xc49)]));}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xc65),_0xa54e0e=>{const _0x544807=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x544807(0xa1c)](_0xa54e0e,_0xa54e0e);const _0x3a14e4=$gameTemp[_0x544807(0x78b)](),_0xde2dcf=_0xa54e0e[_0x544807(0x862)],_0x2c716d=_0xa54e0e[_0x544807(0x354)];if(!_0x3a14e4)return;const _0x3ac826=BattleManager[_0x544807(0x443)];for(;;){BattleManager['_targetIndex']=Math['randomInt'](BattleManager[_0x544807(0x7d3)][_0x544807(0x9fe)]);if(!_0xde2dcf)break;if(BattleManager[_0x544807(0x443)]!==_0x3ac826)break;if(BattleManager[_0x544807(0x7d3)]['length']<=0x1){BattleManager[_0x544807(0x443)]=0x0;break;}}BattleManager[_0x544807(0x55e)]=BattleManager[_0x544807(0x7d3)][BattleManager[_0x544807(0x443)]]||null,BattleManager[_0x544807(0x55e)]&&_0x2c716d['toUpperCase']()['trim']()!=='UNTITLED'&&_0x3a14e4[_0x544807(0x203)]([_0x2c716d]);}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0x540),_0x1c6b50=>{const _0x141d3d=_0x1f5c57;if(!SceneManager[_0x141d3d(0x2ba)]())return;VisuMZ[_0x141d3d(0xa1c)](_0x1c6b50,_0x1c6b50);const _0x855f82=VisuMZ[_0x141d3d(0x921)](_0x1c6b50[_0x141d3d(0x3cb)]);for(const _0x31ae53 of _0x855f82){if(!_0x31ae53)continue;if(!_0x31ae53[_0x141d3d(0xbcf)]())continue;_0x31ae53[_0x141d3d(0xb81)]();}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xa84),_0x596c4e=>{const _0x49c6a5=_0x1f5c57;if(!SceneManager[_0x49c6a5(0x2ba)]())return;VisuMZ[_0x49c6a5(0xa1c)](_0x596c4e,_0x596c4e);const _0x7d2a7e=$gameTemp[_0x49c6a5(0x78b)]();let _0x2a7ede=![];const _0x54b416=_0x596c4e[_0x49c6a5(0x354)],_0x3cbc1c=VisuMZ[_0x49c6a5(0x921)](_0x596c4e[_0x49c6a5(0x3cb)]);for(const _0x2d25d9 of _0x3cbc1c){if(_0x49c6a5(0x8d0)===_0x49c6a5(0x8d0)){if(!_0x2d25d9)continue;if(!_0x2d25d9[_0x49c6a5(0xbcf)]())continue;_0x2d25d9[_0x49c6a5(0x507)](),_0x2d25d9['weapons']()[_0x49c6a5(0x9fe)]>0x0?_0x2a7ede=!![]:_0x2d25d9[_0x49c6a5(0xb81)]();}else(_0x297e2c['battleback1Name']||_0x54a685[_0x49c6a5(0x99a)])&&_0x42d478['snapForBackground']();}_0x2a7ede&&_0x54b416[_0x49c6a5(0x8b5)]()[_0x49c6a5(0xc8b)]()!==_0x49c6a5(0xadb)&&_0x7d2a7e['command119']([_0x54b416]);}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x68a),_0x19e820=>{const _0x259d85=_0x1f5c57;if(!SceneManager[_0x259d85(0x2ba)]())return;VisuMZ[_0x259d85(0xa1c)](_0x19e820,_0x19e820);let _0x374395=_0x19e820['SlotID'];_0x374395--,_0x374395=Math[_0x259d85(0x795)](_0x374395,0x0);const _0x140a01=VisuMZ['CreateActionSequenceTargets'](_0x19e820[_0x259d85(0x3cb)]);for(const _0x5411ab of _0x140a01){if('CmTCB'===_0x259d85(0x505))_0x91600d[_0x259d85(0x6b3)]['Window_BattleLog_performMiss']['call'](this,_0x251bf9),this['callNextMethod']();else{if(!_0x5411ab)continue;if(!_0x5411ab[_0x259d85(0xbcf)]())continue;_0x5411ab[_0x259d85(0x5da)](_0x374395);}}}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xc72),_0x41f537=>{const _0x5d9da8=_0x1f5c57;if(!SceneManager[_0x5d9da8(0x2ba)]())return;if(!Imported[_0x5d9da8(0x908)])return;VisuMZ[_0x5d9da8(0xa1c)](_0x41f537,_0x41f537);const _0x5f0cd3=$gameTemp[_0x5d9da8(0x78b)](),_0x536adb=_0x41f537[_0x5d9da8(0x920)];if(!_0x5f0cd3)return;$gameScreen[_0x5d9da8(0x555)](_0x41f537['Scale'],_0x41f537[_0x5d9da8(0xacb)],_0x41f537[_0x5d9da8(0xa64)]);if(_0x536adb)_0x5f0cd3['setWaitMode']('battleZoom');}),PluginManager[_0x1f5c57(0x4ab)](pluginData[_0x1f5c57(0x310)],_0x1f5c57(0xaef),_0x1287bf=>{const _0x4b15ba=_0x1f5c57;if(!SceneManager[_0x4b15ba(0x2ba)]())return;if(!Imported[_0x4b15ba(0x908)])return;VisuMZ['ConvertParams'](_0x1287bf,_0x1287bf);const _0x1f89c6=$gameTemp[_0x4b15ba(0x78b)](),_0x2a2080=_0x1287bf[_0x4b15ba(0x920)];if(!_0x1f89c6)return;$gameScreen[_0x4b15ba(0x555)](0x1,_0x1287bf[_0x4b15ba(0xacb)],_0x1287bf[_0x4b15ba(0xa64)]);if(_0x2a2080)_0x1f89c6[_0x4b15ba(0x924)](_0x4b15ba(0x981));}),PluginManager[_0x1f5c57(0x4ab)](pluginData['name'],_0x1f5c57(0x6d2),_0x53639c=>{const _0x12c8e2=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x12c8e2(0x908)])return;const _0x23ddd8=$gameTemp[_0x12c8e2(0x78b)]();if(!_0x23ddd8)return;_0x23ddd8['setWaitMode'](_0x12c8e2(0x981));}),VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x929)]=Scene_Boot[_0x1f5c57(0x605)][_0x1f5c57(0x25a)],Scene_Boot['prototype'][_0x1f5c57(0x25a)]=function(){const _0x48eac5=_0x1f5c57;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x48eac5(0xc01)](),this[_0x48eac5(0xab6)](),this[_0x48eac5(0x7e9)](),VisuMZ['BattleCore'][_0x48eac5(0x929)][_0x48eac5(0x5a5)](this),this[_0x48eac5(0xa43)](),this[_0x48eac5(0x674)](),this[_0x48eac5(0xb78)](),this[_0x48eac5(0x9d5)]();},Scene_Boot[_0x1f5c57(0x605)][_0x1f5c57(0xa43)]=function(){const _0x1be9c2=_0x1f5c57;if(VisuMZ[_0x1be9c2(0x737)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this[_0x1be9c2(0x3b8)](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot[_0x1f5c57(0x605)][_0x1f5c57(0x5d4)]=function(){const _0x4a2333=_0x1f5c57,_0x4b7ac6=$dataSystem[_0x4a2333(0x6a0)][_0x4a2333(0x9fe)];for(let _0x563038=0x0;_0x563038<_0x4b7ac6;_0x563038++){const _0x27f3cd=$dataSystem[_0x4a2333(0xbc4)][_0x563038];if(_0x27f3cd)continue;$dataSystem[_0x4a2333(0xbc4)][_0x563038]=JsonEx['makeDeepCopy']($dataSystem[_0x4a2333(0xbc4)][0x0]);}},Scene_Boot[_0x1f5c57(0x605)][_0x1f5c57(0xc01)]=function(){const _0x1cf118=_0x1f5c57,_0x1f723b=VisuMZ[_0x1cf118(0x6b3)][_0x1cf118(0xbba)];_0x1f723b[_0x1cf118(0x941)][_0x1cf118(0xa6b)]===undefined&&(_0x1f723b[_0x1cf118(0x941)]['PopupPosition']=_0x1cf118(0x58f)),_0x1f723b[_0x1cf118(0x1df)]['SmoothImage']===undefined&&(_0x1f723b[_0x1cf118(0x1df)][_0x1cf118(0xa3e)]=![]),_0x1f723b[_0x1cf118(0xa0b)][_0x1cf118(0xa3e)]===undefined&&(_0x1cf118(0x8d9)===_0x1cf118(0xb7e)?(_0x22780b[_0x1cf118(0x6b3)][_0x1cf118(0x219)][_0x1cf118(0x5a5)](this),this[_0x1cf118(0xa78)]()):_0x1f723b[_0x1cf118(0xa0b)][_0x1cf118(0xa3e)]=!![]),_0x1f723b[_0x1cf118(0x1df)]['PrioritySortActive']===undefined&&(_0x1cf118(0x80f)!==_0x1cf118(0xa17)?_0x1f723b[_0x1cf118(0x1df)][_0x1cf118(0xb11)]=![]:(_0x40e875[_0x1cf118(0x605)][_0x1cf118(0x7bb)]['call'](this),this[_0x1cf118(0x68d)]())),_0x1f723b[_0x1cf118(0x1df)]['PrioritySortActors']===undefined&&('GxsGf'!==_0x1cf118(0x9b7)?!this[_0x1cf118(0x4ad)]()&&!this['_logWindow'][_0x1cf118(0xb62)]()&&(this[_0x1cf118(0x51c)]='action'):_0x1f723b[_0x1cf118(0x1df)][_0x1cf118(0x585)]=!![]);},VisuMZ[_0x1f5c57(0x2e2)]={},Scene_Boot[_0x1f5c57(0x605)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x97b784=_0x1f5c57;for(const _0x319bd1 of VisuMZ[_0x97b784(0x6b3)][_0x97b784(0xbba)][_0x97b784(0x941)][_0x97b784(0x4ae)]){if(_0x97b784(0x348)!==_0x97b784(0x2a0)){if(!_0x319bd1)continue;const _0x47a4ad=_0x319bd1[_0x97b784(0x339)][_0x97b784(0x8b5)]()[_0x97b784(0xc8b)]();VisuMZ[_0x97b784(0x2e2)][_0x47a4ad]=_0x319bd1;}else this[_0x97b784(0x63b)]();}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x72d)]={},Scene_Boot['prototype'][_0x1f5c57(0x7e9)]=function(){const _0x2f5bd3=_0x1f5c57,_0x1cb97e=VisuMZ['BattleCore']['RegExp'],_0x3d3555=_0x2f5bd3(0xb3b),_0x4b543e=[[_0x2f5bd3(0x531),_0x2f5bd3(0x911)],['Post',_0x2f5bd3(0xb50)]],_0x5efd3c=[[_0x2f5bd3(0xa91),_0x2f5bd3(0x6d0)],[_0x2f5bd3(0x25b),_0x2f5bd3(0x27c)]],_0x194f78=[['',''],[_0x2f5bd3(0x73d),_0x2f5bd3(0x5ef)],['AsTarget',_0x2f5bd3(0x718)]];for(const _0x21d242 of _0x5efd3c){if(_0x2f5bd3(0x51b)!=='wjtEq')for(const _0x50acb9 of _0x194f78){if(_0x2f5bd3(0x2ec)!=='KEYUi')for(const _0x398f2b of _0x4b543e){if('rewDv'!==_0x2f5bd3(0x857)){const _0x100d04=_0x21d242[0x0][_0x2f5bd3(0x98c)](_0x398f2b[0x0],_0x50acb9[0x0]),_0xdb292=_0x21d242[0x1][_0x2f5bd3(0x98c)](_0x398f2b[0x1],_0x50acb9[0x1])[_0x2f5bd3(0xc8b)](),_0x4d1c1b=new RegExp(_0x3d3555[_0x2f5bd3(0x98c)](_0xdb292),'i');_0x1cb97e[_0x100d04]=_0x4d1c1b;}else _0x4ca426[_0x2f5bd3(0x4da)]=[];}else _0x12fea7[_0x2f5bd3(0x6b3)]['Spriteset_Battle_createLowerLayer']['call'](this),this[_0x2f5bd3(0x6f0)](),this[_0x2f5bd3(0x90c)]();}else return!this[_0x2f5bd3(0x9d8)]()&&!this['isTickBased']();}const _0x419048=[['%1StartActionJS',_0x2f5bd3(0xc69)],['%1EndActionJS','JS\x20%1END\x20ACTION']];for(const _0x2ac2dd of _0x419048){for(const _0x14a1c5 of _0x4b543e){const _0x1ac4d4=_0x2ac2dd[0x0]['format'](_0x14a1c5[0x0]),_0x2fc557=_0x2ac2dd[0x1][_0x2f5bd3(0x98c)](_0x14a1c5[0x1]),_0x467477=new RegExp(_0x3d3555['format'](_0x2fc557),'i');_0x1cb97e[_0x1ac4d4]=_0x467477;}}const _0x84ce9a=[[_0x2f5bd3(0x5e7),_0x2f5bd3(0x43a)],['%1EndBattleJS',_0x2f5bd3(0x639)],[_0x2f5bd3(0x30f),_0x2f5bd3(0x4fa)],[_0x2f5bd3(0xa1f),_0x2f5bd3(0xa31)],['EscapeSuccessJS',_0x2f5bd3(0x524)],[_0x2f5bd3(0x34d),_0x2f5bd3(0xa1a)],[_0x2f5bd3(0x952),_0x2f5bd3(0x679)],[_0x2f5bd3(0x867),_0x2f5bd3(0x753)],['%1RegenerateJS','JS\x20%1REGENERATE']];for(const _0x7760e1 of _0x84ce9a){if(_0x2f5bd3(0xb72)!==_0x2f5bd3(0xb72))return _0x2d524d[_0x2f5bd3(0x21e)]()['length']||0x1;else for(const _0x1cc819 of _0x4b543e){if(_0x2f5bd3(0x9dc)!==_0x2f5bd3(0xbf8)){const _0x59dfdb=_0x7760e1[0x0][_0x2f5bd3(0x98c)](_0x1cc819[0x0]),_0x437026=_0x7760e1[0x1][_0x2f5bd3(0x98c)](_0x1cc819[0x1]),_0x38ec02=new RegExp(_0x3d3555[_0x2f5bd3(0x98c)](_0x437026),'i');_0x1cb97e[_0x59dfdb]=_0x38ec02;}else this['addBattleCoreAutoBattleStartupCommand'](),this[_0x2f5bd3(0xc07)]();}}},Scene_Boot['prototype'][_0x1f5c57(0x9bd)]=function(){const _0x12e82e=$dataSkills['concat']($dataItems);for(const _0x3e2b9 of _0x12e82e){if(!_0x3e2b9)continue;VisuMZ['BattleCore']['Parse_Notetags_Action'](_0x3e2b9);}},Scene_Boot[_0x1f5c57(0x605)][_0x1f5c57(0x3b8)]=function(){const _0x2add75=_0x1f5c57,_0x400a8f=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x596e68 of _0x400a8f){if(_0x2add75(0xbb1)===_0x2add75(0x398)){if(!_0x346344['BattleCore'][_0x2add75(0xbba)]['Actor'][_0x2add75(0xb11)])return;const _0x4709f2=_0x100396[_0x2add75(0x33d)];if(_0x4709f2){if(_0x4709f2['isActor']()&&!_0x171c2a[_0x2add75(0x754)]())return;const _0x46b9cc=_0x4709f2[_0x2add75(0x4b2)]();if(_0x46b9cc&&_0x4709f2[_0x2add75(0xbcf)]())this[_0x2add75(0x9eb)][_0x2add75(0x45b)](_0x46b9cc);}}else{if(!_0x596e68)continue;VisuMZ[_0x2add75(0x6b3)][_0x2add75(0xc73)](_0x596e68);}}},Scene_Boot['prototype'][_0x1f5c57(0x674)]=function(){const _0x4133d6=_0x1f5c57,_0x32f7e7=VisuMZ['BattleCore'][_0x4133d6(0xbba)][_0x4133d6(0x92c)][_0x4133d6(0x7bf)],_0x1e610d=[];for(const _0x299030 of _0x32f7e7){const _0x2aa06c=$dataTroops[_0x299030];if(_0x2aa06c)_0x1e610d[_0x4133d6(0x5af)](JsonEx[_0x4133d6(0x215)](_0x2aa06c));}for(const _0x40c14b of $dataTroops){if('PgIPn'!=='rxSpt'){if(!_0x40c14b)continue;for(const _0x264e89 of _0x1e610d){if(_0x4133d6(0x7d7)===_0x4133d6(0x7d7)){if(_0x264e89['id']===_0x40c14b['id'])continue;_0x40c14b[_0x4133d6(0x664)]=_0x40c14b['pages'][_0x4133d6(0xba4)](_0x264e89['pages']);}else{this[_0x4133d6(0xac5)]=_0x19c8ee[_0x4133d6(0xac5)],this[_0x4133d6(0x53d)]=_0x3ef910[_0x4133d6(0x53d)];const _0x418a30=_0x3c4088['min'](0x1,this[_0x4133d6(0xac5)]/this[_0x4133d6(0x302)][_0x4133d6(0xac5)]),_0x23cada=_0x4ce513[_0x4133d6(0xaea)](0x1,this[_0x4133d6(0x53d)]/this['bitmap']['height']),_0xb36cf8=_0x46fba4[_0x4133d6(0x795)](_0x418a30,_0x23cada);this[_0x4133d6(0xa7b)]['x']=_0xb36cf8,this[_0x4133d6(0xa7b)]['y']=_0xb36cf8,this['x']=(_0x4220be[_0x4133d6(0xac5)]-this['width'])/0x2,this['y']=_0x1563b7['height']-this[_0x4133d6(0x53d)];}}}else _0x4488fd['addTextToCombatLog'](_0xf01b72[_0x4133d6(0x8a1)]||'',_0x417f07[_0x4133d6(0x7ed)]||0x0);}},Scene_Boot[_0x1f5c57(0x605)][_0x1f5c57(0xb78)]=function(){const _0x2be4e0=_0x1f5c57,_0x122c24=VisuMZ[_0x2be4e0(0x6b3)]['Settings'][_0x2be4e0(0x92c)];if(_0x122c24[_0x2be4e0(0x548)]>0x0&&$dataCommonEvents[_0x122c24[_0x2be4e0(0x548)]]){const _0x41b675=$dataCommonEvents[_0x122c24['BattleStartEvent']],_0x10d616=_0x41b675[_0x2be4e0(0xc47)]['length']-0x2,_0x468a45=_0x41b675['list'][_0x10d616];if(_0x468a45&&_0x468a45[_0x2be4e0(0x63c)]!==0xe6){if(_0x2be4e0(0x2cc)!=='ExFZR'){const _0x28c953={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x428ef7=_0x41b675[_0x2be4e0(0xc47)][_0x2be4e0(0x717)]();_0x41b675['list'][_0x2be4e0(0x902)](_0x28c953),_0x41b675[_0x2be4e0(0xc47)][_0x2be4e0(0x902)](_0x428ef7);}else _0x3ad5fa[_0x2be4e0(0x6b3)][_0x2be4e0(0x9ec)][_0x2be4e0(0x5a5)](this),this[_0x2be4e0(0x739)][_0x2be4e0(0x83a)](),this[_0x2be4e0(0x43b)]();}}},Scene_Boot[_0x1f5c57(0x605)][_0x1f5c57(0x9d5)]=function(){const _0x45034e=_0x1f5c57;VisuMZ['BattleCore'][_0x45034e(0x78c)](),VisuMZ['BattleCore'][_0x45034e(0x670)]($dataSkills),VisuMZ[_0x45034e(0x6b3)][_0x45034e(0x670)]($dataItems);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x78c)]=function(){const _0x1e9ce8=_0x1f5c57;VisuMZ[_0x1e9ce8(0x6b3)][_0x1e9ce8(0x3df)]={};for(const _0x35f62a of $dataCommonEvents){if(!_0x35f62a)continue;if(_0x35f62a[_0x1e9ce8(0x310)][_0x1e9ce8(0x7a1)](/\[(.*)\]/i)){if(_0x1e9ce8(0x878)!==_0x1e9ce8(0x249)){let _0x431e52=String(RegExp['$1'])[_0x1e9ce8(0x6e6)](/,/g,'')[_0x1e9ce8(0x8b5)]()[_0x1e9ce8(0xc8b)]();VisuMZ[_0x1e9ce8(0x6b3)][_0x1e9ce8(0x3df)][_0x431e52]=_0x35f62a['id'];}else{const _0x521d86=this[_0x1e9ce8(0xc49)];_0x1e691f[_0x1e9ce8(0x6b3)][_0x1e9ce8(0x358)]['call'](this,_0x353e14),this['setupHpGaugeSprite'](_0x2ee6fa);if(_0x521d86!==_0xb588df)this['updateShadowScale']();}}}},VisuMZ['BattleCore'][_0x1f5c57(0x670)]=function(_0x18b3da){const _0x570ea2=_0x1f5c57;for(const _0x1a3074 of _0x18b3da){if(_0x570ea2(0xb09)!==_0x570ea2(0xc44)){if(!_0x1a3074)continue;VisuMZ[_0x570ea2(0x6b3)][_0x570ea2(0xacd)](_0x1a3074);}else{const _0x116b3c=this['_commandNameWindow'];_0x116b3c[_0x570ea2(0x6db)](_0x5e29f4,0x0,_0x28d386['y'],_0x116b3c[_0x570ea2(0x5eb)],_0x570ea2(0x2d8));}}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xacd)]=function(_0x285cc9){const _0x57ecea=_0x1f5c57;if(!_0x285cc9)return;if(!_0x285cc9['effects'])return;VisuMZ[_0x57ecea(0x6b3)][_0x57ecea(0x3df)]=VisuMZ['BattleCore'][_0x57ecea(0x3df)]||{};const _0x4c651b=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x5aa107=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x487ce6=[];const _0x179a2a=_0x285cc9['note']['match'](_0x4c651b);if(_0x179a2a){if(_0x57ecea(0x321)!=='XnjPn')return this['_battler']&&this[_0x57ecea(0xc49)][_0x57ecea(0x381)]();else{for(const _0x344b38 of _0x179a2a){_0x344b38[_0x57ecea(0x7a1)](_0x4c651b);const _0x1a99ce=String(RegExp['$1'])['split'](',')[_0x57ecea(0x6f1)](_0x1b4802=>String(_0x1b4802)['toUpperCase']()[_0x57ecea(0xc8b)]());_0x487ce6=_0x487ce6['concat'](_0x1a99ce);}!_0x285cc9[_0x57ecea(0x9bc)][_0x57ecea(0x7a1)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x57ecea(0xae1)===_0x57ecea(0x871)?_0x5ef881=_0x57ecea(0x8d3):_0x285cc9[_0x57ecea(0x9bc)]+=_0x57ecea(0x61d));;}}if(_0x285cc9[_0x57ecea(0x9bc)][_0x57ecea(0x7a1)](_0x5aa107)){if('dECbv'===_0x57ecea(0xa4d)){const _0x4d83b8=String(RegExp['$1'])[_0x57ecea(0x450)](/[\r\n]+/)[_0x57ecea(0x6f1)](_0x725965=>String(_0x725965)['toUpperCase']()[_0x57ecea(0xc8b)]());_0x487ce6=_0x487ce6[_0x57ecea(0xba4)](_0x4d83b8);!_0x285cc9[_0x57ecea(0x9bc)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x285cc9[_0x57ecea(0x9bc)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}else{this[_0x57ecea(0x88f)][_0x57ecea(0x5af)](_0x1d09a3);if(this[_0x57ecea(0x611)]())_0x915e60[_0x57ecea(0x831)][_0x57ecea(0x1ee)][_0x57ecea(0x926)](_0x4ca7a6,this['_battler']);else{this[_0x57ecea(0xa7a)]()['addChild'](_0xd23ec2);if(_0x5cf179[_0x57ecea(0x1d4)]())_0x372425[_0x57ecea(0xa7b)]['x']=-0x1;}}}for(const _0x3275be of _0x487ce6){if(_0x57ecea(0x432)!=='GnJUz')this['startMotion'](_0x57ecea(0x478));else{if(VisuMZ[_0x57ecea(0x6b3)]['_commonEventKey'][_0x3275be]){if(_0x57ecea(0x7b1)===_0x57ecea(0x7b1)){const _0x4eb2f4=VisuMZ[_0x57ecea(0x6b3)]['_commonEventKey'][_0x3275be],_0x11a382={'code':0x2c,'dataId':_0x4eb2f4,'value1':0x1,'value2':0x0};_0x285cc9[_0x57ecea(0x2be)][_0x57ecea(0x5af)](_0x11a382);}else return _0x4b73b4[_0x57ecea(0x6b3)][_0x57ecea(0xbba)][_0x57ecea(0xa0b)][_0x57ecea(0x55f)]?this[_0x57ecea(0xc49)]['isSelected']():_0x51bd27[_0x57ecea(0x831)][_0x57ecea(0x739)]&&_0x5ba2dd['_scene'][_0x57ecea(0x739)]['active']&&_0x3bee33[_0x57ecea(0x831)]['_enemyWindow'][_0x57ecea(0x1de)][_0x57ecea(0x60e)](this[_0x57ecea(0xc49)]);}}}},Scene_Boot['prototype'][_0x1f5c57(0x23b)]=function(){const _0x50dc65=_0x1f5c57,_0x32f8ed=$dataSkills[_0x50dc65(0xba4)]($dataItems);for(const _0x27ebc5 of _0x32f8ed){if(!_0x27ebc5)continue;VisuMZ[_0x50dc65(0x6b3)][_0x50dc65(0x566)](_0x27ebc5);}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x411)]=VisuMZ['ParseActorNotetags'],VisuMZ['ParseActorNotetags']=function(_0x721886){const _0x422e29=_0x1f5c57;VisuMZ['BattleCore'][_0x422e29(0x411)]&&('BtFUk'!==_0x422e29(0x6a1)?this[_0x422e29(0x381)]()?this['updateStaticSvBattlerFrames']():(this[_0x422e29(0x5a7)](),_0x1eac90[_0x422e29(0x6b3)]['Sprite_Actor_updateFrame'][_0x422e29(0x5a5)](this)):VisuMZ[_0x422e29(0x6b3)]['ParseActorNotetags'][_0x422e29(0x5a5)](this,_0x721886)),VisuMZ[_0x422e29(0x6b3)][_0x422e29(0xc73)](_0x721886);},VisuMZ['BattleCore']['ParseClassNotetags']=VisuMZ[_0x1f5c57(0x87e)],VisuMZ[_0x1f5c57(0x87e)]=function(_0x3451b5){const _0xbe0d83=_0x1f5c57;VisuMZ[_0xbe0d83(0x6b3)][_0xbe0d83(0x87e)]&&VisuMZ[_0xbe0d83(0x6b3)]['ParseClassNotetags'][_0xbe0d83(0x5a5)](this,_0x3451b5),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x3451b5);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x2c0)]=VisuMZ[_0x1f5c57(0x2c0)],VisuMZ['ParseSkillNotetags']=function(_0x488830){const _0x3c74e9=_0x1f5c57;VisuMZ['BattleCore'][_0x3c74e9(0x2c0)]&&VisuMZ[_0x3c74e9(0x6b3)][_0x3c74e9(0x2c0)][_0x3c74e9(0x5a5)](this,_0x488830),VisuMZ[_0x3c74e9(0x6b3)][_0x3c74e9(0x86b)](_0x488830),VisuMZ[_0x3c74e9(0x6b3)][_0x3c74e9(0x566)](_0x488830);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x49f)]=VisuMZ[_0x1f5c57(0x49f)],VisuMZ[_0x1f5c57(0x49f)]=function(_0x2cc920){const _0xc76858=_0x1f5c57;VisuMZ['BattleCore'][_0xc76858(0x49f)]&&VisuMZ['BattleCore'][_0xc76858(0x49f)][_0xc76858(0x5a5)](this,_0x2cc920),VisuMZ['BattleCore'][_0xc76858(0x86b)](_0x2cc920),VisuMZ['BattleCore'][_0xc76858(0x566)](_0x2cc920);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x46f)]=VisuMZ[_0x1f5c57(0x46f)],VisuMZ['ParseWeaponNotetags']=function(_0x138a77){const _0x264079=_0x1f5c57;VisuMZ[_0x264079(0x6b3)][_0x264079(0x46f)]&&VisuMZ[_0x264079(0x6b3)][_0x264079(0x46f)]['call'](this,_0x138a77),VisuMZ[_0x264079(0x6b3)][_0x264079(0xc73)](_0x138a77);},VisuMZ['BattleCore'][_0x1f5c57(0x5b9)]=VisuMZ[_0x1f5c57(0x5b9)],VisuMZ[_0x1f5c57(0x5b9)]=function(_0x38032e){const _0x16e8a4=_0x1f5c57;if(VisuMZ['BattleCore'][_0x16e8a4(0x5b9)]){if('DReBb'===_0x16e8a4(0xab5))return this[_0x16e8a4(0x714)]()?this[_0x16e8a4(0xa11)]()&&this['currentAction']()[_0x16e8a4(0x20c)]()&&this['currentAction']()[_0x16e8a4(0x448)]():this[_0x16e8a4(0xa11)]()&&this['currentAction']()[_0x16e8a4(0x20c)]()&&this['currentAction']()[_0x16e8a4(0x62c)]();else VisuMZ[_0x16e8a4(0x6b3)]['ParseArmorNotetags'][_0x16e8a4(0x5a5)](this,_0x38032e);}VisuMZ[_0x16e8a4(0x6b3)][_0x16e8a4(0xc73)](_0x38032e);},VisuMZ['BattleCore'][_0x1f5c57(0x3e6)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x1f5c57(0x3e6)]=function(_0x134814){const _0x59e827=_0x1f5c57;VisuMZ[_0x59e827(0x6b3)][_0x59e827(0x3e6)]&&VisuMZ[_0x59e827(0x6b3)][_0x59e827(0x3e6)][_0x59e827(0x5a5)](this,_0x134814),VisuMZ['BattleCore'][_0x59e827(0xc73)](_0x134814);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xb74)]=VisuMZ['ParseStateNotetags'],VisuMZ[_0x1f5c57(0xb74)]=function(_0x1c93af){const _0x841ecb=_0x1f5c57;VisuMZ['BattleCore']['ParseStateNotetags']&&(_0x841ecb(0x9ba)!==_0x841ecb(0x9ba)?_0x31fec9[_0x841ecb(0x4ea)](_0x9c2a6[_0x841ecb(0x82d)],!![]):VisuMZ[_0x841ecb(0x6b3)][_0x841ecb(0xb74)][_0x841ecb(0x5a5)](this,_0x1c93af)),VisuMZ['BattleCore'][_0x841ecb(0xc73)](_0x1c93af);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x86b)]=function(_0x55a26b){const _0x2e975d=_0x1f5c57,_0x3b1dc9=[_0x2e975d(0xa24),_0x2e975d(0xc59),'PreDamageJS',_0x2e975d(0xa81),_0x2e975d(0x703),_0x2e975d(0x518),'PreEndActionJS',_0x2e975d(0x5d1)];for(const _0x401b5e of _0x3b1dc9){VisuMZ[_0x2e975d(0x6b3)]['createJS'](_0x55a26b,_0x401b5e);}const _0x1c48b0=_0x55a26b[_0x2e975d(0x9bc)];_0x1c48b0[_0x2e975d(0x7a1)](/<ALWAYS CRITICAL/i)&&(_0x55a26b[_0x2e975d(0x84b)]['critical']=!![]),_0x1c48b0[_0x2e975d(0x7a1)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x55a26b[_0x2e975d(0x50f)]=Math['max'](0x1,Number(RegExp['$1']))),_0x1c48b0[_0x2e975d(0x7a1)](/<TARGET:[ ](.*)>/i)&&(_0x55a26b[_0x2e975d(0x3f2)]=String(RegExp['$1'])[_0x2e975d(0x8b5)]()[_0x2e975d(0xc8b)]());},VisuMZ['BattleCore'][_0x1f5c57(0xc73)]=function(_0x3a355e){const _0x24f346=_0x1f5c57,_0x286965=[_0x24f346(0x68f),_0x24f346(0xc6e),_0x24f346(0x40d),_0x24f346(0x8e3),'PreApplyAsTargetJS',_0x24f346(0x3c8),'PreDamageAsTargetJS',_0x24f346(0x501),'PreStartActionJS',_0x24f346(0x518),'PreEndActionJS',_0x24f346(0x5d1),_0x24f346(0x992),'PostStartBattleJS','PreEndBattleJS',_0x24f346(0x270),_0x24f346(0x30f),_0x24f346(0xa1f),_0x24f346(0xb55),_0x24f346(0x34d),'PreStartTurnJS','PostStartTurnJS',_0x24f346(0x9ef),_0x24f346(0x87a),_0x24f346(0x654),_0x24f346(0xb9f)];for(const _0x2519c1 of _0x286965){if(_0x24f346(0xad0)!==_0x24f346(0x325))VisuMZ[_0x24f346(0x6b3)][_0x24f346(0x967)](_0x3a355e,_0x2519c1);else{if(!_0x56ff9d[_0x24f346(0x2ba)]())return;if(!_0x277a53['VisuMZ_3_ActSeqProjectiles'])return;_0x4442e7[_0x24f346(0xa1c)](_0x5eef4c,_0x40f83d);const _0x3db420=_0x47b8be[_0x24f346(0x78b)](),_0x5f49f6=_0x5c1e08[_0x24f346(0x7c6)];if(!_0x3db420)return;const _0x55e8d2=_0x2133af['_spriteset'];if(!_0x55e8d2)return;_0x55e8d2[_0x24f346(0x28d)](_0x4ab677);if(_0x5f49f6)_0x3db420[_0x24f346(0x924)](_0x24f346(0xa26));}}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x566)]=function(_0x38f185){const _0x4e9b76=_0x1f5c57,_0x39f5a0=_0x38f185[_0x4e9b76(0x9bc)];if(_0x39f5a0[_0x4e9b76(0x7a1)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x8ef308=String(RegExp['$1']),_0x5d5c6e=VisuMZ[_0x4e9b76(0x6b3)][_0x4e9b76(0x60b)](_0x38f185,_0x4e9b76(0x3cb));VisuMZ[_0x4e9b76(0x6b3)][_0x4e9b76(0xc4b)](_0x8ef308,_0x5d5c6e);}if(_0x39f5a0[_0x4e9b76(0x7a1)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x51781c=String(RegExp['$1']),_0x2e0666=VisuMZ['BattleCore'][_0x4e9b76(0x60b)](_0x38f185,_0x4e9b76(0x1f5));VisuMZ[_0x4e9b76(0x6b3)][_0x4e9b76(0x9d6)](_0x51781c,_0x2e0666);}},VisuMZ[_0x1f5c57(0x6b3)]['JS']={},VisuMZ['BattleCore'][_0x1f5c57(0x967)]=function(_0x5ed1a6,_0x725d94){const _0x523a8f=_0x1f5c57,_0x4e938d=_0x5ed1a6[_0x523a8f(0x9bc)];if(_0x4e938d[_0x523a8f(0x7a1)](VisuMZ[_0x523a8f(0x6b3)]['RegExp'][_0x725d94])){const _0x21feda=RegExp['$1'],_0x5734fb=_0x523a8f(0xbbd)[_0x523a8f(0x98c)](_0x21feda),_0x3c8c2c=VisuMZ[_0x523a8f(0x6b3)][_0x523a8f(0x60b)](_0x5ed1a6,_0x725d94);VisuMZ[_0x523a8f(0x6b3)]['JS'][_0x3c8c2c]=new Function(_0x5734fb);}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x60b)]=function(_0x525825,_0x1789d2){const _0xa4ffea=_0x1f5c57;let _0x41be0e='';if($dataActors[_0xa4ffea(0x60e)](_0x525825))_0x41be0e=_0xa4ffea(0x487)['format'](_0x525825['id'],_0x1789d2);if($dataClasses['includes'](_0x525825))_0x41be0e=_0xa4ffea(0x8dd)['format'](_0x525825['id'],_0x1789d2);if($dataSkills[_0xa4ffea(0x60e)](_0x525825))_0x41be0e=_0xa4ffea(0x401)[_0xa4ffea(0x98c)](_0x525825['id'],_0x1789d2);if($dataItems[_0xa4ffea(0x60e)](_0x525825))_0x41be0e=_0xa4ffea(0x6a9)[_0xa4ffea(0x98c)](_0x525825['id'],_0x1789d2);if($dataWeapons['includes'](_0x525825))_0x41be0e=_0xa4ffea(0xc89)['format'](_0x525825['id'],_0x1789d2);if($dataArmors[_0xa4ffea(0x60e)](_0x525825))_0x41be0e=_0xa4ffea(0x78e)[_0xa4ffea(0x98c)](_0x525825['id'],_0x1789d2);if($dataEnemies['includes'](_0x525825))_0x41be0e='Enemy-%1-%2'[_0xa4ffea(0x98c)](_0x525825['id'],_0x1789d2);if($dataStates[_0xa4ffea(0x60e)](_0x525825))_0x41be0e=_0xa4ffea(0x64d)[_0xa4ffea(0x98c)](_0x525825['id'],_0x1789d2);return _0x41be0e;},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xc4b)]=function(_0x478e63,_0x3b61e9){const _0x2f2a63=_0x1f5c57,_0x27c88c='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x2f2a63(0x98c)](_0x478e63);VisuMZ['BattleCore']['JS'][_0x3b61e9]=new Function(_0x27c88c);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x9d6)]=function(_0x561e24,_0x620062){const _0x4b7081=_0x1f5c57,_0x5be56b=_0x4b7081(0x7e0)['format'](_0x561e24);VisuMZ[_0x4b7081(0x6b3)]['JS'][_0x620062]=new Function(_0x5be56b);},TextManager[_0x1f5c57(0x535)]=VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xbba)]['PartyCmd'][_0x1f5c57(0xa16)],TextManager[_0x1f5c57(0x40a)]=VisuMZ[_0x1f5c57(0x6b3)]['Settings'][_0x1f5c57(0xa6c)][_0x1f5c57(0x50b)],TextManager[_0x1f5c57(0xaa9)]=VisuMZ['BattleCore'][_0x1f5c57(0xbba)][_0x1f5c57(0xa6c)][_0x1f5c57(0x688)],TextManager['visualHpGauge']=VisuMZ['BattleCore']['Settings'][_0x1f5c57(0x3b3)]['Name'],ColorManager[_0x1f5c57(0x80c)]=function(_0x463102){const _0x44c53c=_0x1f5c57;return _0x463102=String(_0x463102),_0x463102[_0x44c53c(0x7a1)](/#(.*)/i)?_0x44c53c(0x42f)['format'](String(RegExp['$1'])):this[_0x44c53c(0xad9)](Number(_0x463102));},DataManager[_0x1f5c57(0x7ae)]=function(_0x21f56f){const _0xab484f=_0x1f5c57;if(_0x21f56f[_0xab484f(0x9bc)][_0xab484f(0x7a1)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x193307=String(RegExp['$1'])[_0xab484f(0x8b5)]()[_0xab484f(0xc8b)]();if(_0x193307===_0xab484f(0x81d))return _0xab484f(0x81d);if(VisuMZ[_0xab484f(0x2e2)][_0x193307])return _0x193307;}const _0x57edf4=VisuMZ['BattleCore'][_0xab484f(0xbba)]['Damage'][_0xab484f(0x704)]['toUpperCase']()[_0xab484f(0xc8b)]();if(VisuMZ['DamageStyles'][_0x57edf4])return _0x57edf4;return _0xab484f(0x81d);},DataManager[_0x1f5c57(0x9a8)]=function(_0x4b4bab){const _0x2d2744=_0x1f5c57;_0x4b4bab=_0x4b4bab[_0x2d2744(0x8b5)]()['trim'](),this[_0x2d2744(0x904)]=this[_0x2d2744(0x904)]||{};if(this[_0x2d2744(0x904)][_0x4b4bab])return this[_0x2d2744(0x904)][_0x4b4bab];for(let _0x2cabc8=0x1;_0x2cabc8<0x64;_0x2cabc8++){if(!$dataSystem[_0x2d2744(0xba9)][_0x2cabc8])continue;let _0x2469b4=$dataSystem['skillTypes'][_0x2cabc8][_0x2d2744(0x8b5)]()[_0x2d2744(0xc8b)]();_0x2469b4=_0x2469b4[_0x2d2744(0x6e6)](/\x1I\[(\d+)\]/gi,''),_0x2469b4=_0x2469b4[_0x2d2744(0x6e6)](/\\I\[(\d+)\]/gi,''),this[_0x2d2744(0x904)][_0x2469b4]=_0x2cabc8;}return this[_0x2d2744(0x904)][_0x4b4bab]||0x0;},DataManager[_0x1f5c57(0x3d2)]=function(_0x52087b){const _0xb3355=_0x1f5c57;_0x52087b=_0x52087b[_0xb3355(0x8b5)]()[_0xb3355(0xc8b)](),this[_0xb3355(0xb14)]=this['_skillIDs']||{};if(this[_0xb3355(0xb14)][_0x52087b])return this[_0xb3355(0xb14)][_0x52087b];for(const _0x201715 of $dataSkills){if(!_0x201715)continue;this[_0xb3355(0xb14)][_0x201715[_0xb3355(0x310)][_0xb3355(0x8b5)]()['trim']()]=_0x201715['id'];}return this[_0xb3355(0xb14)][_0x52087b]||0x0;},DataManager[_0x1f5c57(0xa8f)]=function(_0x3c99ad){const _0x4b1748=_0x1f5c57;_0x3c99ad=_0x3c99ad[_0x4b1748(0x8b5)]()['trim'](),this[_0x4b1748(0x62a)]=this[_0x4b1748(0x62a)]||{};if(this[_0x4b1748(0x62a)][_0x3c99ad])return this[_0x4b1748(0x62a)][_0x3c99ad];for(const _0x14ceb3 of $dataEnemies){if(!_0x14ceb3)continue;this[_0x4b1748(0x62a)][_0x14ceb3[_0x4b1748(0x310)][_0x4b1748(0x8b5)]()[_0x4b1748(0xc8b)]()]=_0x14ceb3['id'];}return this['_enemyIDs'][_0x3c99ad]||0x0;},DataManager[_0x1f5c57(0x6ef)]=function(_0xe1d0f4){const _0x82e828=_0x1f5c57;_0xe1d0f4=_0xe1d0f4[_0x82e828(0x8b5)]()[_0x82e828(0xc8b)](),this[_0x82e828(0x445)]=this[_0x82e828(0x445)]||{};if(this['_wtypeIDs'][_0xe1d0f4])return this[_0x82e828(0x445)][_0xe1d0f4];for(let _0x37faa7=0x1;_0x37faa7<0x64;_0x37faa7++){if('GoWuU'!==_0x82e828(0xa2a))this['_requestRefresh']=!![];else{if(!$dataSystem[_0x82e828(0x6a0)][_0x37faa7])continue;let _0x103f65=$dataSystem['weaponTypes'][_0x37faa7][_0x82e828(0x8b5)]()[_0x82e828(0xc8b)]();_0x103f65=_0x103f65[_0x82e828(0x6e6)](/\x1I\[(\d+)\]/gi,''),_0x103f65=_0x103f65['replace'](/\\I\[(\d+)\]/gi,''),this[_0x82e828(0x445)][_0x103f65]=_0x37faa7;}}return this[_0x82e828(0x445)][_0x82e828(0x527)]=0x0,this[_0x82e828(0x445)][_0xe1d0f4]||0x0;},DataManager[_0x1f5c57(0xb86)]=function(_0x22fb42){const _0x1df2c5=_0x1f5c57,_0x521676='\x5cI[%1]%2';let _0x22b879=_0x22fb42[_0x1df2c5(0x873)],_0x17ef4e=_0x22fb42[_0x1df2c5(0x310)];const _0x562f2a=_0x22fb42[_0x1df2c5(0x9bc)];return _0x562f2a[_0x1df2c5(0x7a1)](/<DISPLAY ICON: (\d+)>/i)&&(_0x22b879=Number(RegExp['$1'])),_0x562f2a[_0x1df2c5(0x7a1)](/<DISPLAY TEXT: (.*)>/i)&&(_0x1df2c5(0x218)!==_0x1df2c5(0x218)?this[_0x1df2c5(0x51c)]=_0x1df2c5(0x810):_0x17ef4e=String(RegExp['$1'])),_0x521676[_0x1df2c5(0x98c)](_0x22b879,_0x17ef4e);},DataManager[_0x1f5c57(0x3eb)]=function(_0x21fa31){const _0x505a6f=_0x1f5c57;return _0x21fa31[_0x505a6f(0x9bc)]['match'](/<COMMAND TEXT: (.*)>/i)?_0x505a6f(0x5bd)===_0x505a6f(0x5bd)?String(RegExp['$1']):this[_0x505a6f(0xa11)]()&&this['currentAction']()[_0x505a6f(0x20c)]()&&this[_0x505a6f(0xa11)]()[_0x505a6f(0x62c)]():_0x21fa31[_0x505a6f(0x310)];},DataManager['battleCommandIcon']=function(_0x1d7d4c){const _0x35387f=_0x1f5c57;return _0x1d7d4c[_0x35387f(0x9bc)][_0x35387f(0x7a1)](/<COMMAND ICON: (\d+)>/i)?_0x35387f(0x6f7)==='NEvIr'?_0x599523[_0x35387f(0xbcf)]()?_0x25d975[_0x35387f(0x21e)]()[_0x35387f(0x9fe)]||0x1:0x1:Number(RegExp['$1']):_0x1d7d4c[_0x35387f(0x873)];},DataManager[_0x1f5c57(0x63e)]=function(_0x431e53){const _0xccbfd0=_0x1f5c57,_0x4ac5f2=$dataEnemies[_0x431e53];if(_0x4ac5f2){if(_0x4ac5f2['note'][_0xccbfd0(0x7a1)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x5baf26=String(RegExp['$1'])['split'](/[\r\n]+/)[_0xccbfd0(0x665)](''),_0xcb860=this[_0xccbfd0(0x515)](_0x5baf26);_0x431e53=this[_0xccbfd0(0xa8f)](_0xcb860)||_0x431e53,_0x431e53=DataManager[_0xccbfd0(0x63e)](_0x431e53);}}return _0x431e53;},DataManager['processRandomizedData']=function(_0x345087){const _0xe121c9=_0x1f5c57;let _0x303d9f=0x0;const _0x50db3a={};for(const _0x839fb3 of _0x345087){if(_0x839fb3[_0xe121c9(0x7a1)](/(.*):[ ](\d+)/i)){const _0x2a18ea=String(RegExp['$1'])[_0xe121c9(0xc8b)](),_0x43d549=Number(RegExp['$2']);_0x50db3a[_0x2a18ea]=_0x43d549,_0x303d9f+=_0x43d549;}else{if(_0x839fb3[_0xe121c9(0x7a1)](/(.*):[ ](\d+\.?\d+)/i)){const _0x5f00c2=String(RegExp['$1'])[_0xe121c9(0xc8b)](),_0x35c4ab=Number(RegExp['$2']);_0x50db3a[_0x5f00c2]=_0x35c4ab,_0x303d9f+=_0x35c4ab;}else _0x839fb3!==''&&(_0xe121c9(0x228)===_0xe121c9(0x8ce)?(_0x1d0840[_0xe121c9(0x6b3)][_0xe121c9(0x3ba)][_0xe121c9(0x5a5)](this),this[_0xe121c9(0x584)]()):(_0x50db3a[_0x839fb3]=0x1,_0x303d9f++));}}if(_0x303d9f<=0x0)return'';let _0x5ae7f4=Math[_0xe121c9(0x77f)]()*_0x303d9f;for(const _0x4ffaa7 in _0x50db3a){_0x5ae7f4-=_0x50db3a[_0x4ffaa7];if(_0x5ae7f4<=0x0)return _0x4ffaa7;}return'';},DataManager[_0x1f5c57(0x903)]=function(_0x81a056){const _0x5d65f9=_0x1f5c57;if(!_0x81a056)return![];if(!VisuMZ['BattleCore'][_0x5d65f9(0xbba)][_0x5d65f9(0xbaa)][_0x5d65f9(0x778)])return![];if(_0x81a056['note']['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x81a056['note'][_0x5d65f9(0x7a1)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x16e155 of _0x81a056['effects']){if(!_0x16e155)continue;if(_0x16e155[_0x5d65f9(0x63c)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x1f5c57(0x542)]=function(_0x1dc016){const _0xbb19b5=_0x1f5c57,_0x392e09=$dataTroops[_0x1dc016];if(!_0x392e09)return'';let _0x52f003='';_0x52f003+=_0x392e09[_0xbb19b5(0x310)];for(const _0x48f636 of _0x392e09['pages']){if(_0xbb19b5(0x5f7)!==_0xbb19b5(0xb68))for(const _0x378779 of _0x48f636[_0xbb19b5(0xc47)]){[0x6c,0x198][_0xbb19b5(0x60e)](_0x378779[_0xbb19b5(0x63c)])&&(_0x52f003+='\x0a',_0x52f003+=_0x378779[_0xbb19b5(0x93e)][0x0]);}else return this['currentClass']()[_0xbb19b5(0x9bc)][_0xbb19b5(0x7a1)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x4cfb89(_0x16d2b4['$1'])[_0xbb19b5(0x450)](/[\r\n]+/):_0x29253e[_0xbb19b5(0x6b3)][_0xbb19b5(0xbba)]['ActorCmd'][_0xbb19b5(0xbdb)];}return _0x52f003;},ConfigManager[_0x1f5c57(0x572)]=ConfigManager[_0x1f5c57(0x572)]??![],ConfigManager[_0x1f5c57(0xb7a)]=ConfigManager[_0x1f5c57(0xb7a)]??![],ConfigManager[_0x1f5c57(0x2c2)]=ConfigManager['visualHpGauge']??!![],VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x222)]=ConfigManager[_0x1f5c57(0xbe2)],ConfigManager['makeData']=function(){const _0x2872ae=_0x1f5c57,_0x3379a1=VisuMZ[_0x2872ae(0x6b3)][_0x2872ae(0x222)][_0x2872ae(0x5a5)](this);return _0x3379a1[_0x2872ae(0x572)]=this[_0x2872ae(0x572)],_0x3379a1[_0x2872ae(0xb7a)]=this['autoBattleUseSkills'],_0x3379a1['visualHpGauge']=this['visualHpGauge'],_0x3379a1;},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xb5f)]=ConfigManager[_0x1f5c57(0x3d5)],ConfigManager['applyData']=function(_0x22fd9e){const _0x4eabbb=_0x1f5c57;VisuMZ[_0x4eabbb(0x6b3)][_0x4eabbb(0xb5f)][_0x4eabbb(0x5a5)](this,_0x22fd9e);_0x4eabbb(0x572)in _0x22fd9e?this[_0x4eabbb(0x572)]=_0x22fd9e[_0x4eabbb(0x572)]:_0x4eabbb(0xb96)===_0x4eabbb(0x49b)?(_0x55985a=this[_0x4eabbb(0xbb4)]['battleback1Name'](),_0x2fbc14=this[_0x4eabbb(0x258)][_0x4eabbb(0x99a)]()):this['autoBattleAtStart']=![];if(_0x4eabbb(0xb7a)in _0x22fd9e)_0x4eabbb(0x35a)==='fASxP'?this[_0x4eabbb(0xb7a)]=_0x22fd9e['autoBattleUseSkills']:(this[_0x4eabbb(0x5af)](_0x4eabbb(0x67c)),this[_0x4eabbb(0x934)](_0x4b334a),this[_0x4eabbb(0x93b)](_0x10a98e),this[_0x4eabbb(0x5af)]('waitForNewLine'));else{if(_0x4eabbb(0x653)!==_0x4eabbb(0x86c))this[_0x4eabbb(0xb7a)]=![];else return this['svBattlerData']()['shadow'];}_0x4eabbb(0x2c2)in _0x22fd9e?this[_0x4eabbb(0x2c2)]=_0x22fd9e['visualHpGauge']:this[_0x4eabbb(0x2c2)]=!![];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xc7c)]=BattleManager[_0x1f5c57(0x6c5)],BattleManager[_0x1f5c57(0x6c5)]=function(){const _0x2c86c3=_0x1f5c57;VisuMZ['BattleCore'][_0x2c86c3(0xc7c)][_0x2c86c3(0x5a5)](this),this[_0x2c86c3(0xc2d)]=[];},BattleManager[_0x1f5c57(0x74c)]=function(){const _0x1d31ff=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;const _0x42e847=SceneManager[_0x1d31ff(0x831)]['_statusWindow'];if(_0x42e847)_0x42e847[_0x1d31ff(0x479)]();},BattleManager[_0x1f5c57(0xaca)]=function(){const _0xe9b2a9=_0x1f5c57;if(BattleManager[_0xe9b2a9(0x97c)]())return _0xe9b2a9(0x69f);return _0xe9b2a9(0x70a);},BattleManager[_0x1f5c57(0xb43)]=function(_0x116dac){const _0xe4b2d4=_0x1f5c57;return _0x116dac=_0x116dac[_0xe4b2d4(0x8b5)]()['trim'](),this[_0xe4b2d4(0xaca)]()===_0x116dac;},BattleManager['isDTB']=function(){const _0x51ccc9=_0x1f5c57;return this[_0x51ccc9(0xb43)]('DTB');},BattleManager[_0x1f5c57(0x9d8)]=function(){return this['isDTB']();},BattleManager[_0x1f5c57(0x3e8)]=function(){const _0x2c8e3c=_0x1f5c57;return!this[_0x2c8e3c(0x9d8)]();},BattleManager['isTeamBased']=function(){const _0x54513b=_0x1f5c57;return!this[_0x54513b(0x9d8)]()&&!this[_0x54513b(0x3e8)]();},BattleManager[_0x1f5c57(0x87c)]=function(_0x7bfdcb){const _0x26f021=_0x1f5c57;$gameParty['processBattleCoreJS'](_0x7bfdcb),$gameTroop[_0x26f021(0x87c)](_0x7bfdcb);},VisuMZ['BattleCore'][_0x1f5c57(0xc1a)]=BattleManager[_0x1f5c57(0x486)],BattleManager['startBattle']=function(){const _0x43bb0d=_0x1f5c57;this[_0x43bb0d(0x7fa)]=![],this[_0x43bb0d(0x391)]=ConfigManager[_0x43bb0d(0x572)],this['processBattleCoreJS'](_0x43bb0d(0x992)),VisuMZ['BattleCore'][_0x43bb0d(0xc1a)][_0x43bb0d(0x5a5)](this),this[_0x43bb0d(0x87c)](_0x43bb0d(0xc2b));},BattleManager['processPostBattleCommonEvents']=function(_0x211578){const _0x4462db=_0x1f5c57,_0x28de65=VisuMZ[_0x4462db(0x6b3)][_0x4462db(0xbba)]['Mechanics'];_0x211578!==_0x4462db(0x90a)&&_0x28de65[_0x4462db(0x8ca)]&&VisuMZ['BattleCore'][_0x4462db(0xac0)](_0x28de65[_0x4462db(0x8ca)])&&$gameTemp['reserveCommonEvent'](_0x28de65[_0x4462db(0x8ca)]);const _0x400518=_0x4462db(0x253)[_0x4462db(0x98c)](_0x211578);_0x28de65[_0x400518]&&VisuMZ[_0x4462db(0x6b3)][_0x4462db(0xac0)](_0x28de65[_0x400518])&&$gameTemp[_0x4462db(0x3ff)](_0x28de65[_0x400518]);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x2a3)]=BattleManager[_0x1f5c57(0xabd)],BattleManager[_0x1f5c57(0xabd)]=function(){const _0x6d9cd7=_0x1f5c57;if(this[_0x6d9cd7(0x51c)]===_0x6d9cd7(0x810)){if(_0x6d9cd7(0x594)==='CwvvO')this['push'](_0x6d9cd7(0xc21),_0x1bacc1);else{if($gameTemp['isCommonEventReserved']())return![];}}return VisuMZ[_0x6d9cd7(0x6b3)][_0x6d9cd7(0x2a3)][_0x6d9cd7(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x292)]=BattleManager[_0x1f5c57(0x1e1)],BattleManager[_0x1f5c57(0x1e1)]=function(){const _0x3982a1=_0x1f5c57;this[_0x3982a1(0x87c)]('BattleVictoryJS'),VisuMZ[_0x3982a1(0x6b3)][_0x3982a1(0x292)][_0x3982a1(0x5a5)](this),this[_0x3982a1(0x949)](_0x3982a1(0x73e));},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x4d8)]=BattleManager[_0x1f5c57(0x86e)],BattleManager['processDefeat']=function(){const _0x36ec48=_0x1f5c57;this[_0x36ec48(0x87c)](_0x36ec48(0xa1f)),VisuMZ[_0x36ec48(0x6b3)][_0x36ec48(0x4d8)][_0x36ec48(0x5a5)](this),this[_0x36ec48(0x949)](_0x36ec48(0xb58));},VisuMZ['BattleCore']['BattleManager_endBattle']=BattleManager[_0x1f5c57(0x9ed)],BattleManager[_0x1f5c57(0x9ed)]=function(_0xb86d8b){const _0x10d024=_0x1f5c57;this[_0x10d024(0x7fa)]=!![],this[_0x10d024(0x391)]=![],this[_0x10d024(0x87c)](_0x10d024(0x85c)),VisuMZ[_0x10d024(0x6b3)]['BattleManager_endBattle'][_0x10d024(0x5a5)](this,_0xb86d8b),this[_0x10d024(0x87c)]('PostEndBattleJS');},VisuMZ['BattleCore']['BattleManager_startTurn']=BattleManager[_0x1f5c57(0xc04)],BattleManager[_0x1f5c57(0xc04)]=function(){const _0x53fa69=_0x1f5c57;if(this[_0x53fa69(0x9d8)]())this[_0x53fa69(0x87c)]('PreStartTurnJS');VisuMZ[_0x53fa69(0x6b3)][_0x53fa69(0x56d)][_0x53fa69(0x5a5)](this);if(this[_0x53fa69(0x9d8)]())this[_0x53fa69(0x87c)](_0x53fa69(0x799));},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xaeb)]=BattleManager[_0x1f5c57(0xb32)],BattleManager['startAction']=function(){const _0x57e9f3=_0x1f5c57,_0x342f20=this[_0x57e9f3(0x33d)][_0x57e9f3(0xa11)](),_0x32a49d=this[_0x57e9f3(0x33d)];if(_0x342f20&&_0x342f20[_0x57e9f3(0x83e)]()===_0x32a49d){if(_0x57e9f3(0x66b)==='aYsve'){if(!this[_0x57e9f3(0x30a)]())return![];return _0x263288[_0x57e9f3(0x6b3)][_0x57e9f3(0x40b)][_0x57e9f3(0x5a5)](this);}else _0x342f20['actionBattleCoreJS'](_0x57e9f3(0x703));}VisuMZ['BattleCore'][_0x57e9f3(0xaeb)][_0x57e9f3(0x5a5)](this),_0x342f20&&_0x342f20['subject']()===_0x32a49d&&_0x342f20['actionBattleCoreJS'](_0x57e9f3(0x518));},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x9e5)]=BattleManager[_0x1f5c57(0x255)],BattleManager[_0x1f5c57(0x255)]=function(){const _0x2ee282=_0x1f5c57,_0x2f60f5=this['_action'],_0x1c7f46=this[_0x2ee282(0x33d)];if(_0x2f60f5&&_0x2f60f5!==this[_0x2ee282(0x881)]&&_0x2f60f5[_0x2ee282(0x83e)]()===_0x1c7f46){if('HUaXL'===_0x2ee282(0x5c8))_0x2f60f5[_0x2ee282(0x785)]('PreEndActionJS');else{const _0x2e2e58=_0x53fbc8['actor']();if(_0x2e2e58&&_0x2e2e58['battler'])_0x2e2e58[_0x2ee282(0x4b2)]()[_0x2ee282(0x8f3)]();_0x1e0089['BattleCore'][_0x2ee282(0x494)][_0x2ee282(0x5a5)](this);}}if(this[_0x2ee282(0x33d)]){if(_0x2ee282(0xc23)!==_0x2ee282(0x233))VisuMZ['BattleCore']['BattleManager_endAction'][_0x2ee282(0x5a5)](this);else{if(!_0x18a9aa['isSideView']())return;const _0x466def=this[_0x2ee282(0x4b2)]();if(!_0x466def)return;_0x466def[_0x2ee282(0x5d2)](_0x2dd37d,_0x58ad66);}}else this['_phase']=_0x2ee282(0x810);_0x2f60f5&&_0x2f60f5!==this[_0x2ee282(0x881)]&&_0x2f60f5['subject']()===_0x1c7f46&&_0x2f60f5[_0x2ee282(0x785)](_0x2ee282(0x5d1)),this[_0x2ee282(0x386)](this[_0x2ee282(0x84e)]()),this[_0x2ee282(0x881)]=this[_0x2ee282(0xbfa)];},BattleManager[_0x1f5c57(0x386)]=function(_0x2da5aa){const _0x58d9ba=_0x1f5c57;for(const _0x23aec1 of _0x2da5aa){if(!_0x23aec1)continue;if(!_0x23aec1['battler']())continue;_0x23aec1['battler']()[_0x58d9ba(0x485)]();}},BattleManager[_0x1f5c57(0xb25)]=function(){const _0x301232=_0x1f5c57;!this['_logWindow']['isBusy']()&&this[_0x301232(0x255)]();},Game_Battler['prototype'][_0x1f5c57(0x4e3)]=function(){const _0xd82512=_0x1f5c57;this[_0xd82512(0x474)]();if(Imported[_0xd82512(0x5d0)]){if('yhQYG'==='dBcdi')return _0x41fe21[_0xd82512(0x6b3)]['Game_Action_evalDamageFormula'][_0xd82512(0x5a5)](this,_0x10b5e7);else{const _0x2274d5=VisuMZ[_0xd82512(0xc64)][_0xd82512(0xbba)][_0xd82512(0x969)];_0x2274d5&&_0x2274d5['ActionEndUpdate']===![]&&this[_0xd82512(0x748)](0x1);}}else this['removeStatesAuto'](0x1);this[_0xd82512(0xb45)]();},BattleManager[_0x1f5c57(0x578)]=function(){const _0xf2dc94=_0x1f5c57;this[_0xf2dc94(0x3d0)]=VisuMZ[_0xf2dc94(0x6b3)][_0xf2dc94(0xbba)]['Mechanics']['CalcEscapeRatioJS'][_0xf2dc94(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x6ca)]=BattleManager['onEscapeSuccess'],BattleManager[_0x1f5c57(0x97a)]=function(){const _0x28fa96=_0x1f5c57;this[_0x28fa96(0x87c)]('EscapeSuccessJS'),BattleManager[_0x28fa96(0x4d6)]['processEscape'](),VisuMZ[_0x28fa96(0x6b3)][_0x28fa96(0x6ca)][_0x28fa96(0x5a5)](this),this[_0x28fa96(0x949)]('EscapeSuccess');},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x4c0)]=BattleManager[_0x1f5c57(0x885)],BattleManager[_0x1f5c57(0x885)]=function(){const _0x59ffc0=_0x1f5c57;this[_0x59ffc0(0x87c)]('EscapeFailureJS');const _0x2ab5d0=this[_0x59ffc0(0x3d0)];VisuMZ['BattleCore'][_0x59ffc0(0x4c0)][_0x59ffc0(0x5a5)](this),this[_0x59ffc0(0x3d0)]=_0x2ab5d0+VisuMZ[_0x59ffc0(0x6b3)][_0x59ffc0(0xbba)][_0x59ffc0(0x92c)]['CalcEscapeRaiseJS'][_0x59ffc0(0x5a5)](this),this[_0x59ffc0(0x949)](_0x59ffc0(0x90a));},BattleManager['displayStartMessages']=function(){const _0x1e30db=_0x1f5c57;let _0x35c595=![];if(this[_0x1e30db(0x256)]())for(const _0x501a6f of $gameTroop[_0x1e30db(0x90d)]()){_0x1e30db(0x793)===_0x1e30db(0x793)?(this['_logWindow'][_0x1e30db(0x5af)]('addText',TextManager[_0x1e30db(0x2b1)][_0x1e30db(0x98c)](_0x501a6f)),this[_0x1e30db(0x57c)]['push'](_0x1e30db(0x478)),_0x35c595=!![]):(this[_0x1e30db(0xa7a)]()[_0x1e30db(0x1dc)](_0x404f65),this[_0x1e30db(0x88f)][_0x1e30db(0x665)](_0x5ccc28),_0x4f4666[_0x1e30db(0x923)]());}if(this[_0x1e30db(0x512)])this[_0x1e30db(0x57c)][_0x1e30db(0x5af)](_0x1e30db(0x5c6),TextManager['preemptive'][_0x1e30db(0x98c)]($gameParty['name']())),this[_0x1e30db(0x57c)][_0x1e30db(0x5af)]('wait');else this[_0x1e30db(0x7a2)]&&('ENQzB'!==_0x1e30db(0x2de)?(_0x469af2[_0x1e30db(0x8a4)](_0xc71a4d),this['callNextMethod']()):(this[_0x1e30db(0x57c)][_0x1e30db(0x5af)](_0x1e30db(0x5c6),TextManager['surprise']['format']($gameParty[_0x1e30db(0x310)]())),this['_logWindow']['push'](_0x1e30db(0x478))));if(_0x35c595){if(_0x1e30db(0xa63)!=='TXkIr'){const _0x475ce6=_0x40ecc4[_0x1e30db(0x215)](_0x371607);_0x475ce6['hpAffected']=![],_0x475ce6[_0x1e30db(0x593)]=0x0,this[_0x1e30db(0x1d2)][_0x1e30db(0x5af)](_0x475ce6);}else this['_logWindow']['push'](_0x1e30db(0x478)),this[_0x1e30db(0x57c)][_0x1e30db(0x5af)](_0x1e30db(0x8e1));}if(this['isTpb']()&&this['isSkipPartyCommandWindow']()){if(_0x1e30db(0x276)===_0x1e30db(0x276))this[_0x1e30db(0x6a4)]=![];else return 0xa;}},BattleManager[_0x1f5c57(0x256)]=function(){const _0x4fd9a2=_0x1f5c57;if(BattleManager[_0x4fd9a2(0x391)])return![];return VisuMZ['BattleCore'][_0x4fd9a2(0xbba)][_0x4fd9a2(0xa0b)][_0x4fd9a2(0x35b)];},VisuMZ[_0x1f5c57(0x6b3)]['BattleManager_startInput']=BattleManager[_0x1f5c57(0x466)],BattleManager[_0x1f5c57(0x466)]=function(){const _0x1d0897=_0x1f5c57;VisuMZ[_0x1d0897(0x6b3)]['BattleManager_startInput'][_0x1d0897(0x5a5)](this);if(this[_0x1d0897(0xa9c)]()&&this[_0x1d0897(0x89f)]()&&!this[_0x1d0897(0x7a2)]&&$gameParty['canInput']()){if('PNTbS'!==_0x1d0897(0x945)){const _0xaa935a=this[_0x1d0897(0x394)][_0x1d0897(0x79d)]();this[_0x1d0897(0x302)]=new _0x3fa37b(_0xaa935a['width'],_0xaa935a[_0x1d0897(0x53d)]),this[_0x1d0897(0xb07)][_0x1d0897(0x302)]=new _0x21c49b(0x1,0x1);}else this[_0x1d0897(0xa8d)]();}},BattleManager[_0x1f5c57(0x89f)]=function(){const _0x3c2aba=_0x1f5c57;return VisuMZ[_0x3c2aba(0x6b3)]['Settings']['PartyCmd'][_0x3c2aba(0x638)];},BattleManager['checkTpbInputOpen']=function(){const _0x2b6e38=_0x1f5c57;this[_0x2b6e38(0x7cb)]()&&this[_0x2b6e38(0xa8d)]();},VisuMZ['BattleCore']['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x1f5c57(0x605)]['startActorCommandSelection'],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x6fe)]=function(){const _0x483550=_0x1f5c57;VisuMZ[_0x483550(0x6b3)][_0x483550(0x4af)][_0x483550(0x5a5)](this),BattleManager[_0x483550(0x97c)]()&&BattleManager[_0x483550(0x6a4)]&&(_0x483550(0x366)!==_0x483550(0x366)?(_0x1625ac[_0x483550(0x605)][_0x483550(0x6ce)][_0x483550(0x5a5)](this,_0x539bd5),this[_0x483550(0x599)](_0x493665)):(BattleManager[_0x483550(0x6a4)]=![],this[_0x483550(0x956)]()));},BattleManager['invokeMagicReflection']=function(_0x2e5b29,_0x2849ef){const _0x1ed2de=_0x1f5c57;this[_0x1ed2de(0xbfa)][_0x1ed2de(0xbd0)]=_0x2849ef,this[_0x1ed2de(0x57c)][_0x1ed2de(0x7ac)](_0x2849ef),this[_0x1ed2de(0x57c)][_0x1ed2de(0x8c5)](_0x2e5b29,this[_0x1ed2de(0xbfa)]),this[_0x1ed2de(0xbfa)][_0x1ed2de(0x64c)](_0x2e5b29),this['_logWindow'][_0x1ed2de(0x343)](_0x2e5b29,_0x2e5b29);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x947)]=BattleManager[_0x1f5c57(0xb87)],BattleManager[_0x1f5c57(0xb87)]=function(){const _0x26568f=_0x1f5c57;VisuMZ[_0x26568f(0x6b3)][_0x26568f(0x947)][_0x26568f(0x5a5)](this),this[_0x26568f(0xa6e)]=this[_0x26568f(0xa6e)][_0x26568f(0x6ae)](_0x505908=>_0x505908&&_0x505908[_0x26568f(0xc3d)]());},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x48d)]=BattleManager[_0x1f5c57(0x97b)],BattleManager[_0x1f5c57(0x97b)]=function(_0x32d821){const _0x4e2cdf=_0x1f5c57;if(this[_0x4e2cdf(0x51c)]===_0x4e2cdf(0xabb))this[_0x4e2cdf(0x404)]();else{if(this[_0x4e2cdf(0x51c)]===_0x4e2cdf(0x92d)){if('KXYix'!==_0x4e2cdf(0x81c))this[_0x4e2cdf(0xb3a)]();else{if(!_0x390fd3[_0x4e2cdf(0x6b3)]['JS'][_0x418715]['call'](this,this['_actor'],_0x41fc52))return![];}}else{if(_0x4e2cdf(0x7a7)!==_0x4e2cdf(0x7d4))VisuMZ['BattleCore'][_0x4e2cdf(0x48d)][_0x4e2cdf(0x5a5)](this,_0x32d821);else for(const _0x4624a5 of _0x772f45[_0x4e2cdf(0xc47)]){[0x6c,0x198][_0x4e2cdf(0x60e)](_0x4624a5[_0x4e2cdf(0x63c)])&&(_0x406cc4+='\x0a',_0xf1441e+=_0x4624a5['parameters'][0x0]);}}}},BattleManager[_0x1f5c57(0xc98)]=function(){const _0x405217=_0x1f5c57;this['_allTargets']=this[_0x405217(0x71f)][_0x405217(0x7b5)](0x0),this['_targetIndex']=0x0,this[_0x405217(0x55e)]=this[_0x405217(0x7d3)][0x0]||null,this[_0x405217(0x51c)]=_0x405217(0xabb);},BattleManager[_0x1f5c57(0x404)]=function(){const _0x3df99d=_0x1f5c57;!this[_0x3df99d(0x4ad)]()&&!this[_0x3df99d(0x57c)][_0x3df99d(0xb62)]()&&(this[_0x3df99d(0x51c)]=_0x3df99d(0x7f0));},BattleManager['forceAction']=function(_0xc32dd3){const _0x39df75=_0x1f5c57;this['_actionBattlers'][_0x39df75(0x665)](_0xc32dd3);if(_0xc32dd3===this[_0x39df75(0x33d)])return;const _0xbe5e81=JsonEx[_0x39df75(0x215)](_0xc32dd3[_0x39df75(0xa11)]());this['_forcedBattlers'][_0x39df75(0x5af)]([_0xc32dd3,_0xbe5e81]);},BattleManager[_0x1f5c57(0x5b3)]=function(){},BattleManager['updateStart']=function(){const _0x1b7568=_0x1f5c57;if(this[_0x1b7568(0x97c)]())this[_0x1b7568(0x51c)]=_0x1b7568(0x810);else{if(this[_0x1b7568(0xc2d)]['length']>0x0){if(_0x1b7568(0xb52)!==_0x1b7568(0x340))this[_0x1b7568(0x51c)]='turn';else{const _0x4f391f=this[_0x1b7568(0x940)](_0x1c5b88),_0x23ec97=this['commandName'](_0x4517be),_0xcb895=this[_0x1b7568(0x5ed)](_0x23ec97)[_0x1b7568(0xac5)];this[_0x1b7568(0x9ca)](this[_0x1b7568(0x392)](_0x348d0f));const _0x3be148=this[_0x1b7568(0x589)]();if(_0x3be148==='right')this[_0x1b7568(0x2c9)](_0x23ec97,_0x4f391f['x']+_0x4f391f['width']-_0xcb895,_0x4f391f['y'],_0xcb895);else{if(_0x3be148===_0x1b7568(0x2d8)){const _0x31e771=_0x4f391f['x']+_0x359fa2[_0x1b7568(0x617)]((_0x4f391f[_0x1b7568(0xac5)]-_0xcb895)/0x2);this[_0x1b7568(0x2c9)](_0x23ec97,_0x31e771,_0x4f391f['y'],_0xcb895);}else this['drawTextEx'](_0x23ec97,_0x4f391f['x'],_0x4f391f['y'],_0xcb895);}}}else this[_0x1b7568(0x466)]();}},BattleManager['getNextSubject']=function(){const _0x22838e=_0x1f5c57,_0x329b9c=this[_0x22838e(0x33d)];_0x329b9c&&this[_0x22838e(0x97c)]()&&_0x329b9c[_0x22838e(0x4f0)](_0x22838e(0x92a));for(;;){if(_0x22838e(0x759)!==_0x22838e(0x67d)){const _0x1b6cde=this[_0x22838e(0x291)]();if(!_0x1b6cde)return null;if(_0x1b6cde[_0x22838e(0x3b9)]()&&_0x1b6cde[_0x22838e(0x3b0)]())return _0x1b6cde;}else _0x13f336[_0x22838e(0x605)][_0x22838e(0x5ea)][_0x22838e(0x5a5)](this,_0x5221dd,_0x516919,_0x100ae3,_0x37882d,_0x1ec8d2);}},BattleManager[_0x1f5c57(0x291)]=function(){const _0x2b778d=_0x1f5c57;if(this[_0x2b778d(0xc2d)]['length']>0x0){if(_0x2b778d(0x9b3)!==_0x2b778d(0xc28)){const _0x176ee0=this[_0x2b778d(0xc2d)][_0x2b778d(0x7f3)](),_0xcc0e25=_0x176ee0[0x0];return _0xcc0e25[_0x2b778d(0x760)]=_0xcc0e25[_0x2b778d(0x760)]||[],_0xcc0e25[_0x2b778d(0x760)][0x0]=_0x176ee0[0x1],_0xcc0e25;}else return _0x5de37a['BattleCore'][_0x2b778d(0xbba)][_0x2b778d(0x8fa)][_0x2b778d(0x470)];}else return this[_0x2b778d(0xa6e)][_0x2b778d(0x7f3)]();},VisuMZ[_0x1f5c57(0x6b3)]['Game_Battler_forceAction']=Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x92d)],Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x92d)]=function(_0x27ddd1,_0x49d6f2){const _0x485544=_0x1f5c57;VisuMZ[_0x485544(0x6b3)]['Game_Battler_forceAction'][_0x485544(0x5a5)](this,_0x27ddd1,_0x49d6f2),this[_0x485544(0x760)][this[_0x485544(0x760)][_0x485544(0x9fe)]-0x1][_0x485544(0x1ff)]=!![];},Game_Interpreter[_0x1f5c57(0x605)]['command339']=function(_0x464687){const _0x4eac0d=_0x1f5c57;return this[_0x4eac0d(0xba3)](_0x464687[0x0],_0x464687[0x1],_0x4fcbdc=>{const _0x2edcaa=_0x4eac0d;!_0x4fcbdc[_0x2edcaa(0x327)]()&&(_0x4fcbdc[_0x2edcaa(0x92d)](_0x464687[0x2],_0x464687[0x3]),BattleManager[_0x2edcaa(0x92d)](_0x4fcbdc));}),!![];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xae6)]=Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x328)],Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x328)]=function(){const _0x17ef1f=_0x1f5c57;VisuMZ[_0x17ef1f(0x6b3)][_0x17ef1f(0xae6)]['call'](this),this[_0x17ef1f(0x760)][_0x17ef1f(0x9fe)]<=0x0&&(this[_0x17ef1f(0x667)]=Number[_0x17ef1f(0xc78)]);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x81b)]=BattleManager['selectNextCommand'],BattleManager[_0x1f5c57(0xa8d)]=function(){const _0x34b26c=_0x1f5c57;if(this['isTpb']()){if(_0x34b26c(0xb60)===_0x34b26c(0xb60))this[_0x34b26c(0x499)]();else{const _0x3b7f14=this[_0x34b26c(0xc49)]&&this[_0x34b26c(0xc49)][_0x34b26c(0x91c)]();this[_0x34b26c(0x3f3)]=(_0x3b7f14?-0x1:0x1)*_0x12bf56['abs'](this[_0x34b26c(0xa7b)]['x']);}}else VisuMZ[_0x34b26c(0x6b3)]['BattleManager_selectNextCommand'][_0x34b26c(0x5a5)](this);},BattleManager[_0x1f5c57(0x499)]=function(){const _0x295109=_0x1f5c57;if(this[_0x295109(0x7e7)]){if('VmAQv'===_0x295109(0x5e2))this[_0x295109(0xb49)]();else{if(this[_0x295109(0x7e7)][_0x295109(0xa8d)]())return;this[_0x295109(0x9dd)](),this[_0x295109(0xa48)](),!this['_subject']&&!this[_0x295109(0x7e7)]&&(_0x295109(0x323)===_0x295109(0x323)?SceneManager[_0x295109(0x831)][_0x295109(0x54f)]():(_0x30c172['BattleCore'][_0x295109(0x2b6)][_0x295109(0x5a5)](this),this[_0x295109(0x3bb)]()));}}else!this[_0x295109(0x33d)]&&this['selectNextActor']();},BattleManager[_0x1f5c57(0xa48)]=function(){const _0x52579f=_0x1f5c57;if(!this['isPartyTpbInputtable']()||this[_0x52579f(0xbd6)]()){if('viCls'===_0x52579f(0x8ae)){if(this[_0x52579f(0xa5b)]){if(!$gameParty['battleMembers']()[_0x52579f(0x60e)](this[_0x52579f(0xa5b)])){if(_0x52579f(0x2e0)==='oEdTu')return this[_0x52579f(0x9de)](_0x45a4c4);else this['_tpbSceneChangeCacheActor']=null;}}!this[_0x52579f(0xa5b)]?(this[_0x52579f(0x3a8)](),this['_currentActor']=null,this['_inputting']=![]):'eVLyo'===_0x52579f(0x779)?this[_0x52579f(0xb35)]():this[_0x52579f(0x6bf)]='list';}else return this[_0x52579f(0xac5)]*this[_0x52579f(0xc90)]();}},BattleManager[_0x1f5c57(0xb35)]=function(){const _0x595001=_0x1f5c57;!$gameParty['battleMembers']()[_0x595001(0x60e)](this[_0x595001(0xa5b)])&&(this[_0x595001(0xa5b)]=null);if(this[_0x595001(0xa5b)]){if(_0x595001(0xab4)!==_0x595001(0x3c2))this[_0x595001(0x7e7)]=this['_tpbSceneChangeCacheActor'],this[_0x595001(0x7e7)][_0x595001(0x8ff)]=_0x595001(0x62e),this[_0x595001(0x876)]=!![],this[_0x595001(0xa5b)]=null;else return this[_0x595001(0x1d2)][_0x595001(0x7f3)]();}else this[_0x595001(0x3a8)](),this[_0x595001(0x7e7)]=null,this[_0x595001(0x876)]=![];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x324)]=BattleManager[_0x1f5c57(0x49e)],BattleManager[_0x1f5c57(0x49e)]=function(){const _0x3d3b6e=_0x1f5c57;return this['_phase']===_0x3d3b6e(0xabb)?this[_0x3d3b6e(0x496)]():VisuMZ[_0x3d3b6e(0x6b3)][_0x3d3b6e(0x324)]['call'](this);},BattleManager[_0x1f5c57(0x496)]=function(){return this['isActiveTpb']();},VisuMZ['BattleCore']['BattleManager_cancelActorInput']=BattleManager[_0x1f5c57(0x3a8)],BattleManager['cancelActorInput']=function(){const _0xf8403b=_0x1f5c57;if(this[_0xf8403b(0x97c)]()&&this[_0xf8403b(0x51c)]===_0xf8403b(0x261)){if(_0xf8403b(0x8c2)==='imHNI')this[_0xf8403b(0x7e7)]=null;else{if(_0x4a7386[_0xf8403b(0x4d6)][_0xf8403b(0x673)]())return!![];this[_0xf8403b(0x651)]=_0xf8403b(0xb27);}}VisuMZ['BattleCore']['BattleManager_cancelActorInput']['call'](this);},VisuMZ['BattleCore'][_0x1f5c57(0x756)]=BattleManager[_0x1f5c57(0x35c)],BattleManager[_0x1f5c57(0x35c)]=function(){const _0x34c687=_0x1f5c57,_0x5b5d74=this[_0x34c687(0x7e7)];if(_0x5b5d74&&!_0x5b5d74['inputtingAction']()){const _0x3af69a=_0x5b5d74[_0x34c687(0xaa6)];_0x5b5d74[_0x34c687(0x760)][_0x3af69a]=new Game_Action(_0x5b5d74);}return VisuMZ[_0x34c687(0x6b3)][_0x34c687(0x756)][_0x34c687(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x694)]=BattleManager[_0x1f5c57(0x791)],BattleManager[_0x1f5c57(0x791)]=function(_0x22a9b1){const _0x2156dc=_0x1f5c57;if(this[_0x2156dc(0xbfa)][_0x2156dc(0x953)]())return![];return VisuMZ[_0x2156dc(0x6b3)][_0x2156dc(0x694)][_0x2156dc(0x5a5)](this,_0x22a9b1);},SceneManager[_0x1f5c57(0x2ba)]=function(){const _0x5f4974=_0x1f5c57;return this['_scene']&&this[_0x5f4974(0x831)][_0x5f4974(0x9f1)]===Scene_Battle;},SceneManager['isBattleFlipped']=function(){const _0x2946d4=_0x1f5c57;return Spriteset_Battle['prototype'][_0x2946d4(0xbee)]();},SceneManager[_0x1f5c57(0x20f)]=function(){const _0x5adb4c=_0x1f5c57;if(SceneManager[_0x5adb4c(0x59e)](Scene_Options))return!![];return![];},SceneManager[_0x1f5c57(0x556)]=function(){const _0x4c2d12=_0x1f5c57;if(SceneManager[_0x4c2d12(0x48b)](Scene_Options))return!![];return![];},SceneManager[_0x1f5c57(0x972)]=function(_0x170d14){const _0xdd0987=_0x1f5c57;if(!SceneManager['isSceneBattle']())return!![];const _0x14501d=[_0xdd0987(0x43e),_0xdd0987(0x5d5)];return _0x14501d[_0xdd0987(0x60e)](_0x170d14[_0xdd0987(0x310)]);},VisuMZ[_0x1f5c57(0x6b3)]['SceneManager_push']=SceneManager[_0x1f5c57(0x5af)],SceneManager[_0x1f5c57(0x5af)]=function(_0x94c1e5){const _0x321e0c=_0x1f5c57;if(!SceneManager[_0x321e0c(0x972)](_0x94c1e5))return this[_0x321e0c(0xc1b)](_0x94c1e5);VisuMZ[_0x321e0c(0x6b3)][_0x321e0c(0x23e)][_0x321e0c(0x5a5)](this,_0x94c1e5);},SceneManager[_0x1f5c57(0xc1b)]=function(_0x321988){const _0x50e3d3=_0x1f5c57;if(!$gameTemp[_0x50e3d3(0x8da)]())return;if(this[_0x50e3d3(0xbfd)])return;this['_displayBattleCoreTransitionErrorMsg']=!![];let _0x32cc48='';_0x32cc48+=_0x50e3d3(0x93d),_0x32cc48+='\x20to\x20%1\x20midbattle.'[_0x50e3d3(0x98c)](_0x321988[_0x50e3d3(0x310)]),alert(_0x32cc48);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x9cf)]=Game_Temp[_0x1f5c57(0x605)][_0x1f5c57(0xad2)],Game_Temp[_0x1f5c57(0x605)]['requestAnimation']=function(_0x19133d,_0x1e9bfc,_0x3a162f){const _0x3bcb73=_0x1f5c57;_0x19133d=_0x19133d[_0x3bcb73(0x6ae)]((_0x5192e4,_0xb0bd60,_0x5000e8)=>_0x5000e8['indexOf'](_0x5192e4)===_0xb0bd60);SceneManager[_0x3bcb73(0x2ba)]()&&SceneManager[_0x3bcb73(0x1d4)]()&&(_0x3a162f=!_0x3a162f);VisuMZ[_0x3bcb73(0x6b3)][_0x3bcb73(0x9cf)][_0x3bcb73(0x5a5)](this,_0x19133d,_0x1e9bfc,_0x3a162f);if(SceneManager[_0x3bcb73(0x2ba)]()){if(_0x3bcb73(0x731)!=='MWBvS'){if(!_0x5c2130[_0x3bcb73(0x963)](_0x4b869f))return!![];}else BattleManager[_0x3bcb73(0x4d6)][_0x3bcb73(0x417)]();}},Game_Temp['prototype'][_0x1f5c57(0xab7)]=function(_0x4a1deb){const _0x41bc52=_0x1f5c57;this[_0x41bc52(0xb3c)]=_0x4a1deb;},Game_Temp[_0x1f5c57(0x605)]['getLastPluginCommandInterpreter']=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp['prototype'][_0x1f5c57(0xb9c)]=function(){const _0x30074b=_0x1f5c57;this[_0x30074b(0x6bf)]=undefined;},Game_Temp[_0x1f5c57(0x605)][_0x1f5c57(0x4f2)]=function(_0x1ab60d){const _0x39b6c9=_0x1f5c57;$gameMap&&$dataMap&&$dataMap[_0x39b6c9(0x9bc)]&&(_0x39b6c9(0xb5e)===_0x39b6c9(0xb5e)?this[_0x39b6c9(0x5f3)]($dataMap['note']):_0x39bd70['setup'](0x0));const _0x33ac17=$dataTroops[_0x1ab60d];if(_0x33ac17){let _0x671ff2=DataManager[_0x39b6c9(0x542)](_0x33ac17['id']);this[_0x39b6c9(0x5f3)](_0x671ff2);}},Game_Temp[_0x1f5c57(0x605)][_0x1f5c57(0x5f3)]=function(_0x454dd1){const _0x243a19=_0x1f5c57;if(!_0x454dd1)return;if(_0x454dd1[_0x243a19(0x7a1)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){if(_0x243a19(0x300)===_0x243a19(0x75e))_0x513b47(_0x243a19(0x27a)['format'](_0x384651,_0xd4dbd9)),_0x2ff474[_0x243a19(0xa14)]();else{const _0x3380bd=String(RegExp['$1']);if(_0x3380bd[_0x243a19(0x7a1)](/DEFAULT/i))this[_0x243a19(0x6bf)]=_0x243a19(0x3b1);else{if(_0x3380bd['match'](/LIST/i)){if(_0x243a19(0x333)===_0x243a19(0x35d)){if(!_0x2949c9['isSceneBattle']())return;if(!_0x5fc579[_0x243a19(0x908)])return;_0x3d796b[_0x243a19(0xa1c)](_0x453b64,_0x3f30bd);const _0x524748=_0x88f54c[_0x243a19(0x78b)](),_0x33ec06=_0x32ec34[_0x243a19(0x921)](_0x58cc13[_0x243a19(0x3cb)]),_0x750fd=_0x1b911[_0x243a19(0x53a)];_0x344523[_0x243a19(0xaa1)](_0x33ec06,_0x1bb1f5[_0x243a19(0xacb)],_0x3518ad[_0x243a19(0xa64)]);if(_0x750fd)_0x524748[_0x243a19(0x924)]('battleCamera');}else this[_0x243a19(0x6bf)]=_0x243a19(0xc47);}else{if(_0x3380bd[_0x243a19(0x7a1)](/XP/i)){if('fLXME'===_0x243a19(0x9d4))return _0x477d7b['BattleCore'][_0x243a19(0xbba)][_0x243a19(0x941)]['OverallFormulaJS']['call'](this,_0x68f4f1,_0x18164d);else this[_0x243a19(0x6bf)]='xp';}else{if(_0x3380bd[_0x243a19(0x7a1)](/PORTRAIT/i))this[_0x243a19(0x6bf)]=_0x243a19(0x6ea);else{if(_0x3380bd[_0x243a19(0x7a1)](/BORDER/i))this[_0x243a19(0x6bf)]=_0x243a19(0x69e);else{if(_0x3380bd[_0x243a19(0x7a1)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(_0x243a19(0x90b)!==_0x243a19(0x554)){if(Imported[_0x243a19(0xb02)])this['_forcedBattleLayout']=_0x243a19(0x5d6);else{if('eYqmo'===_0x243a19(0x22f)){const _0x3a72e1=_0x3aae8a['$1'],_0x5af930=_0x243a19(0xbbd)[_0x243a19(0x98c)](_0x3a72e1),_0x5e9fa7=_0xcec749[_0x243a19(0x6b3)][_0x243a19(0x60b)](_0x2496a6,_0x1c0491);_0x1e679c[_0x243a19(0x6b3)]['JS'][_0x5e9fa7]=new _0x4ba72e(_0x5af930);}else this[_0x243a19(0x6bf)]='default';}}else{if(!_0x276a50[_0x243a19(0x8af)]())return![];if(!_0x1cdef0[_0x243a19(0x543)]())return![];if(!_0xd6d11d[_0x243a19(0x38f)]())return![];return _0x4c0152[_0x243a19(0x6b3)][_0x243a19(0xbba)][_0x243a19(0xbaa)][_0x243a19(0x5d7)];}}}}}}}}}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x728)]=Game_System[_0x1f5c57(0x605)]['initialize'],Game_System[_0x1f5c57(0x605)][_0x1f5c57(0x38c)]=function(){const _0x114e2d=_0x1f5c57;VisuMZ[_0x114e2d(0x6b3)][_0x114e2d(0x728)]['call'](this),this['initBattleCore']();},Game_System['prototype'][_0x1f5c57(0x31f)]=function(){const _0x23dd2f=_0x1f5c57;this[_0x23dd2f(0x3f7)]=this[_0x23dd2f(0x3f7)]||[];},Game_System[_0x1f5c57(0x605)][_0x1f5c57(0xbae)]=function(){const _0x5af04a=_0x1f5c57;if(this[_0x5af04a(0x3f7)]===undefined)this['initBattleCore']();return this[_0x5af04a(0x3f7)];},Game_System[_0x1f5c57(0x605)][_0x1f5c57(0xbfe)]=function(_0x1220e6){const _0x5e4631=_0x1f5c57;if(this[_0x5e4631(0x3f7)]===undefined)this['initBattleCore']();if(!_0x1220e6)return;if(this[_0x5e4631(0x3f7)][_0x5e4631(0x60e)](_0x1220e6))return;this[_0x5e4631(0x3f7)][_0x5e4631(0x5af)](_0x1220e6),this[_0x5e4631(0x3f7)][_0x5e4631(0x9b5)]((_0x24e7b9,_0x4d6ebb)=>_0x24e7b9-_0x4d6ebb);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x6bc)]=Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x47f)],Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x47f)]=function(_0x438297){const _0x5834c8=_0x1f5c57,_0x5d480f=this[_0x5834c8(0x3b0)](),_0x3f6a58=this['stateMotionIndex']();VisuMZ['BattleCore'][_0x5834c8(0x6bc)][_0x5834c8(0x5a5)](this,_0x438297);this['isEnemy']()&&_0x5d480f&&this[_0x5834c8(0x750)]()&&(_0x5834c8(0x388)===_0x5834c8(0x895)?_0x262eaf['BattleCore'][_0x5834c8(0x46f)][_0x5834c8(0x5a5)](this,_0x5af403):(this[_0x5834c8(0x693)]=!this[_0x5834c8(0xa52)](),$gameSystem[_0x5834c8(0xbfe)](this[_0x5834c8(0x74b)]())));if(SceneManager[_0x5834c8(0x2ba)]()&&_0x3f6a58!==this[_0x5834c8(0x307)]()){if('sIVst'!==_0x5834c8(0xae9)){if(this[_0x5834c8(0x4b2)]()){if(_0x5834c8(0x6ba)!==_0x5834c8(0x6ba)){const _0x3f8c0b=_0x45f529[_0x266f8d[_0x5834c8(0x3a1)]];if(_0x3f8c0b&&!_0x3f411d[_0x5834c8(0x60e)](_0x3f8c0b))_0x52679f[_0x5834c8(0x5af)](_0x3f8c0b);}else this['battler']()[_0x5834c8(0x485)]();}}else this[_0x5834c8(0x337)]+=0x10;}},Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0xa52)]=function(){const _0x2d0891=_0x1f5c57;return $gameSystem[_0x2d0891(0xbae)]()['includes'](this[_0x2d0891(0x28f)]);},VisuMZ[_0x1f5c57(0x6b3)]['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x495)],Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x495)]=function(_0x46b14f){const _0x3171e4=_0x1f5c57;VisuMZ[_0x3171e4(0x6b3)][_0x3171e4(0x2e1)][_0x3171e4(0x5a5)](this,_0x46b14f),this[_0x3171e4(0x951)]()&&_0x46b14f===this[_0x3171e4(0x50c)]()&&this[_0x3171e4(0x3b0)]()&&(this['_visualHpGauge_JustDied']=![]),!this[_0x3171e4(0x3a5)]&&!this['_tempBattler']&&SceneManager['isSceneBattle']()&&(_0x3171e4(0x767)==='CaVGt'?(_0x411698=_0x17eb06+_0x4c568f[_0x3171e4(0x5f2)]/0x2-0x4,_0x39aeac=_0x560e81-_0x1e9983[_0x3171e4(0xa19)]/0x2):this['requestMotionRefresh']());},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x47e)]=Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x8e1)],Game_Action[_0x1f5c57(0x605)]['clear']=function(){const _0x381f56=_0x1f5c57;VisuMZ[_0x381f56(0x6b3)][_0x381f56(0x47e)][_0x381f56(0x5a5)](this),this[_0x381f56(0xb63)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x381f56(0xc4e)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x381f56(0x4b3)]=_0x381f56(0x3b1);},Game_Action['prototype'][_0x1f5c57(0xb22)]=function(_0x17235c,_0x355f95){const _0x48d39a=_0x1f5c57;return VisuMZ['BattleCore']['Settings'][_0x48d39a(0x941)][_0x48d39a(0x98f)][_0x48d39a(0x5a5)](this,_0x17235c,_0x355f95);},Game_Action['prototype'][_0x1f5c57(0x625)]=function(_0x15879b,_0xd60f54){const _0x3bf8cd=_0x1f5c57;return VisuMZ[_0x3bf8cd(0x6b3)][_0x3bf8cd(0xbba)][_0x3bf8cd(0x941)][_0x3bf8cd(0x663)][_0x3bf8cd(0x5a5)](this,_0x15879b,_0xd60f54);},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x52b)]=function(_0x232b18,_0x109448){const _0x43519e=_0x1f5c57;return VisuMZ[_0x43519e(0x6b3)]['Settings']['Damage'][_0x43519e(0xc8c)]['call'](this,_0x232b18,_0x109448);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xafe)]=Game_Action[_0x1f5c57(0x605)]['itemHit'],Game_Action[_0x1f5c57(0x605)]['itemHit']=function(_0x441cfd){const _0x5cfc14=_0x1f5c57,_0x2a91d8=this[_0x5cfc14(0x20c)]()['note'];if(_0x2a91d8[_0x5cfc14(0x7a1)](/<ALWAYS HIT>/i))return _0x5cfc14(0x4cb)!==_0x5cfc14(0x4cb)?this[_0x5cfc14(0x1e9)]():0x1;else{if(_0x2a91d8['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{if(_0x5cfc14(0x856)===_0x5cfc14(0x48c))_0x4eec3f=_0x31ed1f(_0x246d75['$1']),_0x46aa25=_0x29c1f2(_0x2a9199['$2']);else{let _0xc6cffe=VisuMZ[_0x5cfc14(0x6b3)][_0x5cfc14(0xafe)][_0x5cfc14(0x5a5)](this,_0x441cfd);return _0xc6cffe=this[_0x5cfc14(0xc4e)][_0x5cfc14(0x460)]*_0xc6cffe+this[_0x5cfc14(0xc4e)][_0x5cfc14(0x928)],_0xc6cffe;}}}},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x67a)]=function(_0x1c7e75){const _0x35a30d=_0x1f5c57;if(!this['item']()[_0x35a30d(0x84b)][_0x35a30d(0x2d9)])return 0x0;let _0x2ac9c0=VisuMZ[_0x35a30d(0x6b3)]['Settings'][_0x35a30d(0x941)][_0x35a30d(0x5ce)][_0x35a30d(0x5a5)](this,_0x1c7e75);return _0x2ac9c0=this[_0x35a30d(0xc4e)][_0x35a30d(0x34e)]*_0x2ac9c0+this[_0x35a30d(0xc4e)]['criticalHitFlat'],_0x2ac9c0;},Game_Action['prototype'][_0x1f5c57(0xc1e)]=function(_0x5aae9a){const _0x259890=_0x1f5c57;return _0x5aae9a=VisuMZ['BattleCore'][_0x259890(0xbba)]['Damage'][_0x259890(0x734)][_0x259890(0x5a5)](this,_0x5aae9a),_0x5aae9a=this[_0x259890(0xc4e)][_0x259890(0x9fa)]*_0x5aae9a+this[_0x259890(0xc4e)][_0x259890(0x9be)],_0x5aae9a;},VisuMZ['BattleCore'][_0x1f5c57(0x48f)]=Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x23c)],Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x23c)]=function(_0x203e54){const _0x1f6eef=_0x1f5c57;if(this['_customDamageFormula']!==_0x1f6eef(0x3b1))return this[_0x1f6eef(0xb9d)](_0x203e54);else{if(DataManager[_0x1f6eef(0x7ae)](this['item']())===_0x1f6eef(0x81d)){if(_0x1f6eef(0x50e)==='mBNoQ'){if(_0x26b539[_0x1f6eef(0x2e9)]()[_0x1f6eef(0x26d)]>0x0)return!![];this[_0x1f6eef(0x651)]='';}else return VisuMZ['BattleCore'][_0x1f6eef(0x48f)][_0x1f6eef(0x5a5)](this,_0x203e54);}else return this[_0x1f6eef(0x4c1)](_0x203e54);}},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x29e)]=function(_0x2b1287){const _0x4914d0=_0x1f5c57;this[_0x4914d0(0x4b3)]=_0x2b1287;},Game_Action[_0x1f5c57(0x605)]['customDamageFormula']=function(_0x2b3aa5){const _0xd952b1=_0x1f5c57,_0x71c6b=this[_0xd952b1(0x20c)](),_0x1f406f=_0x71c6b[_0xd952b1(0x84b)]['formula'];_0x71c6b[_0xd952b1(0x84b)][_0xd952b1(0x60c)]=this[_0xd952b1(0x4b3)];let _0x17fb0f=VisuMZ[_0xd952b1(0x6b3)][_0xd952b1(0x48f)][_0xd952b1(0x5a5)](this,_0x2b3aa5);return _0x71c6b[_0xd952b1(0x84b)]['formula']=_0x1f406f,_0x17fb0f;},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x31e)]=function(){const _0x60f710=_0x1f5c57;if(this[_0x60f710(0x20c)]()[_0x60f710(0x9bc)][_0x60f710(0x7a1)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x45cf8a=String(RegExp['$1'])['toUpperCase']()[_0x60f710(0xc8b)]();return _0x45cf8a;}return _0x60f710(0x81d);},Game_Action['prototype'][_0x1f5c57(0x4c1)]=function(_0x2f326a){const _0x337093=_0x1f5c57,_0x4ca678=DataManager[_0x337093(0x7ae)](this[_0x337093(0x20c)]()),_0x255e41=VisuMZ[_0x337093(0x2e2)][_0x4ca678];try{return _0x255e41[_0x337093(0x369)]['call'](this,_0x2f326a);}catch(_0x346f33){if(_0x337093(0x5cb)===_0x337093(0x5cb)){if($gameTemp[_0x337093(0x8da)]())console[_0x337093(0x409)](_0x346f33);return VisuMZ[_0x337093(0x6b3)][_0x337093(0x48f)][_0x337093(0x5a5)](this);}else this[_0x337093(0x962)]['x']=0x0,this['_borderPortraitTargetX']=_0xf0fd8f[_0x337093(0x702)](_0x236a28[_0x337093(0xac5)]/0x2);}},Game_Action[_0x1f5c57(0x605)]['applyArmorModifiers']=function(_0x2600fc,_0x5f497e){const _0x26dae0=_0x1f5c57;if(this[_0x26dae0(0x1dd)]())return _0x5f497e;const _0x5caf5c=this[_0x26dae0(0x83e)](),_0x26a852=_0x2600fc;let _0x4b52a4=[],_0x2472bd=[];_0x4b52a4['push'](this[_0x26dae0(0xb63)][_0x26dae0(0x47c)],this['_armorPenetration'][_0x26dae0(0x600)]),_0x2472bd[_0x26dae0(0x5af)](this[_0x26dae0(0xb63)]['arPenRate'],this[_0x26dae0(0xb63)]['arRedRate']);const _0x55d2b6=this[_0x26dae0(0x8af)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x34f975=this[_0x26dae0(0x8af)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x14bcf7=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x225fe2=this[_0x26dae0(0x8af)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x4b52a4=_0x4b52a4[_0x26dae0(0xba4)](_0x26a852[_0x26dae0(0x948)]()[_0x26dae0(0x6f1)](_0x154704=>_0x154704&&_0x154704[_0x26dae0(0x9bc)][_0x26dae0(0x7a1)](_0x55d2b6)?Number(RegExp['$1']):0x0)),_0x2472bd=_0x2472bd[_0x26dae0(0xba4)](_0x26a852[_0x26dae0(0x948)]()[_0x26dae0(0x6f1)](_0xed505f=>_0xed505f&&_0xed505f[_0x26dae0(0x9bc)]['match'](_0x34f975)?Number(RegExp['$1'])/0x64:0x0)),_0x4b52a4=_0x4b52a4[_0x26dae0(0xba4)](_0x5caf5c['traitObjects']()[_0x26dae0(0x6f1)](_0x37fbf8=>_0x37fbf8&&_0x37fbf8[_0x26dae0(0x9bc)][_0x26dae0(0x7a1)](_0x14bcf7)?Number(RegExp['$1']):0x0)),_0x2472bd=_0x2472bd[_0x26dae0(0xba4)](_0x5caf5c[_0x26dae0(0x948)]()['map'](_0x17e085=>_0x17e085&&_0x17e085[_0x26dae0(0x9bc)][_0x26dae0(0x7a1)](_0x225fe2)?Number(RegExp['$1'])/0x64:0x0)),this[_0x26dae0(0x20c)]()['note'][_0x26dae0(0x7a1)](_0x14bcf7)&&_0x4b52a4[_0x26dae0(0x5af)](Number(RegExp['$1'])),this[_0x26dae0(0x20c)]()[_0x26dae0(0x9bc)][_0x26dae0(0x7a1)](_0x225fe2)&&_0x2472bd['push'](Number(RegExp['$1'])),_0x5f497e=_0x4b52a4[_0x26dae0(0x2af)]((_0x5b0d4f,_0x133a0e)=>_0x5b0d4f-_0x133a0e,_0x5f497e),_0x5f497e>0x0&&(_0x26dae0(0x461)!==_0x26dae0(0x723)?_0x5f497e=_0x2472bd[_0x26dae0(0x2af)]((_0x13539c,_0x59fd9f)=>_0x13539c*(0x1-_0x59fd9f),_0x5f497e):_0x3a29bb[_0x26dae0(0x6b3)]['JS'][_0x48cb07][_0x26dae0(0x5a5)](this,this[_0x26dae0(0x83e)](),this['subject'](),_0x23d1c4,_0x45c5fe)),_0x5f497e;},VisuMZ[_0x1f5c57(0x6b3)]['Game_Action_executeDamage']=Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x436)],Game_Action['prototype'][_0x1f5c57(0x436)]=function(_0x597854,_0x58c50c){const _0x3a319d=_0x1f5c57;_0x58c50c=_0x58c50c*this[_0x3a319d(0xc4e)][_0x3a319d(0x498)],_0x58c50c+=this[_0x3a319d(0xc4e)][_0x3a319d(0x3d4)]*(_0x58c50c>=0x0?0x1:-0x1),_0x58c50c=this[_0x3a319d(0xacf)](_0x3a319d(0xb2c),_0x597854,_0x58c50c,![]),_0x58c50c=this[_0x3a319d(0x5ae)](_0x58c50c),_0x58c50c=Math[_0x3a319d(0x93c)](_0x58c50c),this[_0x3a319d(0x7fb)]=_0x58c50c,this[_0x3a319d(0x942)]=this[_0x3a319d(0x942)]||0x0,this['_totalValue']+=_0x58c50c,VisuMZ[_0x3a319d(0x6b3)][_0x3a319d(0x84c)][_0x3a319d(0x5a5)](this,_0x597854,_0x58c50c),this[_0x3a319d(0xacf)](_0x3a319d(0x4e6),_0x597854,_0x58c50c,!![]);},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x5ae)]=function(_0x2258bd){if(this['isBypassDamageCap']())return _0x2258bd;return _0x2258bd=this['applySoftDamageCap'](_0x2258bd),_0x2258bd=this['applyHardDamageCap'](_0x2258bd),_0x2258bd;},Game_Action['prototype'][_0x1f5c57(0x989)]=function(){const _0x1a75ea=_0x1f5c57,_0x556169=/<BYPASS DAMAGE CAP>/i;if(this[_0x1a75ea(0x20c)]()['note'][_0x1a75ea(0x7a1)](_0x556169))return!![];if(this['subject']()['traitObjects']()[_0x1a75ea(0x9d3)](_0x4900cf=>_0x4900cf&&_0x4900cf[_0x1a75ea(0x9bc)]['match'](_0x556169)))return!![];return!VisuMZ['BattleCore'][_0x1a75ea(0xbba)][_0x1a75ea(0x941)][_0x1a75ea(0x5a9)];},Game_Action[_0x1f5c57(0x605)]['applySoftDamageCap']=function(_0x3e4c57){const _0x2e70b3=_0x1f5c57;if(!VisuMZ[_0x2e70b3(0x6b3)][_0x2e70b3(0xbba)][_0x2e70b3(0x941)]['EnableSoftCap'])return _0x3e4c57;const _0x16d393=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x2e70b3(0x20c)]()[_0x2e70b3(0x9bc)][_0x2e70b3(0x7a1)](_0x16d393))return _0x3e4c57;if(this[_0x2e70b3(0x83e)]()[_0x2e70b3(0x948)]()[_0x2e70b3(0x9d3)](_0x57a632=>_0x57a632&&_0x57a632[_0x2e70b3(0x9bc)][_0x2e70b3(0x7a1)](_0x16d393))){if(_0x2e70b3(0x55d)==='OXUEM')return _0x3e4c57;else{_0x2e8689+=_0x54c652['x']-this['damageOffsetX']();const _0x1c98dc=_0x511d30['lineHeight']()*0x3/0x4;_0x482941=_0x4db4b7['y']+_0x1c98dc,_0x664390=_0x1ffa30[_0x2e70b3(0xaea)](_0x14056b,_0xaf89e2['y']+this['y']-this[_0x2e70b3(0x53d)]+_0x1c98dc);}}const _0x124c50=_0x3e4c57<0x0?-0x1:0x1;_0x3e4c57=Math[_0x2e70b3(0x938)](_0x3e4c57);let _0x4b6f41=this[_0x2e70b3(0x83e)]()[_0x2e70b3(0x569)]();this['item']()['note']['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&('EHMdV'!=='KKkOZ'?_0x4b6f41+=Number(RegExp['$1'])/0x64:(_0x52dc01[_0x2e70b3(0x6b3)][_0x2e70b3(0x8b3)][_0x2e70b3(0x5a5)](this,_0x213939),this[_0x2e70b3(0x56a)](_0x524c3b)));_0x4b6f41=_0x4b6f41[_0x2e70b3(0x516)](0.01,0x1);const _0x10847a=this[_0x2e70b3(0x347)](),_0x509be7=_0x4b6f41*_0x10847a;if(_0x3e4c57>_0x509be7&&_0x10847a>_0x509be7){_0x3e4c57-=_0x509be7;const _0x12fffe=VisuMZ[_0x2e70b3(0x6b3)][_0x2e70b3(0xbba)][_0x2e70b3(0x941)][_0x2e70b3(0x875)],_0x24ea77=Math['max'](0x1-_0x3e4c57/((_0x10847a-_0x509be7)*_0x12fffe+_0x3e4c57),0.01);_0x3e4c57*=_0x24ea77,_0x3e4c57+=_0x509be7;}return _0x3e4c57*_0x124c50;},Game_Action['prototype'][_0x1f5c57(0x347)]=function(){const _0x4827c0=_0x1f5c57;return this[_0x4827c0(0x20c)]()['note'][_0x4827c0(0x7a1)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this['subject']()[_0x4827c0(0x72f)]();},Game_Action[_0x1f5c57(0x605)]['applyHardDamageCap']=function(_0x3feda6){const _0x5a7361=_0x1f5c57;console[_0x5a7361(0x409)](_0x3feda6);let _0x3da8f5=this[_0x5a7361(0x347)]();return _0x3feda6['clamp'](-_0x3da8f5,_0x3da8f5);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x766)]=Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x64c)],Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x64c)]=function(_0x2bdfa4){const _0x269259=_0x1f5c57;this[_0x269259(0xacf)]('PreApply%1JS',_0x2bdfa4,0x0,!![]),VisuMZ['BattleCore']['Game_Action_apply']['call'](this,_0x2bdfa4),this['applyBattleCoreJS'](_0x269259(0x539),_0x2bdfa4,this[_0x269259(0x7fb)]||0x0,!![]),this['applyResultSwitches'](_0x2bdfa4);},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0xacf)]=function(_0x3bf229,_0x367068,_0x33fd53,_0x5750d6){const _0x21d897=_0x1f5c57;if(this[_0x21d897(0x9b2)]||this['_tempActor'])return;_0x33fd53=_0x33fd53||0x0;const _0x4c2a99=_0x33fd53,_0x4bc5be=VisuMZ[_0x21d897(0x6b3)][_0x21d897(0xbba)]['Mechanics'],_0x4bd1a8=_0x3bf229['format']('');if(_0x4bc5be[_0x4bd1a8]){_0x33fd53=_0x4bc5be[_0x4bd1a8][_0x21d897(0x5a5)](this,_0x33fd53,_0x367068);if(_0x5750d6)_0x33fd53=_0x4c2a99;}let _0x28b123=VisuMZ[_0x21d897(0x6b3)][_0x21d897(0x60b)](this[_0x21d897(0x20c)](),_0x3bf229[_0x21d897(0x98c)](''));if(VisuMZ[_0x21d897(0x6b3)]['JS'][_0x28b123]){if(_0x21d897(0x41f)==='FCqgD')this[_0x21d897(0x2c9)](_0x314d05,_0x3a685d['x'],_0x63cc51['y'],_0xd403b0);else{_0x33fd53=VisuMZ[_0x21d897(0x6b3)]['JS'][_0x28b123][_0x21d897(0x5a5)](this,this[_0x21d897(0x83e)](),_0x367068,this['item'](),_0x33fd53);if(_0x5750d6)_0x33fd53=_0x4c2a99;}}for(const _0x3625e9 of this[_0x21d897(0x83e)]()[_0x21d897(0x948)]()){if(!_0x3625e9)continue;_0x28b123=VisuMZ[_0x21d897(0x6b3)]['createKeyJS'](_0x3625e9,_0x3bf229[_0x21d897(0x98c)](_0x21d897(0x73d)));if(VisuMZ[_0x21d897(0x6b3)]['JS'][_0x28b123]){if(_0x21d897(0x2ef)!==_0x21d897(0x2ef)){this[_0x21d897(0x962)][_0x21d897(0x302)]=_0x119f67[_0x21d897(0x879)];return;}else{_0x33fd53=VisuMZ['BattleCore']['JS'][_0x28b123][_0x21d897(0x5a5)](this,this['subject'](),_0x367068,_0x3625e9,_0x33fd53);if(_0x5750d6)_0x33fd53=_0x4c2a99;}}}for(const _0x275450 of _0x367068['traitObjects']()){if(!_0x275450)continue;_0x28b123=VisuMZ[_0x21d897(0x6b3)][_0x21d897(0x60b)](_0x275450,_0x3bf229[_0x21d897(0x98c)](_0x21d897(0x905)));if(VisuMZ[_0x21d897(0x6b3)]['JS'][_0x28b123]){_0x33fd53=VisuMZ[_0x21d897(0x6b3)]['JS'][_0x28b123][_0x21d897(0x5a5)](this,this['subject'](),_0x367068,_0x275450,_0x33fd53);if(_0x5750d6)_0x33fd53=_0x4c2a99;}}return _0x33fd53;},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x785)]=function(_0x1d5b3c){const _0x4cc611=_0x1f5c57,_0x5bc816=this[_0x4cc611(0x942)]||0x0,_0x20ed33=VisuMZ[_0x4cc611(0x6b3)][_0x4cc611(0xbba)][_0x4cc611(0x92c)],_0x45acad=_0x1d5b3c[_0x4cc611(0x98c)]('');if(_0x20ed33[_0x45acad]){if(_0x4cc611(0xc15)==='UrrlG')_0x20ed33[_0x45acad]['call'](this,_0x5bc816);else{const _0x386694=_0x6fd30f[_0x550e5d];_0x386694?this['setup'](_0x386694[_0x4cc611(0xc47)],0x0):this[_0x4cc611(0x93f)]();}}let _0x278d3b=VisuMZ[_0x4cc611(0x6b3)][_0x4cc611(0x60b)](this[_0x4cc611(0x20c)](),_0x1d5b3c);VisuMZ['BattleCore']['JS'][_0x278d3b]&&VisuMZ[_0x4cc611(0x6b3)]['JS'][_0x278d3b][_0x4cc611(0x5a5)](this,this['subject'](),this[_0x4cc611(0x83e)](),this[_0x4cc611(0x20c)](),_0x5bc816);for(const _0x828a63 of this[_0x4cc611(0x83e)]()[_0x4cc611(0x948)]()){if(!_0x828a63)continue;_0x278d3b=VisuMZ[_0x4cc611(0x6b3)][_0x4cc611(0x60b)](_0x828a63,_0x1d5b3c),VisuMZ[_0x4cc611(0x6b3)]['JS'][_0x278d3b]&&VisuMZ[_0x4cc611(0x6b3)]['JS'][_0x278d3b]['call'](this,this['subject'](),this['subject'](),_0x828a63,_0x5bc816);}},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x4e0)]=function(){const _0x41a36d=_0x1f5c57;return VisuMZ[_0x41a36d(0x6b3)][_0x41a36d(0xbba)][_0x41a36d(0x92c)][_0x41a36d(0x68c)][_0x41a36d(0x5a5)](this);},Game_Action['prototype']['allowRandomSpeed']=function(){const _0x4e41eb=_0x1f5c57;return VisuMZ['BattleCore'][_0x4e41eb(0xbba)]['Mechanics'][_0x4e41eb(0x475)];},Game_Action['prototype'][_0x1f5c57(0x98b)]=function(){const _0x137626=_0x1f5c57;return this[_0x137626(0x20c)]()[_0x137626(0x9bc)][_0x137626(0x7a1)](/<JS TARGETS>/i);},Game_Action['prototype'][_0x1f5c57(0x7ff)]=function(){const _0x26e681=_0x1f5c57;if(!this[_0x26e681(0x452)]&&this[_0x26e681(0x83e)]()[_0x26e681(0x588)]())return![];if(this[_0x26e681(0x98b)]())return!![];return typeof this['item']()[_0x26e681(0x3f2)]===_0x26e681(0x76d);},VisuMZ['BattleCore'][_0x1f5c57(0xb48)]=Game_Action['prototype'][_0x1f5c57(0x38f)],Game_Action[_0x1f5c57(0x605)]['isForOpponent']=function(){const _0x476fe0=_0x1f5c57;if(this[_0x476fe0(0x7ff)]()&&!this[_0x476fe0(0x98b)]())return this[_0x476fe0(0x25e)]();else{if(_0x476fe0(0x6d7)===_0x476fe0(0x6d7))return VisuMZ[_0x476fe0(0x6b3)][_0x476fe0(0xb48)][_0x476fe0(0x5a5)](this);else _0x1cde32[_0x476fe0(0xad2)]([this],_0x2052d0,!!_0x3c6bb4);}},Game_Action[_0x1f5c57(0x605)]['isForOpponentBattleCore']=function(){const _0x3ba483=_0x1f5c57,_0x167307=this[_0x3ba483(0x20c)]()[_0x3ba483(0x3f2)];return _0x167307[_0x3ba483(0x7a1)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x5c1)]=Game_Action['prototype']['isForFriend'],Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x953)]=function(){const _0x3a5ae8=_0x1f5c57;return this[_0x3a5ae8(0x7ff)]()&&!this[_0x3a5ae8(0x98b)]()?this[_0x3a5ae8(0x8f2)]():VisuMZ['BattleCore']['Game_Action_isForFriend'][_0x3a5ae8(0x5a5)](this);},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x8f2)]=function(){const _0x11ec35=_0x1f5c57,_0x33f1b1=this[_0x11ec35(0x20c)]()['scope'];return _0x33f1b1[_0x11ec35(0x7a1)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ['BattleCore'][_0x1f5c57(0xa2b)]=Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x62b)],Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x62b)]=function(){const _0x1659c4=_0x1f5c57;if(this[_0x1659c4(0x7ff)]()&&!this[_0x1659c4(0x98b)]()){if(_0x1659c4(0x286)===_0x1659c4(0x286))return this[_0x1659c4(0x2a9)]();else{if(_0x4792c0[_0x1659c4(0xc49)][_0x1659c4(0xbcf)]()&&_0x33ed3d['_battler']['isEnemy']())return 0x1;else{if(_0x198974[_0x1659c4(0xc49)][_0x1659c4(0xbcf)]()&&_0x578cd1[_0x1659c4(0xc49)][_0x1659c4(0x951)]())return-0x1;}}}else return VisuMZ[_0x1659c4(0x6b3)]['Game_Action_isForRandom']['call'](this);},Game_Action['prototype'][_0x1f5c57(0x2a9)]=function(){const _0x2c3993=_0x1f5c57,_0xa3044e=this[_0x2c3993(0x20c)]()[_0x2c3993(0x3f2)];return _0xa3044e['match'](/(?:RAND|RANDOM)/i);},VisuMZ[_0x1f5c57(0x6b3)]['Game_Action_needsSelection']=Game_Action['prototype'][_0x1f5c57(0xbaf)],Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0xbaf)]=function(){const _0xa5d178=_0x1f5c57;if(this[_0xa5d178(0x7ff)]()&&!this[_0xa5d178(0x98b)]()){if('xKevr'!=='EHwdN')return this[_0xa5d178(0x7e1)]();else{let _0x132ab2=_0x43fd0c(_0x1310a9['$1'])['replace'](/,/g,'')[_0xa5d178(0x8b5)]()['trim']();_0x23044b[_0xa5d178(0x6b3)][_0xa5d178(0x3df)][_0x132ab2]=_0xd57b7d['id'];}}else return VisuMZ[_0xa5d178(0x6b3)][_0xa5d178(0x745)][_0xa5d178(0x5a5)](this);},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x7e1)]=function(){const _0x6be655=_0x1f5c57,_0x4fba31=this['item']()[_0x6be655(0x3f2)];if(_0x4fba31['match'](/RANDOM/i))return![];if(_0x4fba31[_0x6be655(0x7a1)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x4fba31[_0x6be655(0x7a1)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ['BattleCore'][_0x6be655(0x745)][_0x6be655(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x8e7)]=Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x38e)],Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x38e)]=function(){const _0x1f7bb3=_0x1f5c57;let _0x17af8f=[];if(this[_0x1f7bb3(0x7ff)]())_0x17af8f=this[_0x1f7bb3(0x56f)]();else{if(_0x1f7bb3(0x378)!==_0x1f7bb3(0x378)){const _0x34ffe5=this[_0x1f7bb3(0x85d)];this[_0x1f7bb3(0x77b)][_0x1f7bb3(0x9fb)](_0x34ffe5,_0x34ffe5),this['_cursorArea']['x']=_0x34ffe5-this[_0x1f7bb3(0x5d9)]['x'],this[_0x1f7bb3(0x77b)]['y']=_0x34ffe5-this[_0x1f7bb3(0x5d9)]['y'],this[_0x1f7bb3(0x5eb)]>0x0&&this['innerHeight']>0x0?this[_0x1f7bb3(0x77b)][_0x1f7bb3(0x3c0)]=this[_0x1f7bb3(0x3ca)]():this[_0x1f7bb3(0x77b)]['visible']=![];}else _0x17af8f=VisuMZ['BattleCore'][_0x1f7bb3(0x8e7)][_0x1f7bb3(0x5a5)](this);}return _0x17af8f=this[_0x1f7bb3(0xb0b)](_0x17af8f),_0x17af8f;},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x56f)]=function(){const _0x4353e8=_0x1f5c57;let _0x139e37=[];const _0x202d60=String(this[_0x4353e8(0x20c)]()[_0x4353e8(0x3f2)]),_0x3814a1=VisuMZ[_0x4353e8(0x6b3)][_0x4353e8(0x60b)](this['item'](),_0x4353e8(0x3cb));if(VisuMZ[_0x4353e8(0x6b3)]['JS'][_0x3814a1]){_0x139e37=VisuMZ[_0x4353e8(0x6b3)][_0x4353e8(0x8e7)][_0x4353e8(0x5a5)](this);const _0x17d58d=VisuMZ[_0x4353e8(0x6b3)][_0x4353e8(0x60b)](this[_0x4353e8(0x20c)](),_0x4353e8(0x3cb));return _0x139e37=VisuMZ[_0x4353e8(0x6b3)]['JS'][_0x17d58d][_0x4353e8(0x5a5)](this,this[_0x4353e8(0x83e)](),_0x139e37),this[_0x4353e8(0x97f)](_0x139e37);}if(_0x202d60[_0x4353e8(0x7a1)](/(\d+) RANDOM ANY/i)){if(_0x4353e8(0x336)==='OTnIM')_0x434739&&_0x3eb391[_0x4353e8(0xbcf)]()&&_0x1cc808['clearActiveWeaponSlot'](),this[_0x4353e8(0x68e)]();else{let _0x1c8eb5=Number(RegExp['$1']);while(_0x1c8eb5--){const _0x338068=Math['randomInt'](0x2)===0x0?this[_0x4353e8(0xb10)]():this['friendsUnit']();_0x139e37[_0x4353e8(0x5af)](_0x338068[_0x4353e8(0x259)]());}return this[_0x4353e8(0x97f)](_0x139e37);}}if(_0x202d60[_0x4353e8(0x7a1)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if('EWQmD'==='EWQmD'){let _0x3ad50b=Number(RegExp['$1']);while(_0x3ad50b--){_0x139e37[_0x4353e8(0x5af)](this[_0x4353e8(0xb10)]()[_0x4353e8(0x259)]());}return this[_0x4353e8(0x97f)](_0x139e37);}else this[_0x4353e8(0x3dd)]=![],_0x1e669e[_0x4353e8(0x6b3)][_0x4353e8(0x627)][_0x4353e8(0x5a5)](this);}if(_0x202d60['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x3661f5=Number(RegExp['$1']);while(_0x3661f5--){_0x139e37[_0x4353e8(0x5af)](this[_0x4353e8(0xa45)]()[_0x4353e8(0x259)]());}return this[_0x4353e8(0x97f)](_0x139e37);}if(_0x202d60[_0x4353e8(0x7a1)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0x4353e8(0x8d5)===_0x4353e8(0x8db)){if(this[_0x4353e8(0x1e9)]()!=='')return this['getBattlePortrait']();else{if(_0x477d92[_0x4353e8(0xa5f)]&&this[_0x4353e8(0x6e9)]()!=='')return this[_0x4353e8(0x6e9)]();}return'';}else return _0x139e37[_0x4353e8(0x5af)](...this[_0x4353e8(0xa45)]()[_0x4353e8(0x227)]()[_0x4353e8(0x6ae)](_0x5d1025=>_0x5d1025!==this[_0x4353e8(0x83e)]())),this[_0x4353e8(0x97f)](_0x139e37);}return VisuMZ[_0x4353e8(0x6b3)][_0x4353e8(0x8e7)][_0x4353e8(0x5a5)](this);},Game_Action['prototype'][_0x1f5c57(0xc8a)]=function(_0x30184f){const _0xd668b8=_0x1f5c57,_0x3025d8=[];for(let _0x59c4a2=0x0;_0x59c4a2<this[_0xd668b8(0x79a)]();_0x59c4a2++){_0x3025d8[_0xd668b8(0x5af)](_0x30184f[_0xd668b8(0x259)]());}return _0x3025d8;},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0xb0b)]=function(_0x13df33){const _0xbec277=_0x1f5c57;if(!this[_0xbec277(0x20c)]())return _0x13df33;const _0x367d7e=this['item']()[_0xbec277(0x9bc)];return _0x367d7e[_0xbec277(0x7a1)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x13df33[_0xbec277(0x665)](this[_0xbec277(0x83e)]()),_0x13df33;},VisuMZ[_0x1f5c57(0x6b3)]['Game_Action_itemEffectAddAttackState']=Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x5e0)],Game_Action['prototype'][_0x1f5c57(0x5e0)]=function(_0x3f23b7,_0x478a9d){const _0x37d791=_0x1f5c57;VisuMZ[_0x37d791(0x6b3)]['Game_Action_itemEffectAddAttackState'][_0x37d791(0x5a5)](this,_0x3f23b7,_0x478a9d);if(!_0x3f23b7[_0x37d791(0xa9b)]())return;for(const _0x3f5a9a of this[_0x37d791(0x83e)]()[_0x37d791(0x36e)]()){if(_0x3f5a9a===_0x3f23b7[_0x37d791(0x50c)]()){let _0x323ce7=_0x478a9d[_0x37d791(0x6ab)];_0x323ce7*=_0x3f23b7['stateRate'](_0x3f5a9a),_0x323ce7*=this[_0x37d791(0x83e)]()[_0x37d791(0x2f8)](_0x3f5a9a),_0x323ce7*=this[_0x37d791(0xc85)](_0x3f23b7);if(Math[_0x37d791(0x77f)]()<_0x323ce7){if(_0x37d791(0x71b)!==_0x37d791(0x71b)){if(!_0x313f6f)return 0x0;let _0x56cf56=0x0;const _0x46edad=_0x539b51[_0x37d791(0x9bc)];return _0x46edad[_0x37d791(0x7a1)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x56cf56+=_0x33a0fd(_0x2f5da7['$1'])),_0x46edad[_0x37d791(0x7a1)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x56cf56+=_0x1dc855(_0x52e84e['$2'])),_0x56cf56;}else _0x3f23b7[_0x37d791(0x34f)]=!![],this['makeSuccess'](_0x3f23b7);}}}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x463)]=Game_Action['prototype']['itemEffectAddNormalState'],Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x755)]=function(_0x28da52,_0x21b928){const _0x103645=_0x1f5c57;VisuMZ[_0x103645(0x6b3)][_0x103645(0x463)][_0x103645(0x5a5)](this,_0x28da52,_0x21b928);if(!_0x28da52[_0x103645(0xa9b)]())return;if(_0x21b928[_0x103645(0x5cc)]!==_0x28da52[_0x103645(0x50c)]())return;let _0x22bc0e=_0x21b928[_0x103645(0x6ab)];!this[_0x103645(0x1dd)]()&&(_0x22bc0e*=_0x28da52[_0x103645(0x3b5)](_0x21b928[_0x103645(0x5cc)]),_0x22bc0e*=this[_0x103645(0xc85)](_0x28da52)),Math['random']()<_0x22bc0e&&(_0x28da52['_deathStateApplied']=!![],this['makeSuccess'](_0x28da52));},VisuMZ[_0x1f5c57(0x6b3)]['Game_Action_applyGlobal']=Game_Action['prototype'][_0x1f5c57(0xb75)],Game_Action[_0x1f5c57(0x605)]['applyGlobal']=function(){const _0x2375a1=_0x1f5c57;VisuMZ[_0x2375a1(0x6b3)][_0x2375a1(0x2f4)][_0x2375a1(0x5a5)](this),this[_0x2375a1(0x523)](),this[_0x2375a1(0x3ef)]();},Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x523)]=function(){const _0x235823=_0x1f5c57;if(!SceneManager[_0x235823(0x2ba)]())return;const _0x59cbaf=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x30cc74=this[_0x235823(0x20c)]()[_0x235823(0x9bc)][_0x235823(0x7a1)](_0x59cbaf);if(_0x30cc74)for(const _0x188c24 of _0x30cc74){if(!_0x188c24)continue;_0x188c24[_0x235823(0x7a1)](_0x59cbaf);const _0x418092=String(RegExp['$1'])['split'](',')[_0x235823(0x6f1)](_0x20db9a=>String(_0x20db9a)[_0x235823(0xc8b)]()),_0x28b669=_0x418092[_0x235823(0x6f1)](_0x1de341=>DataManager['getCommonEventIdWithName'](_0x1de341));for(const _0x5421b9 of _0x28b669){const _0x214165=$dataCommonEvents[_0x5421b9];_0x214165&&$gameTemp['reserveCommonEvent'](_0x5421b9);}}},DataManager[_0x1f5c57(0x961)]=function(_0x4e963a){const _0x925d26=_0x1f5c57;_0x4e963a=_0x4e963a['toUpperCase']()[_0x925d26(0xc8b)](),this[_0x925d26(0xb4b)]=this['_commonEventIDs']||{};if(this[_0x925d26(0xb4b)][_0x4e963a])return this[_0x925d26(0xb4b)][_0x4e963a];for(const _0x1e34cb of $dataCommonEvents){if(_0x925d26(0x861)===_0x925d26(0x861)){if(!_0x1e34cb)continue;let _0x1079c6=_0x1e34cb[_0x925d26(0x310)];_0x1079c6=_0x1079c6[_0x925d26(0x6e6)](/\x1I\[(\d+)\]/gi,''),_0x1079c6=_0x1079c6[_0x925d26(0x6e6)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x1079c6[_0x925d26(0x8b5)]()['trim']()]=_0x1e34cb['id'];}else{if(!this[_0x925d26(0x828)])return;this[_0x925d26(0xc49)]!==this[_0x925d26(0x828)]['_battler']&&this['setup'](this['_linkedSprite']['_battler']);}}return this[_0x925d26(0xb4b)][_0x4e963a]||0x0;},Game_Action['prototype'][_0x1f5c57(0x3ef)]=function(){const _0x299f1b=_0x1f5c57;if(!SceneManager[_0x299f1b(0x2ba)]())return;const _0x4d5a34=VisuMZ[_0x299f1b(0x6b3)]['Settings']['Mechanics'];_0x4d5a34['SwitchCritical']&&(_0x299f1b(0x684)===_0x299f1b(0x684)?$gameSwitches[_0x299f1b(0x4ea)](_0x4d5a34['SwitchCritical'],![]):_0x1b9644[_0x299f1b(0x302)]=new _0x112711(this[_0x299f1b(0xac5)],this['height'])),_0x4d5a34[_0x299f1b(0x82d)]&&$gameSwitches[_0x299f1b(0x4ea)](_0x4d5a34[_0x299f1b(0x82d)],![]),_0x4d5a34[_0x299f1b(0xc6f)]&&$gameVariables[_0x299f1b(0x4ea)](_0x4d5a34[_0x299f1b(0xc6f)],0x0),_0x4d5a34[_0x299f1b(0x4ed)]&&$gameVariables[_0x299f1b(0x4ea)](_0x4d5a34[_0x299f1b(0x4ed)],0x0);},Game_Action[_0x1f5c57(0x605)]['applyResultSwitches']=function(_0x4981d9){const _0x247162=_0x1f5c57;if(!SceneManager[_0x247162(0x2ba)]())return;if(!_0x4981d9)return;const _0x5b1ebf=_0x4981d9[_0x247162(0x260)](),_0x243554=VisuMZ[_0x247162(0x6b3)][_0x247162(0xbba)][_0x247162(0x92c)];_0x243554[_0x247162(0x8c4)]&&_0x5b1ebf[_0x247162(0x2d9)]&&(_0x247162(0x422)===_0x247162(0x422)?$gameSwitches[_0x247162(0x4ea)](_0x243554[_0x247162(0x8c4)],!![]):(this[_0x247162(0x2a5)](),this[_0x247162(0x37f)]()));if(_0x243554['SwitchMissEvade']&&(_0x5b1ebf[_0x247162(0x431)]||_0x5b1ebf[_0x247162(0x4a1)])){if(_0x247162(0x818)===_0x247162(0x440)){const _0x249e01=_0x2ee8c3(_0x186335['$1']),_0x3ecafd=_0x1fc172[_0x247162(0x6b3)]['createKeyJS'](_0x7f639b,'CommandVisible');_0x4367fd[_0x247162(0x6b3)][_0x247162(0x9d6)](_0x249e01,_0x3ecafd);}else $gameSwitches[_0x247162(0x4ea)](_0x243554['SwitchMissEvade'],!![]);}if(_0x243554[_0x247162(0xc6f)]){let _0x1a4662=$gameVariables[_0x247162(0x963)](_0x243554[_0x247162(0xc6f)]);_0x5b1ebf['hpDamage']>0x0&&(_0x1a4662+=Math[_0x247162(0x938)](_0x5b1ebf[_0x247162(0xc11)])),$gameVariables['setValue'](_0x243554[_0x247162(0xc6f)],_0x1a4662);}if(_0x243554[_0x247162(0x4ed)]){if(_0x247162(0x33e)===_0x247162(0x239))_0x4b8e76*=-0x1,_0x6d1c60*=-0x1;else{let _0x4bd964=$gameVariables[_0x247162(0x963)](_0x243554[_0x247162(0x4ed)]);_0x5b1ebf[_0x247162(0xc11)]<0x0&&('fZWnw'===_0x247162(0x3de)?(_0x143f4b[_0x247162(0x6b3)][_0x247162(0x7df)][_0x247162(0x5a5)](this,_0x3f254d),this[_0x247162(0x68e)]()):_0x4bd964+=Math[_0x247162(0x938)](_0x5b1ebf[_0x247162(0xc11)])),$gameVariables['setValue'](_0x243554['VariableHeal'],_0x4bd964);}}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x3ba)]=Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x6c5)],Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x6c5)]=function(){const _0x424f75=_0x1f5c57;VisuMZ[_0x424f75(0x6b3)][_0x424f75(0x3ba)][_0x424f75(0x5a5)](this),this[_0x424f75(0x584)]();},Game_BattlerBase[_0x1f5c57(0x605)]['initMembersBattleCore']=function(){const _0x54d93e=_0x1f5c57;this[_0x54d93e(0x6c2)]=![];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x9ff)]=Game_BattlerBase['prototype'][_0x1f5c57(0xba7)],Game_BattlerBase[_0x1f5c57(0x605)]['refresh']=function(){const _0xa5d0d8=_0x1f5c57;this[_0xa5d0d8(0xa99)]={},VisuMZ[_0xa5d0d8(0x6b3)][_0xa5d0d8(0x9ff)]['call'](this);},Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x7ef)]=function(_0x1baecc){const _0x3f184b=_0x1f5c57;return this[_0x3f184b(0xa99)]=this[_0x3f184b(0xa99)]||{},this[_0x3f184b(0xa99)][_0x1baecc]!==undefined;},Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x72f)]=function(){const _0x17bc8f=_0x1f5c57;if(this[_0x17bc8f(0xa99)][_0x17bc8f(0x72f)]!==undefined)return this['_cache']['hardDamageCap'];const _0x183fb5=/<DAMAGE CAP:[ ](\d+)>/i,_0x44cb95=this['traitObjects']()[_0x17bc8f(0x6f1)](_0x435033=>_0x435033&&_0x435033[_0x17bc8f(0x9bc)][_0x17bc8f(0x7a1)](_0x183fb5)?Number(RegExp['$1']):0x0);let _0x26b2aa=_0x44cb95[_0x17bc8f(0x9fe)]>0x0?Math['max'](..._0x44cb95):0x0;if(_0x26b2aa<=0x0)_0x26b2aa=VisuMZ[_0x17bc8f(0x6b3)][_0x17bc8f(0xbba)][_0x17bc8f(0x941)]['DefaultHardCap'];return this[_0x17bc8f(0xa99)][_0x17bc8f(0x72f)]=_0x26b2aa,this[_0x17bc8f(0xa99)][_0x17bc8f(0x72f)];},Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x569)]=function(){const _0x26ee9a=_0x1f5c57;if(this[_0x26ee9a(0xa99)]['softDamageCap']!==undefined)return this[_0x26ee9a(0xa99)][_0x26ee9a(0x96c)];let _0x564832=VisuMZ[_0x26ee9a(0x6b3)][_0x26ee9a(0xbba)][_0x26ee9a(0x941)][_0x26ee9a(0xbec)];const _0x36efc6=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x3071a3=this[_0x26ee9a(0x948)]()[_0x26ee9a(0x6f1)](_0x21462b=>_0x21462b&&_0x21462b[_0x26ee9a(0x9bc)][_0x26ee9a(0x7a1)](_0x36efc6)?Number(RegExp['$1'])/0x64:0x0);return _0x564832=_0x3071a3[_0x26ee9a(0x2af)]((_0x240175,_0x4f438a)=>_0x240175+_0x4f438a,_0x564832),this['_cache'][_0x26ee9a(0x96c)]=_0x564832,this[_0x26ee9a(0xa99)]['softDamageCap']['clamp'](0.01,0x1);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x7a0)]=Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x732)],Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x732)]=function(){const _0x5c86d9=_0x1f5c57;VisuMZ[_0x5c86d9(0x6b3)][_0x5c86d9(0x7a0)][_0x5c86d9(0x5a5)](this),SceneManager['isSceneBattle']()&&this['requestMotion']('dead');},Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x4b2)]=function(){const _0x5ac471=_0x1f5c57;if(!SceneManager[_0x5ac471(0x2ba)]())return null;if(!SceneManager[_0x5ac471(0x831)][_0x5ac471(0x4d6)])return null;return SceneManager[_0x5ac471(0x831)]['_spriteset'][_0x5ac471(0x5ab)](this);},Game_BattlerBase['prototype'][_0x1f5c57(0x481)]=function(){const _0x15d41e=_0x1f5c57;return VisuMZ[_0x15d41e(0x6b3)]['Settings']['Actor'][_0x15d41e(0xc81)];},Game_BattlerBase['prototype'][_0x1f5c57(0xa7c)]=function(){const _0x5ba130=_0x1f5c57;return VisuMZ['BattleCore'][_0x5ba130(0xbba)][_0x5ba130(0x1df)]['AnchorY'];},Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x57a)]=function(){const _0x3799c4=_0x1f5c57;if(this['isActor']&&this[_0x3799c4(0xbcf)]())return VisuMZ[_0x3799c4(0x6b3)][_0x3799c4(0xbba)][_0x3799c4(0x1df)]['Shadow'];else{if(_0x3799c4(0x5c4)===_0x3799c4(0x7ca)){if(!_0x565501['isSceneBattle']())return;_0x593472[_0x3799c4(0xa1c)](_0xa1d8bc,_0x5423cb);const _0x56b94d=_0x1473a8[_0x3799c4(0x4fe)];_0x3a2012[_0x3799c4(0x831)][_0x3799c4(0x709)](_0x56b94d);}else return VisuMZ[_0x3799c4(0x6b3)][_0x3799c4(0xbba)][_0x3799c4(0xa0b)]['Shadow'];}},Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0xb44)]=function(){return!![];},Game_BattlerBase['prototype'][_0x1f5c57(0x720)]=function(){return 0x0;},Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0xb30)]=function(){return 0x0;},Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x840)]=function(_0x37d528){const _0x52ee2a=_0x1f5c57;if(!_0x37d528)return 0x0;let _0x36fb35=0x0;const _0x2828e1=_0x37d528[_0x52ee2a(0x9bc)];if(_0x2828e1[_0x52ee2a(0x7a1)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)){if('RKORi'===_0x52ee2a(0xb33)){this['_flashColor']=_0x14c0d0[_0x52ee2a(0x31d)]||[0x0,0x0,0x0,0x0],this[_0x52ee2a(0x83d)]=_0x1779f9[_0x52ee2a(0x215)](this[_0x52ee2a(0x83d)]),this[_0x52ee2a(0xb7c)]=_0x126dcd[_0x52ee2a(0x403)]||0x0;const _0x7e1668=this[_0x52ee2a(0x8b9)](),_0x5a26ac=_0x504a25[_0x52ee2a(0x617)](_0x7e1668*0x1e),_0xa1e52c=this[_0x52ee2a(0x919)](_0x5a26ac,_0x7e1668);_0xa1e52c[_0x52ee2a(0x302)]['textColor']=_0x195e4b[_0x52ee2a(0x80c)](_0x301aa3[_0x52ee2a(0xad9)]),_0xa1e52c['bitmap'][_0x52ee2a(0x6db)](_0x2056c6,0x0,0x0,_0x5a26ac,_0x7e1668,_0x52ee2a(0x2d8)),_0xa1e52c['dy']=0x0;}else _0x36fb35+=Number(RegExp['$1']);}return _0x2828e1[_0x52ee2a(0x7a1)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x36fb35+=Number(RegExp['$1'])),_0x36fb35;},Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x901)]=function(_0x3394c6){const _0x5ae13e=_0x1f5c57;if(!_0x3394c6)return 0x0;let _0x1b8926=0x0;const _0x1b32dd=_0x3394c6['note'];_0x1b32dd[_0x5ae13e(0x7a1)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x1b8926+=Number(RegExp['$1']));if(_0x1b32dd[_0x5ae13e(0x7a1)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x5ae13e(0x6ec)!==_0x5ae13e(0x6ec)){if(!this[_0x5ae13e(0x918)])return;if(!_0x235d3a)return;this[_0x5ae13e(0x918)][_0x5ae13e(0x1dc)](_0x486bc6);}else _0x1b8926+=Number(RegExp['$2']);}return _0x1b8926;},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x3af)]=Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0xc58)],Game_BattlerBase['prototype']['isStateResist']=function(_0x2adc85){const _0x2a0bbd=_0x1f5c57;if(_0x2adc85===this[_0x2a0bbd(0x50c)]()&&this[_0x2a0bbd(0xa9b)]())return!![];return VisuMZ[_0x2a0bbd(0x6b3)][_0x2a0bbd(0x3af)][_0x2a0bbd(0x5a5)](this,_0x2adc85);},Game_BattlerBase[_0x1f5c57(0x605)]['isImmortal']=function(){const _0x5ad015=_0x1f5c57;return this[_0x5ad015(0x6c2)];},Game_BattlerBase['prototype'][_0x1f5c57(0x526)]=function(_0x54a109){const _0x6b99d2=_0x1f5c57;if(_0x54a109)this['addImmortal']();else{if(_0x6b99d2(0xa56)!==_0x6b99d2(0xa56)){const _0x339b88=this[_0x6b99d2(0x7f1)]();return _0x339b88?_0x339b88[_0x6b99d2(0x6da)]:0x0;}else this[_0x6b99d2(0x79b)]();}},Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0xc74)]=function(){const _0x134e5a=_0x1f5c57;if(this[_0x134e5a(0x750)]())return;this[_0x134e5a(0x6c2)]=!![],this['_deathStateApplied']=![];},Game_BattlerBase[_0x1f5c57(0x605)]['removeImmortal']=function(){const _0x126292=_0x1f5c57,_0xc92498=this['isAlive']();this[_0x126292(0x6c2)]=![],_0xc92498&&this[_0x126292(0x34f)]&&this[_0x126292(0x732)](),this[_0x126292(0x34f)]=![],this[_0x126292(0xba7)](),this['isDead']()&&_0xc92498&&('WrnQO'===_0x126292(0x3c6)?this[_0x126292(0x2c9)](_0x1037d7,_0x4c8041['x']+_0x376b7f[_0x126292(0xac5)]-_0x5007d8,_0x1f4625['y'],_0x1fd516):(this[_0x126292(0x630)](),this[_0x126292(0x2a5)]()));},VisuMZ[_0x1f5c57(0x6b3)]['Game_Action_numRepeats']=Game_Action['prototype'][_0x1f5c57(0xa89)],Game_Action[_0x1f5c57(0x605)]['numRepeats']=function(){const _0x49d85b=_0x1f5c57;return this[_0x49d85b(0x20c)]()?VisuMZ[_0x49d85b(0x6b3)][_0x49d85b(0xa55)][_0x49d85b(0x5a5)](this):0x0;},VisuMZ['BattleCore'][_0x1f5c57(0x690)]=Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0xbbc)],Game_Action[_0x1f5c57(0x605)]['setAttack']=function(){const _0x269533=_0x1f5c57;this[_0x269533(0x83e)]()&&this[_0x269533(0x83e)]()[_0x269533(0x306)]()?VisuMZ[_0x269533(0x6b3)][_0x269533(0x690)][_0x269533(0x5a5)](this):this[_0x269533(0x8e1)]();},VisuMZ[_0x1f5c57(0x6b3)]['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x306)],Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x306)]=function(){const _0x315338=_0x1f5c57;if(!this[_0x315338(0x30a)]())return![];return VisuMZ[_0x315338(0x6b3)][_0x315338(0x40b)][_0x315338(0x5a5)](this);},Game_BattlerBase['prototype'][_0x1f5c57(0x30a)]=function(){const _0x50c24c=_0x1f5c57;for(const _0x5a6e20 of this[_0x50c24c(0x948)]()){if(!_0x5a6e20)continue;if(_0x5a6e20[_0x50c24c(0x9bc)][_0x50c24c(0x7a1)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x5f1)]=Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x4de)],Game_Action[_0x1f5c57(0x605)][_0x1f5c57(0x4de)]=function(){const _0x2cf15b=_0x1f5c57;if(this[_0x2cf15b(0x83e)]()[_0x2cf15b(0xb80)]()){if('ohfbQ'===_0x2cf15b(0x6a5))VisuMZ[_0x2cf15b(0x6b3)]['Game_Action_setGuard']['call'](this);else return[_0x2cf15b(0x5e3),_0x2cf15b(0xbea),_0x2cf15b(0x296)][_0x2cf15b(0x60e)](this['_actorCommandWindow'][_0x2cf15b(0xa60)]());}},VisuMZ['BattleCore'][_0x1f5c57(0x6aa)]=Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0xb80)],Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0xb80)]=function(){const _0x53449a=_0x1f5c57;if(!this[_0x53449a(0xa57)]())return![];return VisuMZ[_0x53449a(0x6b3)][_0x53449a(0x6aa)]['call'](this);},Game_BattlerBase[_0x1f5c57(0x605)]['canGuardBattleCore']=function(){const _0x58af8c=_0x1f5c57;for(const _0x5d073b of this[_0x58af8c(0x948)]()){if('RiSyD'!==_0x58af8c(0xc51)){if(!_0x5d073b)continue;if(_0x5d073b[_0x58af8c(0x9bc)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}else this[_0x58af8c(0x924)]('jump');}return!![];},Game_BattlerBase['prototype']['canUseItemCommand']=function(){const _0x40a785=_0x1f5c57;for(const _0x380703 of this['traitObjects']()){if(!_0x380703)continue;if(_0x380703[_0x40a785(0x9bc)][_0x40a785(0x7a1)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x603)]=function(){const _0x5f47ca=_0x1f5c57;return VisuMZ[_0x5f47ca(0x6b3)][_0x5f47ca(0xbba)][_0x5f47ca(0x92c)][_0x5f47ca(0x475)];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x1e4)]=Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xa0f)],Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xa0f)]=function(){const _0x536e6f=_0x1f5c57;if(SceneManager['isSceneBattle']()){if(BattleManager['isTpb']()){if(this[_0x536e6f(0x898)]()<=0x0)return;}else{if($gameTroop[_0x536e6f(0x898)]()<=0x0){if('sJJjA'===_0x536e6f(0x3ce))return _0x29d19d['getDefeatedEnemies']()[_0x536e6f(0x60e)](this[_0x536e6f(0x28f)]);else return;}}}if(SceneManager[_0x536e6f(0x2ba)]()&&BattleManager[_0x536e6f(0x97c)]()&&this[_0x536e6f(0x735)]===Graphics['frameCount']){if(_0x536e6f(0x53e)===_0x536e6f(0xb3f))this[_0x536e6f(0x1ed)]=0x0,this[_0x536e6f(0x8b7)]=0x0,this[_0x536e6f(0xc6a)]=0x0,this[_0x536e6f(0xb5a)]=0x0,this[_0x536e6f(0xa2e)]=0x0,this[_0x536e6f(0x212)]=0x0,this[_0x536e6f(0x7b0)]=_0x536e6f(0x9b1),this['_jumpHeight']=0x0,this[_0x536e6f(0xc2e)]=0x0,this[_0x536e6f(0x3bd)]=0x0,this[_0x536e6f(0x812)]=0x0,this[_0x536e6f(0x289)]=0xff,this[_0x536e6f(0x602)]=0x0,this['_opacityWholeDuration']=0x0,this[_0x536e6f(0xb06)]='Linear',this[_0x536e6f(0x557)]=0x0,this[_0x536e6f(0x3cd)]=0x0,this[_0x536e6f(0x43f)]=0x0,this[_0x536e6f(0xa42)]=0x0,this[_0x536e6f(0x278)]='Linear',this[_0x536e6f(0x96f)]=!![],this[_0x536e6f(0xb65)]=0x0,this[_0x536e6f(0xa58)]=0x0,this['_targetSkewX']=0x0,this[_0x536e6f(0x1ea)]=0x0,this[_0x536e6f(0x770)]=0x0,this[_0x536e6f(0x7a6)]=0x0,this[_0x536e6f(0x9b8)]=_0x536e6f(0x9b1),this['_growX']=0x1,this['_growY']=0x1,this[_0x536e6f(0xc97)]=0x1,this[_0x536e6f(0xc45)]=0x1,this[_0x536e6f(0x712)]=0x0,this[_0x536e6f(0x1fe)]=0x0,this[_0x536e6f(0xb8e)]=_0x536e6f(0x9b1),this[_0x536e6f(0x3f3)]=0x1,this['_targetHomeX']=0x0,this[_0x536e6f(0x993)]=0x0,this[_0x536e6f(0x34b)]=0x0,this[_0x536e6f(0xb90)]=0x0,this['_homeEasing']=_0x536e6f(0x9b1);else return;}this[_0x536e6f(0x735)]=Graphics[_0x536e6f(0x744)];SceneManager[_0x536e6f(0x2ba)]()&&this[_0x536e6f(0x87c)](_0x536e6f(0x654));VisuMZ[_0x536e6f(0x6b3)][_0x536e6f(0x1e4)][_0x536e6f(0x5a5)](this);if(SceneManager[_0x536e6f(0x2ba)]()){if(_0x536e6f(0x59f)===_0x536e6f(0x334))return _0x271191[_0x536e6f(0x6b3)]['Settings'][_0x536e6f(0xa6c)][_0x536e6f(0x1d3)];else this[_0x536e6f(0x773)](),this[_0x536e6f(0x87c)](_0x536e6f(0xb9f));}},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x773)]=function(){const _0x540578=_0x1f5c57;if(SceneManager[_0x540578(0x2ba)]()){if(_0x540578(0x9a7)===_0x540578(0x9a7))for(const _0x511d17 of this[_0x540578(0x948)]()){if(_0x540578(0xaaf)===_0x540578(0xaaf)){if(!_0x511d17)continue;this[_0x540578(0x84f)](_0x511d17);}else{if(!_0x5b3ab8[_0x540578(0x2ba)]())return;if(!_0x1204d8[_0x540578(0x908)])return;_0x31dd6c[_0x540578(0xa1c)](_0xe9f37e,_0x4b41f0);const _0x172ad7=_0x1445b0[_0x540578(0x78b)](),_0x249564=_0x723801[_0x540578(0xbce)];if(!_0x172ad7)return;_0x16366c['setBattleAngle'](_0x4f0527[_0x540578(0x503)],_0x1b7870[_0x540578(0xacb)],_0x5bccba[_0x540578(0xa64)]);if(_0x249564)_0x172ad7['setWaitMode']('battleAngle');}}else{if(this['parent'])this[_0x540578(0x4e5)][_0x540578(0x3e9)](_0x41850c,_0x516f01,_0x4ebf80);}}},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x84f)]=function(_0x53a033){const _0x59d4e5=_0x1f5c57;if(!Imported[_0x59d4e5(0x8bb)])return;if(!SceneManager['isSceneBattle']())return;if(this[_0x59d4e5(0x750)]())return;if(this[_0x59d4e5(0x55b)]())return;if(_0x53a033[_0x59d4e5(0x9bc)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x1e7369=Number(RegExp['$1']);$gameTemp[_0x59d4e5(0x769)]([this],_0x1e7369,![],![]);}},VisuMZ[_0x1f5c57(0x6b3)]['Game_Battler_startTpbTurn']=Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x691)],Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x691)]=function(){const _0x4a0e39=_0x1f5c57;this[_0x4a0e39(0x87c)](_0x4a0e39(0x9a2)),VisuMZ[_0x4a0e39(0x6b3)][_0x4a0e39(0x7c2)]['call'](this),this[_0x4a0e39(0x87c)](_0x4a0e39(0x799));},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x4c4)]=Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x65e)],Game_Battler['prototype'][_0x1f5c57(0x65e)]=function(){const _0x3384a4=_0x1f5c57;this[_0x3384a4(0x87c)](_0x3384a4(0x9ef)),VisuMZ[_0x3384a4(0x6b3)][_0x3384a4(0x4c4)][_0x3384a4(0x5a5)](this),this[_0x3384a4(0x87c)](_0x3384a4(0x87a));},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x87c)]=function(_0x322821){const _0x588b35=_0x1f5c57;if(this[_0x588b35(0x9b2)]||this['_tempActor'])return;const _0xc5a7bc=VisuMZ[_0x588b35(0x6b3)][_0x588b35(0xbba)][_0x588b35(0x92c)];if(_0xc5a7bc[_0x322821])_0xc5a7bc[_0x322821][_0x588b35(0x5a5)](this);for(const _0x2a91be of this[_0x588b35(0x948)]()){if(_0x588b35(0x419)!==_0x588b35(0x980)){if(!_0x2a91be)continue;key=VisuMZ['BattleCore'][_0x588b35(0x60b)](_0x2a91be,_0x322821),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0x588b35(0x6b3)]['JS'][key][_0x588b35(0x5a5)](this,this,this,_0x2a91be,0x0);}else this[_0x588b35(0xafd)](_0x588b35(0x9a6));}},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x714)]=function(){const _0x473e73=_0x1f5c57;return VisuMZ[_0x473e73(0x6b3)][_0x473e73(0xbba)][_0x473e73(0x1df)]['ChantStyle']||![];},Game_Battler['prototype'][_0x1f5c57(0x28c)]=function(){const _0x6b8322=_0x1f5c57;if(this[_0x6b8322(0x7be)]()){if(this['chantStyle']()){if(this[_0x6b8322(0x760)][_0x6b8322(0x9d3)](_0x53039d=>_0x53039d[_0x6b8322(0x20c)]()&&_0x53039d[_0x6b8322(0x448)]())){if(_0x6b8322(0x326)!==_0x6b8322(0x577))return!![];else _0x368949=!_0x14002e;}}else{if(this[_0x6b8322(0x760)][_0x6b8322(0x9d3)](_0xf15c03=>_0xf15c03[_0x6b8322(0x20c)]()&&_0xf15c03[_0x6b8322(0x62c)]()))return!![];}}if(BattleManager[_0x6b8322(0x97c)]()&&this['_tpbState']==='casting')return'hdLAT'===_0x6b8322(0x8a0)?this[_0x6b8322(0x714)]()?this['currentAction']()&&this['currentAction']()['item']()&&this[_0x6b8322(0xa11)]()[_0x6b8322(0x448)]():this[_0x6b8322(0xa11)]()&&this[_0x6b8322(0xa11)]()[_0x6b8322(0x20c)]()&&this['currentAction']()[_0x6b8322(0x62c)]():this[_0x6b8322(0x558)]();return![];},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x77e)]=function(){const _0x23f790=_0x1f5c57;if(BattleManager[_0x23f790(0x97c)]()&&this[_0x23f790(0x8ff)]==='casting')return this[_0x23f790(0x714)]()?this[_0x23f790(0xa11)]()&&this['currentAction']()[_0x23f790(0x20c)]()&&!this[_0x23f790(0xa11)]()[_0x23f790(0x448)]():this[_0x23f790(0xa11)]()&&this['currentAction']()[_0x23f790(0x20c)]()&&!this[_0x23f790(0xa11)]()['isMagicSkill']();return![];},VisuMZ['BattleCore'][_0x1f5c57(0x3ad)]=Game_Battler['prototype'][_0x1f5c57(0x303)],Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x303)]=function(){const _0xb2eeec=_0x1f5c57;VisuMZ[_0xb2eeec(0x6b3)][_0xb2eeec(0x3ad)][_0xb2eeec(0x5a5)](this),this['_damagePopupArray']=[];},Game_Battler[_0x1f5c57(0x605)]['isDamagePopupRequested']=function(){const _0x3a5919=_0x1f5c57;if(!this[_0x3a5919(0x1d2)])this[_0x3a5919(0x303)]();return this[_0x3a5919(0x1d2)][_0x3a5919(0x9fe)]>0x0;},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x372)]=function(){const _0xf30272=_0x1f5c57;if(!SceneManager[_0xf30272(0x2ba)]())return;if(!this[_0xf30272(0x1d2)])this[_0xf30272(0x303)]();this[_0xf30272(0x74f)]();const _0x1245cf=this['battler']();if(_0x1245cf)_0x1245cf[_0xf30272(0xa76)]();},Game_Battler['prototype'][_0x1f5c57(0x74f)]=function(){const _0x24cf70=_0x1f5c57,_0x15240a=this[_0x24cf70(0x260)]();if(_0x15240a['missed']||_0x15240a[_0x24cf70(0x4a1)]){const _0x418703=JsonEx[_0x24cf70(0x215)](_0x15240a);_0x418703['hpAffected']=![],_0x418703[_0x24cf70(0x593)]=0x0,this['_damagePopupArray'][_0x24cf70(0x5af)](_0x418703);}if(_0x15240a['hpAffected']){const _0x136eca=JsonEx[_0x24cf70(0x215)](_0x15240a);_0x136eca['missed']=![],_0x136eca[_0x24cf70(0x4a1)]=![],_0x136eca[_0x24cf70(0x593)]=0x0,this[_0x24cf70(0x1d2)][_0x24cf70(0x5af)](_0x136eca);}if(_0x15240a[_0x24cf70(0x593)]!==0x0){const _0x5d3f35=JsonEx[_0x24cf70(0x215)](_0x15240a);_0x5d3f35['missed']=![],_0x5d3f35[_0x24cf70(0x4a1)]=![],_0x5d3f35[_0x24cf70(0xa0c)]=![],this[_0x24cf70(0x1d2)]['push'](_0x5d3f35);}},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x72c)]=function(){const _0x563857=_0x1f5c57;if(!this[_0x563857(0x1d2)])this[_0x563857(0x303)]();if(VisuMZ['BattleCore'][_0x563857(0xbba)][_0x563857(0x941)][_0x563857(0x235)]){if(_0x563857(0xc9b)!==_0x563857(0x39d))return this[_0x563857(0x1d2)][_0x563857(0x7f3)]();else _0x296a18[_0x563857(0x870)]=!![];}else{if(_0x563857(0xaf5)===_0x563857(0x7cd))_0x1c6633[_0x563857(0x5fd)]=_0x1ead39[_0x563857(0x6ef)](_0x53bd99['$1']);else return this[_0x563857(0x1d2)][_0x563857(0x717)]();}},Game_Battler['prototype']['setupTextPopup']=function(_0x39db1d,_0x5335a1){const _0x517572=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!this[_0x517572(0x4b2)]())return;if(_0x39db1d[_0x517572(0x9fe)]<=0x0)return;_0x5335a1=_0x5335a1||{},_0x5335a1[_0x517572(0xad9)]=_0x5335a1['textColor']||_0x517572(0x844),_0x5335a1[_0x517572(0x31d)]=_0x5335a1[_0x517572(0x31d)]||[0x0,0x0,0x0,0x0],_0x5335a1[_0x517572(0x403)]=_0x5335a1[_0x517572(0x403)]||0x0,this['battler']()['setupTextPopup'](_0x39db1d,_0x5335a1);},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x549)]=function(_0x156768,_0x452fac,_0x10c08b){const _0x1ddbb5=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;if(!this[_0x1ddbb5(0x4b2)]())return;if(_0x452fac['length']<=0x0)return;_0x10c08b=_0x10c08b||{},_0x10c08b[_0x1ddbb5(0xad9)]=_0x10c08b[_0x1ddbb5(0xad9)]||_0x1ddbb5(0x844),_0x10c08b[_0x1ddbb5(0x31d)]=_0x10c08b[_0x1ddbb5(0x31d)]||[0x0,0x0,0x0,0x0],_0x10c08b[_0x1ddbb5(0x403)]=_0x10c08b[_0x1ddbb5(0x403)]||0x0,this['battler']()[_0x1ddbb5(0x549)](_0x156768,_0x452fac,_0x10c08b);},Game_Battler[_0x1f5c57(0x605)]['notFocusValid']=function(){const _0x14a1ba=_0x1f5c57;if(this[_0x14a1ba(0x55b)]())return![];if(this[_0x14a1ba(0x3b0)]()&&this['isAppeared']())return!![];if(this[_0x14a1ba(0x951)]()&&this[_0x14a1ba(0x4d7)]()){if(_0x14a1ba(0xb76)===_0x14a1ba(0x522)){const _0x5d875f=new _0x483852();_0x5d875f[_0x14a1ba(0x302)]=_0x2446a5[_0x14a1ba(0x89c)](_0x2295b9['StatusWindowAttachmentBack']),_0x5d875f['x']=_0x5e7d09[_0x14a1ba(0x899)]||0x0,_0x5d875f['y']=_0x12d6cb[_0x14a1ba(0x3a6)]||0x0,this[_0x14a1ba(0x88b)](_0x5d875f),this[_0x14a1ba(0x5e4)]=_0x5d875f;}else{if(this[_0x14a1ba(0x750)]()&&this[_0x14a1ba(0x1f9)]())return![];}}else{if(this[_0x14a1ba(0x750)]())return![];}return!![];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xb9a)]=Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xc38)],Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xc38)]=function(){const _0x543270=_0x1f5c57;VisuMZ[_0x543270(0x6b3)][_0x543270(0xb9a)][_0x543270(0x5a5)](this),this[_0x543270(0x439)]();},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x8b2)]=function(){return!![];},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xc7e)]=function(){return![];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x6ac)]=Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xc7d)],Game_Battler['prototype']['onBattleStart']=function(_0x2e5a6a){const _0x2cbd16=_0x1f5c57;VisuMZ[_0x2cbd16(0x6b3)]['Game_Battler_onBattleStart'][_0x2cbd16(0x5a5)](this,_0x2e5a6a),this[_0x2cbd16(0xb66)](_0x2e5a6a);},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xb66)]=function(_0x5c167c){const _0x37d34=_0x1f5c57;this[_0x37d34(0x2b2)](![]),this[_0x37d34(0x774)]=undefined,this[_0x37d34(0xc34)]=undefined;},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x73c)]=Game_Battler['prototype'][_0x1f5c57(0xb18)],Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xb18)]=function(){const _0x180961=_0x1f5c57;VisuMZ[_0x180961(0x6b3)][_0x180961(0x73c)][_0x180961(0x5a5)](this),this[_0x180961(0x2bf)]();},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x2bf)]=function(){const _0x4de19a=_0x1f5c57;this[_0x4de19a(0x774)]=undefined,this[_0x4de19a(0xc34)]=undefined;},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xb6d)]=Game_Battler[_0x1f5c57(0x605)]['performActionStart'],Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x61f)]=function(_0xa0acf9){const _0x99d528=_0x1f5c57;VisuMZ[_0x99d528(0x6b3)][_0x99d528(0xb6d)]['call'](this,_0xa0acf9);if(!_0xa0acf9[_0x99d528(0xb99)]()){const _0x259daa=this[_0x99d528(0x4b2)]();_0x259daa&&(_0x99d528(0xb47)===_0x99d528(0xb47)?_0x259daa[_0x99d528(0x42b)]():(_0x22ae5d['width']=_0x397fce(_0x553b54['$1']),_0x495b5e[_0x99d528(0x53d)]=_0x65a0a4(_0x4b654f['$2'])));}this[_0x99d528(0x2b2)](![]);},Game_Battler['prototype'][_0x1f5c57(0xc5b)]=function(){const _0x4cb7a7=_0x1f5c57,_0x15a973=this[_0x4cb7a7(0x784)];this[_0x4cb7a7(0x784)]=![];if(BattleManager[_0x4cb7a7(0xbe3)]()&&this[_0x4cb7a7(0x7e2)]()){const _0x160732=this[_0x4cb7a7(0x4b2)]();if(_0x160732&&_0x15a973)_0x160732[_0x4cb7a7(0x42b)]();return;}const _0x1d614d=this[_0x4cb7a7(0x4b2)]();if(_0x1d614d)_0x1d614d['stepBack']();this[_0x4cb7a7(0x2b2)](![]),this[_0x4cb7a7(0x2a5)]();},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x599)]=function(_0x323884){const _0x22a888=_0x1f5c57;if(_0x323884[_0x22a888(0xad1)]())'aXWCE'!=='xGGwE'?this[_0x22a888(0xb49)]():_0x184eb1&&_0x1a9589[_0x22a888(0x9ee)]();else{if(_0x323884[_0x22a888(0xb99)]()){if(_0x22a888(0xa7d)!==_0x22a888(0x536))this['requestMotion'](_0x22a888(0xbea));else return this[_0x22a888(0xc5d)]()[_0x22a888(0x7a1)](/\$/i);}else{if(_0x323884['isMagical']())this[_0x22a888(0x559)](_0x22a888(0x3f8));else{if(_0x323884[_0x22a888(0x482)]()){if(_0x22a888(0x3b2)!==_0x22a888(0x6f4)){if(_0x323884[_0x22a888(0x20c)]()[_0x22a888(0x84b)][_0x22a888(0x73a)]>0x0){if(_0x22a888(0xa47)!=='ekkjM'){if(!_0x3cee11[_0x22a888(0x831)])return null;if(!_0xc80441[_0x22a888(0x831)]['_statusWindow'])return null;if(!_0xb85ecd[_0x22a888(0x831)][_0x22a888(0x1ee)]['_effectsContainer'])return null;return _0x5cb263[_0x22a888(0x831)][_0x22a888(0x1ee)][_0x22a888(0x8cd)];}else this[_0x22a888(0xb49)]();}else this[_0x22a888(0x559)]('skill');}else _0x57dc6e[_0x22a888(0x924)](_0x22a888(0x266));}else _0x323884[_0x22a888(0xbeb)]()&&(_0x22a888(0xc41)==='rsmkY'?this[_0x22a888(0x559)]('item'):this[_0x22a888(0x559)](_0x22a888(0x835)));}}}},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x7f1)]=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x382)]=function(){const _0x3187c6=_0x1f5c57,_0x1ef087=this[_0x3187c6(0x7f1)]();return _0x1ef087?_0x1ef087[_0x3187c6(0x6da)]:0x0;},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xa0d)]=function(_0x568e62){const _0x14c067=_0x1f5c57;if(!$gameSystem[_0x14c067(0x754)]())return;const _0x4ac44d=this['battler'](),_0x1e19b7=_0x568e62[_0x14c067(0x4b2)]();if(!_0x4ac44d||!_0x1e19b7)return;const _0xb2120a=_0x1e19b7[_0x14c067(0x1ed)],_0x2ba3ac=_0x1e19b7[_0x14c067(0x8b7)];this[_0x14c067(0x464)](_0xb2120a,_0x2ba3ac,0x0,![],_0x14c067(0x9b1),-0x1),_0x4ac44d[_0x14c067(0xc5f)]();const _0x17cadc=VisuMZ[_0x14c067(0x6b3)][_0x14c067(0xbba)][_0x14c067(0xbaa)];let _0x2e62c5=(_0x1e19b7[_0x14c067(0xac5)]+_0x4ac44d['width'])/0x2;_0x2e62c5*=this['isActor']()?0x1:-0x1;let _0xc0544a=_0x17cadc[_0x14c067(0xbc7)]*(this[_0x14c067(0xbcf)]()?0x1:-0x1);_0x568e62[_0x14c067(0x465)](_0x2e62c5,_0xc0544a,0x0,![],'Linear'),_0x1e19b7[_0x14c067(0xc5f)]();},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x559)]=function(_0x34a678){const _0xab4904=_0x1f5c57;if(SceneManager[_0xab4904(0x2ba)]()){if(_0xab4904(0xc6d)!=='vaFjd'){const _0x27b2e9=this[_0xab4904(0x4b2)]();_0x27b2e9&&(_0x27b2e9[_0xab4904(0x576)](_0x34a678),[_0xab4904(0x835),_0xab4904(0x56b),_0xab4904(0x985)][_0xab4904(0x60e)](_0x34a678)&&this['performWeaponAnimation']());}else _0xfdf5ab[_0xab4904(0x924)]('battleAnimation');}this['clearFreezeMotion']();},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x913)]=function(){},Game_Battler['prototype'][_0x1f5c57(0x561)]=function(_0x25f735){const _0x23333f=_0x1f5c57;if(SceneManager[_0x23333f(0x2ba)]()){const _0x50c37f=this[_0x23333f(0x4b2)]();if(_0x50c37f)_0x50c37f[_0x23333f(0xb23)](_0x25f735);}},Game_Battler['prototype'][_0x1f5c57(0x357)]=function(){const _0x2c7227=_0x1f5c57;if(SceneManager[_0x2c7227(0x2ba)]()){const _0x5bcb02=this[_0x2c7227(0x382)]();this[_0x2c7227(0x561)](_0x5bcb02);}},Game_Battler[_0x1f5c57(0x605)]['performCastAnimation']=function(_0x2df698,_0x4832e0){const _0x27fd9d=_0x1f5c57;if(!_0x2df698)return;if(!_0x2df698[_0x27fd9d(0x20c)]())return;if(_0x2df698[_0x27fd9d(0xad1)]())return;if(_0x2df698[_0x27fd9d(0xb99)]())return;if(_0x2df698['isItem']())return;let _0x2fdfad=0x0;const _0x4d8deb=VisuMZ[_0x27fd9d(0x6b3)][_0x27fd9d(0xbba)]['ActionSequence'],_0x165c2c=_0x2df698[_0x27fd9d(0x20c)]()['note'];if(_0x165c2c[_0x27fd9d(0x7a1)](/<CAST ANIMATION: (\d+)>/i))_0x27fd9d(0x82e)===_0x27fd9d(0x81a)?this[_0x27fd9d(0x687)](this[_0x27fd9d(0x828)]['_battler']):_0x2fdfad=Number(RegExp['$1']);else{if(_0x165c2c['match'](/<NO CAST ANIMATION>/i)){if(_0x27fd9d(0x477)!==_0x27fd9d(0x477)){if(!_0x28768f[_0x27fd9d(0x8f5)]()){const _0x11cae2=_0x342b75[_0x27fd9d(0xbd9)](_0x43b219['x'],_0x48ae4d['y']);if(this['_regionBattleback1']&&this['_regionBattleback2'][_0x11cae2])return this[_0x27fd9d(0xb89)][_0x11cae2];}return _0x347783['BattleCore']['Game_Map_battleback2Name'][_0x27fd9d(0x5a5)](this);}else return;}else{if(_0x2df698[_0x27fd9d(0x1dd)]())_0x2fdfad=_0x4d8deb['CastCertain'];else{if(_0x2df698[_0x27fd9d(0x8af)]())'PdLGr'===_0x27fd9d(0xb61)?_0x1f751b[_0x27fd9d(0x6b3)][_0x27fd9d(0xb74)][_0x27fd9d(0x5a5)](this,_0x2b4d49):_0x2fdfad=_0x4d8deb[_0x27fd9d(0x987)];else _0x2df698[_0x27fd9d(0x448)]()&&(_0x2fdfad=_0x4d8deb['CastMagical']);}}}if(_0x2fdfad>0x0){if(_0x27fd9d(0x7fd)===_0x27fd9d(0x9c8)){const _0xef884e=this['isOnCurrentMap']()?this[_0x27fd9d(0x2c4)]:0x0,_0x21cd86=_0x140cac[_0x27fd9d(0xc47)];this[_0x27fd9d(0x9c1)](_0x21cd86,_0xef884e),this[_0x27fd9d(0x20d)]=_0x296d48[_0x27fd9d(0x215)](this[_0x27fd9d(0x20d)]);const _0x508f00={'code':0xbc3,'indent':this[_0x27fd9d(0x883)],'parameters':_0x11d665[_0x27fd9d(0x215)](_0x2cafb1)};return this[_0x27fd9d(0x20d)][_0x27fd9d(0x2b8)](this[_0x27fd9d(0xb15)]+0x1,0x0,_0x508f00),!![];}else $gameTemp[_0x27fd9d(0xad2)]([this],_0x2fdfad,!!_0x4832e0);}},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x7c1)]=function(){const _0x2921fc=_0x1f5c57;SoundManager[_0x2921fc(0x932)]();let _0x2e98fe=VisuMZ[_0x2921fc(0x6b3)][_0x2921fc(0xbba)][_0x2921fc(0xbaa)][_0x2921fc(0x1f4)];_0x2e98fe>0x0&&(Imported['VisuMZ_0_CoreEngine']?'SOIlo'===_0x2921fc(0x5fe)?this['autoMeleeSingleTargetActionSet'](_0x33ce01,_0x32b17e,_0x9af5ab):$gameTemp[_0x2921fc(0x769)]([this],_0x2e98fe):_0x2921fc(0x67b)!==_0x2921fc(0x491)?$gameTemp[_0x2921fc(0xad2)]([this],_0x2e98fe):(_0x46523c['BattleCore'][_0x2921fc(0x657)]['call'](this),!this[_0x2921fc(0xc49)]&&this[_0x2921fc(0x792)]&&(this[_0x2921fc(0x792)][_0x2921fc(0x3c0)]=![])));},VisuMZ['BattleCore']['Game_Battler_performDamage']=Game_Battler[_0x1f5c57(0x605)]['performDamage'],Game_Battler['prototype']['performDamage']=function(){const _0x436a7b=_0x1f5c57;VisuMZ['BattleCore'][_0x436a7b(0x219)][_0x436a7b(0x5a5)](this),this['performFlinch']();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x370)]=Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x433)],Game_Battler['prototype'][_0x1f5c57(0x433)]=function(){const _0x325e4c=_0x1f5c57;VisuMZ[_0x325e4c(0x6b3)][_0x325e4c(0x370)][_0x325e4c(0x5a5)](this),this['performFlinch']();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x288)]=Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x890)],Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x890)]=function(){const _0x402a2d=_0x1f5c57;VisuMZ[_0x402a2d(0x6b3)][_0x402a2d(0x288)][_0x402a2d(0x5a5)](this),this['performFlinch']();},Game_Battler[_0x1f5c57(0x605)]['performFlinch']=function(){const _0x54a4f6=_0x1f5c57;if(!$gameSystem[_0x54a4f6(0x754)]())return;if(this['_flinched'])return;this[_0x54a4f6(0x784)]=!![];const _0x5f339e=this[_0x54a4f6(0x4b2)]();if(_0x5f339e)_0x5f339e['stepFlinch']();},Game_Battler['prototype']['requestMotionRefresh']=function(){const _0x4590f1=_0x1f5c57;if(this[_0x4590f1(0x750)]()&&this[_0x4590f1(0x5d3)]!=='dead'){if(_0x4590f1(0xc2f)!==_0x4590f1(0x8fb)){this[_0x4590f1(0x559)](_0x4590f1(0xbf5));return;}else{if(!this[_0x4590f1(0x828)])return;this[_0x4590f1(0x318)]=this[_0x4590f1(0x318)]||_0x4c382b['prototype'][_0x4590f1(0xa54)](),this['x']=this[_0x4590f1(0x828)][_0x4590f1(0x1ed)],this['y']=this[_0x4590f1(0x828)][_0x4590f1(0x8b7)]-this[_0x4590f1(0x318)]*0.5;const _0x4fc19b=_0x475efb[_0x4590f1(0x6b3)]['Settings']['Enemy'];this['x']+=_0x4fc19b[_0x4590f1(0x562)]||0x0,this['y']+=_0x4fc19b[_0x4590f1(0xb2a)]||0x0;}}if(this['isDead']()&&this[_0x4590f1(0x5d3)]===_0x4590f1(0xbf5))return;if(!!this['_freezeMotionData'])return;if(this['isEnemy']()){if(!this[_0x4590f1(0x9b6)]()&&this!==BattleManager[_0x4590f1(0x33d)]){if(this[_0x4590f1(0x4b2)]())this[_0x4590f1(0x4b2)]()[_0x4590f1(0x485)]();}this[_0x4590f1(0x439)]();return;}if(this['_motionType']===_0x4590f1(0x359))return;if(this[_0x4590f1(0x5d3)]===_0x4590f1(0xad6)&&!BattleManager[_0x4590f1(0x7e2)]())return;if(this['_motionType']==='guard'&&!BattleManager[_0x4590f1(0x7e2)]())return;this[_0x4590f1(0xc38)]();if(this[_0x4590f1(0x4b2)]()&&BattleManager[_0x4590f1(0x7e2)]()){if('ReBXb'===_0x4590f1(0x4b8)){this[_0x4590f1(0x4b2)]()['refreshMotion'](),this['clearFreezeMotion']();return;}else{const _0x59a631=this[_0x4590f1(0x33d)]['currentAction'](),_0x2e4da4=this[_0x4590f1(0x33d)];_0x59a631&&_0x59a631[_0x4590f1(0x83e)]()===_0x2e4da4&&_0x59a631[_0x4590f1(0x785)]('PreStartActionJS'),_0x5a1af5[_0x4590f1(0x6b3)]['BattleManager_startAction'][_0x4590f1(0x5a5)](this),_0x59a631&&_0x59a631['subject']()===_0x2e4da4&&_0x59a631[_0x4590f1(0x785)](_0x4590f1(0x518));}}},Game_Enemy[_0x1f5c57(0x605)]['isDuringNonLoopingMotion']=function(){const _0xae894=_0x1f5c57;if(!this[_0xae894(0x4d7)]())return![];const _0x3db472=this['battler']();if(!_0x3db472)return![];const _0x1de11e=_0x3db472[_0xae894(0xa8e)];if(!_0x1de11e)return![];const _0x3be811=_0x1de11e[_0xae894(0x44b)];return _0x3be811&&!_0x3be811[_0xae894(0xa08)];},Game_Battler['prototype'][_0x1f5c57(0x91c)]=function(){const _0x4c9257=_0x1f5c57;return this[_0x4c9257(0xa25)];},Game_Battler[_0x1f5c57(0x605)]['setBattlerFlip']=function(_0x492c06){const _0x59c498=_0x1f5c57;if(!$gameSystem[_0x59c498(0x754)]())return;this[_0x59c498(0xa25)]=_0x492c06;const _0x40dc03=this['battler']();if(_0x40dc03)_0x40dc03[_0x59c498(0x683)]();},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x9aa)]=function(_0x2701e8,_0x491a37,_0x36be35){const _0x41c2d1=_0x1f5c57;if(!$gameSystem[_0x41c2d1(0x754)]())return;const _0x5780bc=this[_0x41c2d1(0x4b2)]();if(!_0x5780bc)return;if(_0x2701e8===_0x5780bc[_0x41c2d1(0x1ed)])return;let _0x57238f=![];if(this[_0x41c2d1(0xbcf)]()){if(_0x2701e8>_0x5780bc[_0x41c2d1(0x1ed)])_0x57238f=!![];if(_0x2701e8<_0x5780bc[_0x41c2d1(0x1ed)])_0x57238f=![];}else{if(this['isEnemy']()){if(_0x41c2d1(0x5c3)==='oAIHr'){const _0x4dc303=_0x46de96[_0x41c2d1(0x6b3)]['Settings'][_0x41c2d1(0x941)];this[_0x41c2d1(0x83d)]=_0x4dc303[_0x41c2d1(0x7b8)][_0x41c2d1(0x7b5)](0x0),this[_0x41c2d1(0xb7c)]=_0x4dc303['CriticalDuration'];}else{if(_0x2701e8>_0x5780bc['_baseX'])_0x57238f=![];if(_0x2701e8<_0x5780bc[_0x41c2d1(0x1ed)])_0x57238f=!![];}}};this['setBattlerFlip'](_0x36be35?!_0x57238f:_0x57238f),_0x5780bc['updateFlip']();},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x465)]=function(_0xaf39cd,_0x57086a,_0x12e69a,_0x440006,_0x468880){const _0x487120=_0x1f5c57;if(!$gameSystem[_0x487120(0x754)]())return;const _0x10cfcd=this['battler']();if(!_0x10cfcd)return;if(_0x440006)this[_0x487120(0x9aa)](_0xaf39cd+_0x10cfcd['_baseX'],_0x57086a+_0x10cfcd['_baseY'],![]);_0xaf39cd+=_0x10cfcd[_0x487120(0x1ed)]-_0x10cfcd[_0x487120(0x2b9)],_0x57086a+=_0x10cfcd[_0x487120(0x8b7)]-_0x10cfcd[_0x487120(0xc60)],_0x10cfcd[_0x487120(0x3e9)](_0xaf39cd,_0x57086a,_0x12e69a);if(Imported[_0x487120(0x8bb)])_0x10cfcd[_0x487120(0x6c7)](_0x468880||_0x487120(0x9b1));},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x464)]=function(_0x353483,_0x28bd0c,_0x3d8b69,_0x3546fb,_0x257454,_0x2191fe){const _0x275ec3=_0x1f5c57;if(!$gameSystem[_0x275ec3(0x754)]())return;const _0x5259ac=this['battler']();if(!_0x5259ac)return;if(_0x353483===Infinity||_0x28bd0c===Infinity)return;if(isNaN(_0x353483)||isNaN(_0x28bd0c))return;_0x2191fe=_0x2191fe||0x0;if(_0x2191fe>0x0){if(_0x5259ac[_0x275ec3(0x1ed)]>_0x353483)_0x353483+=_0x5259ac[_0x275ec3(0xac5)]/0x2+_0x2191fe;if(_0x5259ac['_baseX']<_0x353483)_0x353483-=_0x5259ac['width']/0x2+_0x2191fe;}if(_0x3546fb)this[_0x275ec3(0x9aa)](_0x353483,_0x28bd0c,![]);_0x353483-=_0x5259ac[_0x275ec3(0x2b9)],_0x28bd0c-=_0x5259ac[_0x275ec3(0xc60)],_0x5259ac[_0x275ec3(0x3e9)](_0x353483,_0x28bd0c,_0x3d8b69);if(Imported['VisuMZ_0_CoreEngine'])_0x5259ac[_0x275ec3(0x6c7)](_0x257454||_0x275ec3(0x9b1));},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x999)]=function(_0x1bab97,_0x1e5240,_0x32d976,_0x2df45e,_0x27c337){const _0x2cb2e6=_0x1f5c57;if(!$gameSystem[_0x2cb2e6(0x754)]())return;const _0x1f7110=this[_0x2cb2e6(0x4b2)]();if(!_0x1f7110)return;if(_0x2df45e)this[_0x2cb2e6(0x9aa)](_0x1bab97+_0x1f7110['_baseX'],_0x1e5240+_0x1f7110[_0x2cb2e6(0x8b7)],![]);_0x1bab97+=_0x1f7110[_0x2cb2e6(0x2b9)],_0x1e5240+=_0x1f7110[_0x2cb2e6(0xc60)],_0x1f7110[_0x2cb2e6(0x413)](_0x1bab97,_0x1e5240,_0x32d976,_0x27c337),this[_0x2cb2e6(0x774)]=_0x1bab97,this['_forcedHomeY']=_0x1e5240;},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x24a)]=function(_0x275211,_0x1a9453,_0x12f2a7,_0x4c55bc,_0x4c52c1,_0x1d580a){const _0x35ae5a=_0x1f5c57;if(!$gameSystem[_0x35ae5a(0x754)]())return;const _0x5688ce=this['battler']();if(!_0x5688ce)return;_0x1d580a=_0x1d580a||0x0;if(_0x1d580a>0x0){if(_0x35ae5a(0x552)===_0x35ae5a(0x552)){if(_0x5688ce[_0x35ae5a(0x1ed)]>_0x275211)_0x275211+=_0x5688ce[_0x35ae5a(0xac5)]/0x2+_0x1d580a;if(_0x5688ce[_0x35ae5a(0x1ed)]<_0x275211)_0x275211-=_0x5688ce[_0x35ae5a(0xac5)]/0x2+_0x1d580a;}else{if(!_0x58f4f1[_0x35ae5a(0x6b3)][_0x35ae5a(0xbba)]['BattleLog']['ShowMpDmg'])return;_0xb3e81b[_0x35ae5a(0x6b3)]['Window_BattleLog_displayMpDamage'][_0x35ae5a(0x5a5)](this,_0x2146c2);}}if(_0x4c55bc)this[_0x35ae5a(0x9aa)](_0x275211,_0x1a9453,![]);_0x5688ce[_0x35ae5a(0x413)](_0x275211,_0x1a9453,_0x12f2a7,_0x4c52c1),this[_0x35ae5a(0x774)]=_0x275211,this[_0x35ae5a(0xc34)]=_0x1a9453;},Game_Battler[_0x1f5c57(0x605)]['floatBattler']=function(_0x46ce14,_0x245b7b,_0x325b95){const _0x16db16=_0x1f5c57;if(!$gameSystem[_0x16db16(0x754)]())return;const _0x543c42=this['battler']();if(!_0x543c42)return;_0x543c42[_0x16db16(0xb00)](_0x46ce14,_0x245b7b,_0x325b95);},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x365)]=function(_0x16cbb7,_0x38e470){const _0x270680=_0x1f5c57;if(!$gameSystem['isSideView']())return;const _0x1cf453=this[_0x270680(0x4b2)]();if(!_0x1cf453)return;_0x1cf453[_0x270680(0x5d2)](_0x16cbb7,_0x38e470);},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xc31)]=function(_0x1445c9,_0x400087,_0x165994,_0x3307e0){const _0x41da3e=_0x1f5c57;if(!$gameSystem[_0x41da3e(0x754)]())return;const _0xacb9f8=this[_0x41da3e(0x4b2)]();if(!_0xacb9f8)return;_0xacb9f8['startSpin'](_0x1445c9,_0x400087,_0x165994,_0x3307e0);},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xb91)]=function(_0x282898,_0x4553de,_0x2fc6a1,_0x5c6590){const _0x105d6a=_0x1f5c57;if(!$gameSystem[_0x105d6a(0x754)]())return;const _0xe1b5aa=this[_0x105d6a(0x4b2)]();if(!_0xe1b5aa)return;if(this[_0x105d6a(0xbcf)]()){if(_0x105d6a(0x66a)===_0x105d6a(0x393)){const _0x3b4842=_0x21d4eb[_0x105d6a(0x20c)]();this['displayAction'](_0x529336,_0x3b4842),this['push'](_0x105d6a(0xab9),_0x597679,_0xed7aca,!![]),this[_0x105d6a(0x5af)](_0x105d6a(0x61f),_0x2c23b5,_0x23daac),this[_0x105d6a(0x5af)](_0x105d6a(0x757)),this[_0x105d6a(0x5af)](_0x105d6a(0x8a4),_0x1d73e1,_0x3da88c),this[_0x105d6a(0x5af)]('waitForAnimation');}else _0x282898*=-0x1,_0x4553de*=-0x1;}_0xe1b5aa[_0x105d6a(0xaa5)](_0x282898,_0x4553de,_0x2fc6a1,_0x5c6590);},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x64f)]=function(_0x3cea53,_0x7f66ff,_0x1c19ed,_0xd6b343){const _0x202618=_0x1f5c57;if(!$gameSystem[_0x202618(0x754)]())return;const _0x59c7bf=this[_0x202618(0x4b2)]();if(!_0x59c7bf)return;_0x59c7bf[_0x202618(0x944)](_0x3cea53,_0x7f66ff,_0x1c19ed,_0xd6b343);},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x4b5)]=function(_0xa10fcd,_0x3d4f7d,_0xa71844){const _0xfa6ed9=_0x1f5c57;if(!$gameSystem['isSideView']())return;const _0x440aaf=this[_0xfa6ed9(0x4b2)]();if(!_0x440aaf)return;_0x440aaf[_0xfa6ed9(0xb8d)](_0xa10fcd,_0x3d4f7d,_0xa71844);},Game_Battler['prototype'][_0x1f5c57(0x439)]=function(){const _0x144ce9=_0x1f5c57,_0xb75184=!!this[_0x144ce9(0x5b0)];this[_0x144ce9(0x5b0)]=undefined;if(_0xb75184){if(_0x144ce9(0x9f6)===_0x144ce9(0x9f6))this['requestMotionRefresh'](),this[_0x144ce9(0x37f)]();else return _0x3082bf[_0x144ce9(0x8bb)]?_0x3fdcae[_0x144ce9(0x990)](_0x144ce9(0x6e8)):_0x5ee1cc[_0x144ce9(0x6b3)][_0x144ce9(0xbba)][_0x144ce9(0xa6c)]['AutoBattleCancel'];}},Game_Battler['prototype'][_0x1f5c57(0x37f)]=function(){const _0x4a614d=_0x1f5c57;if(!SceneManager[_0x4a614d(0x2ba)]())return;const _0x4bc5a6=this[_0x4a614d(0x4b2)]();if(!_0x4bc5a6)return;let _0x47e139=this[_0x4a614d(0xbcf)]()?_0x4bc5a6[_0x4a614d(0xbdf)]:_0x4bc5a6[_0x4a614d(0xa8e)][_0x4a614d(0xbdf)];_0x47e139&&_0x47e139['setup'](0x0);},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x1e8)]=function(_0x45b903,_0xdd902,_0x5f5aff){const _0x2fe296=_0x1f5c57;if(this[_0x2fe296(0x951)]()&&!this[_0x2fe296(0x4d7)]())return;let _0x5a2c20=0x0,_0x44e173=0x0;_0x45b903[_0x2fe296(0x7a1)](/ATTACK[ ](\d+)/i)&&(_0x44e173=Number(RegExp['$1']),_0x44e173--);if(this[_0x2fe296(0xbcf)]()){const _0xa13ad8=this[_0x2fe296(0x21e)]();_0x5a2c20=_0xa13ad8[_0x44e173]?_0xa13ad8[_0x44e173][_0x2fe296(0x5fd)]:0x0;}else this[_0x2fe296(0x951)]()&&(_0x5a2c20=this[_0x2fe296(0x79d)]()[_0x2fe296(0x5fd)]||0x0);const _0x3d3c5d=$dataSystem[_0x2fe296(0xbc4)][_0x5a2c20];_0x45b903[_0x2fe296(0x7a1)](/attack/i)&&(_0x45b903=[_0x2fe296(0x56b),'swing','missile'][_0x3d3c5d[_0x2fe296(0x73a)]]||_0x2fe296(0x835)),this['_freezeMotionData']={'motionType':_0x45b903,'weaponImageId':_0xdd902?_0x3d3c5d[_0x2fe296(0x6da)]:0x0,'pattern':_0x5f5aff};},Game_Battler[_0x1f5c57(0x605)]['isFriendly']=function(_0x5818b9){const _0xd9fdc7=_0x1f5c57;if(!_0x5818b9)return![];return _0x5818b9['friendsUnit']()===this[_0xd9fdc7(0xa45)]();},Game_Battler['prototype'][_0x1f5c57(0x529)]=function(_0x3e1398){const _0x43fba4=_0x1f5c57;if(!_0x3e1398)return![];return _0x3e1398['opponentsUnit']()===this[_0x43fba4(0xa45)]();},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x381)]=function(){return![];},Game_Actor['prototype'][_0x1f5c57(0x381)]=function(){const _0x5b0660=_0x1f5c57;return this[_0x5b0660(0xc5d)]()[_0x5b0660(0x7a1)](/\$/i);},Game_Enemy['prototype']['hasStaticSvBattler']=function(){const _0x470824=_0x1f5c57;return this['hasSvBattler']()&&this[_0x470824(0x52e)]()[_0x470824(0x7a1)](/\$/i);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x696)]=Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x687)],Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x687)]=function(_0x3fb64f){const _0x1c021b=_0x1f5c57;VisuMZ['BattleCore'][_0x1c021b(0x696)][_0x1c021b(0x5a5)](this,_0x3fb64f),this[_0x1c021b(0xa1d)]();},Game_Actor[_0x1f5c57(0x605)]['initBattlePortrait']=function(){const _0x2b8370=_0x1f5c57;this[_0x2b8370(0xa72)]='';if(this[_0x2b8370(0x2f7)]()&&this[_0x2b8370(0x2f7)]()[_0x2b8370(0x9bc)][_0x2b8370(0x7a1)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)){if(_0x2b8370(0x37c)!=='KQGVl')this['_battlePortrait']=String(RegExp['$1']);else{if(this[_0x2b8370(0x3bd)]<=0x0)return;const _0x2aa517=this[_0x2b8370(0x812)]-this[_0x2b8370(0x3bd)],_0x6bf1a3=this[_0x2b8370(0x812)]/0x2,_0x4380dc=this[_0x2b8370(0xc2e)],_0x50958a=-_0x4380dc/_0x240f1e['pow'](_0x6bf1a3,0x2);this[_0x2b8370(0x7d2)]=_0x50958a*_0x5af9b0[_0x2b8370(0x416)](_0x2aa517-_0x6bf1a3,0x2)+_0x4380dc,this[_0x2b8370(0x3bd)]--;if(this[_0x2b8370(0x3bd)]<=0x0)return this['onJumpEnd']();}}},Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x845)]=function(){const _0x3f6710=_0x1f5c57;if(this[_0x3f6710(0x1e9)]()!==''){if(_0x3f6710(0x72a)==='aHyXD')return this[_0x3f6710(0x1e9)]();else _0xc1721c+='\x0a',_0x3c55c9+=_0x5a1f9b[_0x3f6710(0x93e)][0x0];}else{if(Imported[_0x3f6710(0xa5f)]&&this[_0x3f6710(0x6e9)]()!=='')return this[_0x3f6710(0x6e9)]();}return'';},Game_Actor['prototype'][_0x1f5c57(0x1e9)]=function(){const _0x21c62c=_0x1f5c57;if(this[_0x21c62c(0xa72)]===undefined)this[_0x21c62c(0xa1d)]();return this[_0x21c62c(0xa72)];},Game_Actor[_0x1f5c57(0x605)]['setBattlePortrait']=function(_0x17a444){const _0x1b6fe7=_0x1f5c57;if(this[_0x1b6fe7(0xa72)]===undefined)this[_0x1b6fe7(0xa1d)]();this[_0x1b6fe7(0xa72)]=_0x17a444;if(SceneManager[_0x1b6fe7(0x2ba)]()&&$gameParty['battleMembers']()[_0x1b6fe7(0x60e)](this)){if(_0x1b6fe7(0xb56)!=='SdUbO'){const _0x474a45=new _0x41ca0b(0x0,0x0,_0x4b6a55['width'],_0x2d46cb[_0x1b6fe7(0x53d)]);this['_commandNameWindow']=new _0x175af6(_0x474a45),this[_0x1b6fe7(0x618)]['opacity']=0x0,this[_0x1b6fe7(0x45b)](this[_0x1b6fe7(0x618)]),this[_0x1b6fe7(0xc3f)]();}else{const _0x292b23=SceneManager['_scene']['_statusWindow'];if(_0x292b23)_0x292b23['refreshActorPortrait'](this);}}},Game_Actor[_0x1f5c57(0x605)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x1f5c57(0x605)]['isAutoBattle']=function(){const _0x4cd7f7=_0x1f5c57;if(!this[_0x4cd7f7(0x588)]()&&BattleManager[_0x4cd7f7(0x391)])return!![];return Game_Battler[_0x4cd7f7(0x605)][_0x4cd7f7(0x434)][_0x4cd7f7(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)]['Game_Actor_makeActionList']=Game_Actor[_0x1f5c57(0x605)]['makeActionList'],Game_Actor[_0x1f5c57(0x605)]['makeActionList']=function(){const _0x53f794=_0x1f5c57;if(BattleManager[_0x53f794(0x391)]&&!ConfigManager[_0x53f794(0xb7a)])return this[_0x53f794(0x47d)]();else{if(_0x53f794(0xc29)==='TscZT'){return VisuMZ[_0x53f794(0x6b3)][_0x53f794(0x604)][_0x53f794(0x5a5)](this);;}else{const _0x4bbf8d=_0x5d9625(_0x5ef351['$1'])[_0x53f794(0xc8b)](),_0x14aeda=_0x518c6d(_0x5a31f7['$2']);_0x244d63[_0x4bbf8d]=_0x14aeda,_0x11f94d+=_0x14aeda;}}},Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x47d)]=function(){const _0x5b1bed=_0x1f5c57,_0x4f7053=[],_0x407af6=new Game_Action(this);return _0x407af6['setAttack'](),_0x4f7053[_0x5b1bed(0x5af)](_0x407af6),_0x4f7053;},Game_Actor['prototype'][_0x1f5c57(0xbc1)]=function(){const _0x9d6b10=_0x1f5c57;if(this[_0x9d6b10(0x70f)]()['note']['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if(_0x9d6b10(0x27b)==='ENPOO')return String(RegExp['$1'])[_0x9d6b10(0x450)](/[\r\n]+/);else this['battler']()&&this['battler']()['refreshMotion']();}else return VisuMZ[_0x9d6b10(0x6b3)][_0x9d6b10(0xbba)][_0x9d6b10(0x368)][_0x9d6b10(0xbdb)];},Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x481)]=function(){const _0x57fd8f=_0x1f5c57;if(this[_0x57fd8f(0xa99)][_0x57fd8f(0x29c)]!==undefined)return this[_0x57fd8f(0xa99)][_0x57fd8f(0x29c)];if(this[_0x57fd8f(0x2f7)]()[_0x57fd8f(0x9bc)][_0x57fd8f(0x7a1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x57fd8f(0x2db)!==_0x57fd8f(0x79c))this[_0x57fd8f(0xa99)][_0x57fd8f(0x29c)]=eval(RegExp['$1']),this[_0x57fd8f(0xa99)][_0x57fd8f(0x813)]=eval(RegExp['$2']);else{if(this[_0x57fd8f(0x289)]===_0x4680ce)return;this['_targetOpacity']=_0x30adec,this[_0x57fd8f(0x602)]=_0x4f9717,this[_0x57fd8f(0x6fa)]=_0x209bb5,this[_0x57fd8f(0xb06)]=_0x5143ff||_0x57fd8f(0x9b1);if(_0x370409<=0x0)this[_0x57fd8f(0x337)]=_0x684dfb;}}else this['_cache'][_0x57fd8f(0x29c)]=Game_Battler[_0x57fd8f(0x605)][_0x57fd8f(0x481)]['call'](this);return this[_0x57fd8f(0xa99)]['svAnchorX'];},Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0xa7c)]=function(){const _0x5e9143=_0x1f5c57;if(this[_0x5e9143(0xa99)][_0x5e9143(0x813)]!==undefined)return this[_0x5e9143(0xa99)][_0x5e9143(0x813)];return this['actor']()['note'][_0x5e9143(0x7a1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache']['svAnchorX']=eval(RegExp['$1']),this[_0x5e9143(0xa99)]['svAnchorY']=eval(RegExp['$2'])):_0x5e9143(0x794)!==_0x5e9143(0x794)?this[_0x5e9143(0x4f6)]():this[_0x5e9143(0xa99)][_0x5e9143(0x813)]=Game_Battler[_0x5e9143(0x605)][_0x5e9143(0xa7c)][_0x5e9143(0x5a5)](this),this[_0x5e9143(0xa99)][_0x5e9143(0x813)];},Game_Actor[_0x1f5c57(0x605)]['svBattlerShadowVisible']=function(){const _0x20796a=_0x1f5c57;if(this['_cache']['svShadow']!==undefined)return this[_0x20796a(0xa99)][_0x20796a(0xb92)];if(this[_0x20796a(0x2f7)]()[_0x20796a(0x9bc)]['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x20796a(0x994)!==_0x20796a(0x994)?_0x5444b3[_0x20796a(0xbe5)](_0x8c6db4,_0x3260ef):this[_0x20796a(0xa99)][_0x20796a(0xb92)]=!![];else this[_0x20796a(0x2f7)]()[_0x20796a(0x9bc)][_0x20796a(0x7a1)](/<SIDEVIEW HIDE SHADOW>/i)?'ggJrC'==='ggJrC'?this['_cache'][_0x20796a(0xb92)]=![]:_0x54524e=_0x1e63ab[this[_0x20796a(0x20d)][_0x1dcd10][_0x20796a(0x4b1)]]:this[_0x20796a(0xa99)][_0x20796a(0xb92)]=Game_Battler['prototype'][_0x20796a(0x57a)]['call'](this);return this['_cache']['svShadow'];},Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0xb44)]=function(){const _0x24d603=_0x1f5c57;return VisuMZ[_0x24d603(0x6b3)][_0x24d603(0xbba)][_0x24d603(0x1df)][_0x24d603(0xa3e)];},Game_Actor[_0x1f5c57(0x605)]['performWeaponAnimation']=function(){const _0x1ff977=_0x1f5c57,_0xff164d=this['weapons'](),_0x5cca5b=_0xff164d[0x0]?_0xff164d[0x0][_0x1ff977(0x5fd)]:0x0,_0x205e53=$dataSystem[_0x1ff977(0xbc4)][_0x5cca5b];_0x205e53&&this[_0x1ff977(0x561)](_0x205e53['weaponImageId']);},Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x6ce)]=function(_0x1abefc){const _0x3520ad=_0x1f5c57;Game_Battler[_0x3520ad(0x605)][_0x3520ad(0x6ce)]['call'](this,_0x1abefc),this[_0x3520ad(0x599)](_0x1abefc);},Game_Actor[_0x1f5c57(0x605)]['getAttackMotion']=function(){const _0x28edbf=_0x1f5c57,_0x32a166=this[_0x28edbf(0x21e)](),_0x1bebfc=_0x32a166[0x0]?_0x32a166[0x0][_0x28edbf(0x5fd)]:0x0;return $dataSystem[_0x28edbf(0xbc4)][_0x1bebfc];},Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x9bb)]=function(_0x59b2e6){const _0x6b64af=_0x1f5c57;_0x59b2e6=_0x59b2e6||0x1,_0x59b2e6--;const _0x2458c0=this[_0x6b64af(0x21e)]();return _0x2458c0[_0x59b2e6]?_0x2458c0[_0x59b2e6][_0x6b64af(0x6b6)]:0x0;},Game_Actor['prototype'][_0x1f5c57(0xbb8)]=function(_0x3a349b){const _0x2b3663=_0x1f5c57;_0x3a349b=_0x3a349b||0x1,_0x3a349b--;const _0xffcdd8=this['weapons'](),_0x2946f6=_0xffcdd8[_0x3a349b]?_0xffcdd8[_0x3a349b]['wtypeId']:0x0;return $dataSystem[_0x2b3663(0xbc4)][_0x2946f6];},Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x8c0)]=function(_0x2e1c02){const _0xc4a1a9=_0x1f5c57;_0x2e1c02=_0x2e1c02||0x1,_0x2e1c02--;const _0x1abe73=this['weapons'](),_0x565aa3=_0x1abe73[_0x2e1c02]?_0x1abe73[_0x2e1c02][_0xc4a1a9(0x5fd)]:0x0,_0x52e7a8=$dataSystem['attackMotions'][_0x565aa3];if(_0x52e7a8){if(_0xc4a1a9(0x2cb)!=='tGPXT'){if(_0x52e7a8['type']===0x0)_0xc4a1a9(0x379)!=='MgoKJ'?_0x4b12c5[_0xc4a1a9(0x8c0)](_0x23168f(_0x29a6be['$1'])):this[_0xc4a1a9(0x559)](_0xc4a1a9(0x56b));else{if(_0x52e7a8['type']===0x1)this['requestMotion'](_0xc4a1a9(0x835));else _0x52e7a8[_0xc4a1a9(0x73a)]===0x2&&this[_0xc4a1a9(0x559)](_0xc4a1a9(0x985));}this[_0xc4a1a9(0x561)](_0x52e7a8[_0xc4a1a9(0x6da)]);}else this[_0xc4a1a9(0x206)][_0xc4a1a9(0x665)](_0x16b34e),this[_0xc4a1a9(0xb3d)](_0x271f21)?this[_0xc4a1a9(0x295)]()[_0xc4a1a9(0x1dc)](_0x150194):this[_0xc4a1a9(0xb1c)]['removeChild'](_0x4860f4);}},Game_Battler['prototype'][_0x1f5c57(0x5da)]=function(_0x31842c){const _0x50087a=_0x1f5c57;this[_0x50087a(0xa8b)]=_0x31842c||0x0,this[_0x50087a(0xa99)]={};},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x507)]=function(){const _0x4c8145=_0x1f5c57;this[_0x4c8145(0xa8b)]=this['_activeWeaponSlot']||0x0,this[_0x4c8145(0xa8b)]++,this[_0x4c8145(0xa99)]={};},Game_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xb81)]=function(){this['_activeWeaponSlot']=undefined,this['_cache']={};},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xb83)]=Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x2ab)],Game_Actor['prototype'][_0x1f5c57(0x2ab)]=function(){const _0x599c80=_0x1f5c57;let _0x2b7bf3=VisuMZ[_0x599c80(0x6b3)][_0x599c80(0xb83)][_0x599c80(0x5a5)](this);if(this[_0x599c80(0x5b7)])return _0x2b7bf3;if(this['_activeWeaponSlot']!==undefined){if(_0x599c80(0x2e4)===_0x599c80(0x2e4)){this[_0x599c80(0x5b7)]=!![];const _0x14ad09=this[_0x599c80(0xa28)]();for(let _0x158c0d=0x0;_0x158c0d<_0x14ad09[_0x599c80(0x9fe)];_0x158c0d++){_0x14ad09[_0x158c0d]===0x1&&this[_0x599c80(0xa8b)]!==_0x158c0d&&(_0x2b7bf3[_0x158c0d]=null);}this[_0x599c80(0x5b7)]=undefined;}else _0x5c3f80['prototype'][_0x599c80(0x37a)][_0x599c80(0x5a5)](this,_0x275445);}return _0x2b7bf3;},Window_BattleLog['prototype']['getDualWieldTimes']=function(_0x5c9a26){const _0x1b8414=_0x1f5c57;if(_0x5c9a26[_0x1b8414(0xbcf)]()){if(_0x1b8414(0x427)!==_0x1b8414(0x427))_0x552ad2[_0x1b8414(0x203)]([_0x42e80c]);else return _0x5c9a26[_0x1b8414(0x21e)]()[_0x1b8414(0x9fe)]||0x1;}else{if('fRWYk'!=='zNJzy')return 0x1;else this[_0x1b8414(0x3cd)]=0x0,this[_0x1b8414(0x557)]=0x0;}},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x98d)]=function(_0x22ccf8,_0x3b61d9){const _0x323998=_0x1f5c57;_0x22ccf8&&_0x22ccf8[_0x323998(0xbcf)]()&&_0x22ccf8[_0x323998(0x5da)](_0x3b61d9),this['callNextMethod']();},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xc21)]=function(_0x5e89f7){const _0x1ed670=_0x1f5c57;if(_0x5e89f7&&_0x5e89f7[_0x1ed670(0xbcf)]()){if(_0x1ed670(0x563)==='UKczY')_0x5e89f7[_0x1ed670(0xb81)]();else{let _0x515ca0=_0x1ed670(0xb30);if(this[_0x1ed670(0x7ef)](_0x515ca0))return this[_0x1ed670(0xa99)][_0x515ca0];return this[_0x1ed670(0xa99)][_0x515ca0]=this['createBattleUIOffsetY'](this[_0x1ed670(0x2f7)]()),this['_cache'][_0x515ca0];}}this[_0x1ed670(0x68e)]();},Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x720)]=function(){const _0x568067=_0x1f5c57;let _0x1f3f3e=_0x568067(0x720);if(this[_0x568067(0x7ef)](_0x1f3f3e))return this[_0x568067(0xa99)][_0x1f3f3e];return this[_0x568067(0xa99)][_0x1f3f3e]=this[_0x568067(0x840)](this['actor']()),this[_0x568067(0xa99)][_0x1f3f3e];},Game_Actor[_0x1f5c57(0x605)][_0x1f5c57(0xb30)]=function(){const _0x220f6c=_0x1f5c57;let _0x4f9a59='battleUIOffsetY';if(this['checkCacheKey'](_0x4f9a59))return this[_0x220f6c(0xa99)][_0x4f9a59];return this[_0x220f6c(0xa99)][_0x4f9a59]=this[_0x220f6c(0x901)](this['actor']()),this['_cache'][_0x4f9a59];},VisuMZ[_0x1f5c57(0x6b3)]['Game_Enemy_setup']=Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x687)],Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x687)]=function(_0x2517e0,_0x519d39,_0x3cc994){const _0x2e80f9=_0x1f5c57;_0x2517e0=DataManager[_0x2e80f9(0x63e)](_0x2517e0),VisuMZ[_0x2e80f9(0x6b3)]['Game_Enemy_setup'][_0x2e80f9(0x5a5)](this,_0x2517e0,_0x519d39,_0x3cc994),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x2e80f9(0x95f)](),this['clearBattleCoreData'](),this[_0x2e80f9(0xbac)](),Imported[_0x2e80f9(0x838)]&&('HkynS'==='HkynS'?this[_0x2e80f9(0x833)]():this[_0x2e80f9(0x913)]());},Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x747)]=function(){const _0x3b08ae=_0x1f5c57,_0x1bbdab=VisuMZ['BattleCore'][_0x3b08ae(0xbba)]['Enemy'];this['_attackAnimationId']=_0x1bbdab[_0x3b08ae(0x9e0)],this[_0x3b08ae(0x8bc)]={};},Game_Enemy['prototype']['setupBattleCoreData']=function(){const _0x59409=_0x1f5c57,_0x323b7f=VisuMZ['BattleCore'][_0x59409(0xbba)][_0x59409(0xa0b)],_0x5aaa27=this['enemy']()[_0x59409(0x9bc)];this['_svBattlerData']={'name':'','wtypeId':_0x323b7f['WtypeId'],'collapse':_0x323b7f['AllowCollapse'],'motionIdle':_0x323b7f[_0x59409(0x9ac)],'width':_0x323b7f[_0x59409(0x2ea)]||0x40,'height':_0x323b7f['Height']||0x40,'anchorX':_0x323b7f['AnchorX']||0x0,'anchorY':_0x323b7f[_0x59409(0x8be)]||0x0,'shadow':_0x323b7f[_0x59409(0xab0)]};if(_0x5aaa27['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)){if('lnpVP'!==_0x59409(0x4a5)){let _0x54a3a3=_0x28c266[_0x59409(0x6b3)][_0x59409(0xafe)][_0x59409(0x5a5)](this,_0x450802);return _0x54a3a3=this[_0x59409(0xc4e)]['hitRate']*_0x54a3a3+this['_multipliers'][_0x59409(0x928)],_0x54a3a3;}else this[_0x59409(0x816)]=Number(RegExp['$1']);}const _0x115657=this[_0x59409(0x8bc)];if(_0x5aaa27[_0x59409(0x7a1)](/<SIDEVIEW BATTLER: (.*)>/i)){if('DsETs'!==_0x59409(0x407)){if(!_0x19fed5[_0x59409(0x2ba)]())return;if(!this[_0x59409(0x4b2)]())return;if(_0x387722[_0x59409(0x9fe)]<=0x0)return;_0x4209bc=_0x12abef||{},_0x3e02ab[_0x59409(0xad9)]=_0x27b215[_0x59409(0xad9)]||_0x59409(0x844),_0x383378[_0x59409(0x31d)]=_0x520e46[_0x59409(0x31d)]||[0x0,0x0,0x0,0x0],_0x1b13e7['flashDuration']=_0x5edf71['flashDuration']||0x0,this[_0x59409(0x4b2)]()[_0x59409(0x549)](_0x3688c1,_0x1a074b,_0x123e7e);}else _0x115657[_0x59409(0x310)]=String(RegExp['$1']);}else{if(_0x5aaa27[_0x59409(0x7a1)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x47fb56=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x59409(0x665)]('');_0x115657[_0x59409(0x310)]=DataManager[_0x59409(0x515)](_0x47fb56);}}_0x5aaa27[_0x59409(0x7a1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x115657['anchorX']=eval(RegExp['$1']),_0x115657['anchorY']=eval(RegExp['$2']));if(_0x5aaa27[_0x59409(0x7a1)](/<SIDEVIEW COLLAPSE>/i))_0x59409(0x798)==='eZrxX'?(_0xba2115=_0x3bfde3[_0x59409(0xb4d)]/0x2,_0x50ea51=_0x419adf[_0x59409(0x4f3)]/0x2):_0x115657[_0x59409(0x870)]=!![];else{if(_0x5aaa27['match'](/<SIDEVIEW NO COLLAPSE>/i)){if(_0x59409(0x741)!=='gQMiA')_0x115657[_0x59409(0x870)]=![];else{if(!_0x54deb5[_0x59409(0x831)])return;if(!_0x31caf6[_0x59409(0x831)][_0x59409(0x4d6)])return;if(!_0x43a102['VisuMZ_0_CoreEngine'])return;_0x1abb5c[_0x59409(0xa1c)](_0x3a95e8,_0x46a2ba);const _0x5ec575=_0x2f3d84['getLastPluginCommandInterpreter'](),_0x68d9f1=_0x3c745d[_0x59409(0x93c)](_0xf31caa[_0x59409(0x33b)]),_0x5e7500=_0x194e85[_0x59409(0x93c)](_0x19f7d6[_0x59409(0x2da)]);_0x591a45['requestPointAnimation'](_0x68d9f1,_0x5e7500,_0x1e1156[_0x59409(0xa87)],_0x3329fb[_0x59409(0x1ef)],_0x166757[_0x59409(0x21a)]),_0x56d3a7[_0x59409(0x42c)]&&_0x5ec575&&(_0xb9321b[_0x59409(0x831)]['_spriteset'][_0x59409(0x5c2)](),_0x5ec575['setWaitMode'](_0x59409(0x266)));}}}if(_0x5aaa27[_0x59409(0x7a1)](/<SIDEVIEW SHOW SHADOW>/i))_0x115657[_0x59409(0x263)]=!![];else _0x5aaa27['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x115657[_0x59409(0x263)]=![]);if(_0x5aaa27[_0x59409(0x7a1)](/<SIDEVIEW IDLE MOTION: (.*)>/i)){if('CeOMG'!==_0x59409(0xb20)){if(!this[_0x59409(0x868)])return;for(const _0x1bb24f of this[_0x59409(0x868)]){_0x1bb24f&&_0x1bb24f[_0x59409(0x9ee)]();}}else _0x115657[_0x59409(0x8aa)]=String(RegExp['$1'])[_0x59409(0x281)]()[_0x59409(0xc8b)]();}else{if(_0x5aaa27[_0x59409(0x7a1)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if('ZFdKk'==='ZFdKk'){const _0x49dd88=String(RegExp['$1'])[_0x59409(0x450)](/[\r\n]+/)['remove']('');_0x115657[_0x59409(0x8aa)]=DataManager['processRandomizedData'](_0x49dd88);}else return this[_0x59409(0x2c1)]()[_0x59409(0x9d3)](_0x46d5b6=>_0x46d5b6[_0x59409(0xc66)]());}}_0x5aaa27[_0x59409(0x7a1)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x115657[_0x59409(0xac5)]=Number(RegExp['$1']),_0x115657[_0x59409(0x53d)]=Number(RegExp['$2']));if(_0x5aaa27[_0x59409(0x7a1)](/<SIDEVIEW WEAPON: (.*)>/i))_0x115657[_0x59409(0x5fd)]=DataManager[_0x59409(0x6ef)](RegExp['$1']);else{if(_0x5aaa27[_0x59409(0x7a1)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if('RzTCM'===_0x59409(0x271))_0x4e28f8[_0x59409(0x6b3)][_0x59409(0x6d5)][_0x59409(0x5a5)](this),this['isDTB']()&&this['isSkipPartyCommandWindow']()&&!this[_0x59409(0x7a2)]&&_0x2c2233['canInput']()&&this[_0x59409(0xa8d)]();else{const _0x984105=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x59409(0x665)](''),_0xa38bd0=DataManager[_0x59409(0x515)](_0x984105);_0x115657['wtypeId']=DataManager[_0x59409(0x6ef)](_0xa38bd0);}}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x18ba1d=this[_0x59409(0x5df)]();for(const _0x39fafd of _0x18ba1d){const _0xd300b=this[_0x59409(0x46c)](_0x39fafd)[_0x59409(0x339)]['toUpperCase']()[_0x59409(0xc8b)](),_0x24127a=_0x39fafd['toUpperCase']()[_0x59409(0xc8b)]();if(_0x5aaa27[_0x59409(0x7a1)](VisuMZ['ElementStatusCore'][_0x59409(0x72d)][_0x59409(0x609)[_0x59409(0x98c)](_0x24127a,_0xd300b)]))_0x115657['name']=String(RegExp['$1']);else{if(_0x5aaa27['match'](VisuMZ['ElementStatusCore'][_0x59409(0x72d)][_0x59409(0xa00)[_0x59409(0x98c)](_0x24127a,_0xd300b)])){const _0x2451eb=String(RegExp['$1'])[_0x59409(0x450)](/[\r\n]+/)[_0x59409(0x665)]('');_0x115657[_0x59409(0x310)]=DataManager['processRandomizedData'](_0x2451eb);}}if(_0x5aaa27[_0x59409(0x7a1)](VisuMZ[_0x59409(0x933)][_0x59409(0x72d)][_0x59409(0x6cc)[_0x59409(0x98c)](_0x24127a,_0xd300b)]))_0x115657[_0x59409(0x5fd)]=DataManager[_0x59409(0x6ef)](RegExp['$1']);else{if(_0x5aaa27['match'](VisuMZ['ElementStatusCore'][_0x59409(0x72d)][_0x59409(0x6c8)['format'](_0x24127a,_0xd300b)])){const _0x136377=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x59409(0x665)](''),_0x2715ff=DataManager['processRandomizedData'](_0x136377);_0x115657['wtypeId']=DataManager[_0x59409(0x6ef)](_0x2715ff);}}if(_0x5aaa27['match'](VisuMZ[_0x59409(0x933)][_0x59409(0x72d)][_0x59409(0xb37)[_0x59409(0x98c)](_0x24127a,_0xd300b)]))_0x115657[_0x59409(0x8aa)]=String(RegExp['$1'])[_0x59409(0x281)]()[_0x59409(0xc8b)]();else{if(_0x5aaa27['match'](VisuMZ[_0x59409(0x933)][_0x59409(0x72d)][_0x59409(0xc77)['format'](_0x24127a,_0xd300b)])){const _0x46b9b3=String(RegExp['$1'])[_0x59409(0x450)](/[\r\n]+/)['remove']('');_0x115657[_0x59409(0x8aa)]=DataManager['processRandomizedData'](_0x46b9b3);}}}}},Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0xa4e)]=function(){const _0x5cc17e=_0x1f5c57;return this[_0x5cc17e(0x816)]||0x0;},Game_Enemy[_0x1f5c57(0x605)]['attackAnimationId2']=function(){return this['attackAnimationId1']();},Game_Enemy[_0x1f5c57(0x605)]['attackAnimationIdSlot']=function(_0x134e4c){const _0xf6f857=_0x1f5c57;return this[_0xf6f857(0xa4e)]();},Game_Enemy[_0x1f5c57(0x605)]['canBattlerMove']=function(){const _0x2af1a8=_0x1f5c57;if(this[_0x2af1a8(0xc2a)]()['note'][_0x2af1a8(0x7a1)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x2af1a8(0x605)][_0x2af1a8(0x8b2)][_0x2af1a8(0x5a5)](this);},Game_Enemy[_0x1f5c57(0x605)]['isBattlerGrounded']=function(){const _0x2f36fc=_0x1f5c57;if(this['enemy']()['note'][_0x2f36fc(0x7a1)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x1f5c57(0x605)]['skills']=function(){const _0x123102=_0x1f5c57,_0x31ed0b=[];for(const _0x46c762 of this['enemy']()[_0x123102(0x299)]){if(_0x123102(0x69c)===_0x123102(0x69c)){const _0x4295ca=$dataSkills[_0x46c762[_0x123102(0x3a1)]];if(_0x4295ca&&!_0x31ed0b[_0x123102(0x60e)](_0x4295ca))_0x31ed0b[_0x123102(0x5af)](_0x4295ca);}else _0x1fcc48[_0x123102(0x203)]([_0x520405]);}return _0x31ed0b;},Game_Enemy[_0x1f5c57(0x605)]['battleUIOffsetX']=function(){const _0x51ea92=_0x1f5c57;let _0x419d1c=_0x51ea92(0x720);if(this[_0x51ea92(0x7ef)](_0x419d1c))return this[_0x51ea92(0xa99)][_0x419d1c];return this[_0x51ea92(0xa99)][_0x419d1c]=this[_0x51ea92(0x840)](this[_0x51ea92(0xc2a)]()),this['_cache'][_0x419d1c];},Game_Enemy['prototype'][_0x1f5c57(0xb30)]=function(){const _0x36cfd1=_0x1f5c57;let _0x5c0dc5=_0x36cfd1(0xb30);if(this['checkCacheKey'](_0x5c0dc5))return this[_0x36cfd1(0xa99)][_0x5c0dc5];return this[_0x36cfd1(0xa99)][_0x5c0dc5]=this['createBattleUIOffsetY'](this[_0x36cfd1(0xc2a)]()),this[_0x36cfd1(0xa99)][_0x5c0dc5];},Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x79d)]=function(){const _0x43879d=_0x1f5c57;if(this[_0x43879d(0x8bc)]!==undefined)return this[_0x43879d(0x8bc)];return this[_0x43879d(0xbac)](),this[_0x43879d(0x8bc)];},Game_Enemy['prototype'][_0x1f5c57(0x4d7)]=function(){const _0x41c347=_0x1f5c57;return this[_0x41c347(0x79d)]()[_0x41c347(0x310)]!=='';},Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x52e)]=function(){const _0x161388=_0x1f5c57;return this['svBattlerData']()[_0x161388(0x310)];},Game_Enemy[_0x1f5c57(0x605)]['battlerSmoothImage']=function(){const _0x4135c0=_0x1f5c57;return this[_0x4135c0(0x4d7)]()?VisuMZ['BattleCore']['Settings'][_0x4135c0(0x1df)]['SmoothImage']:VisuMZ[_0x4135c0(0x6b3)][_0x4135c0(0xbba)][_0x4135c0(0xa0b)]['SmoothImage'];},Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x6ce)]=function(_0x3fe115){const _0x57bbed=_0x1f5c57;Game_Battler[_0x57bbed(0x605)][_0x57bbed(0x6ce)][_0x57bbed(0x5a5)](this,_0x3fe115);if(this[_0x57bbed(0x4d7)]())this[_0x57bbed(0x599)](_0x3fe115);},Game_Enemy['prototype'][_0x1f5c57(0xb49)]=function(){const _0x401d6b=_0x1f5c57,_0x47ef33=this[_0x401d6b(0x79d)]()['wtypeId']||0x0,_0x82580=$dataSystem[_0x401d6b(0xbc4)][_0x47ef33];if(_0x82580){if(_0x401d6b(0xc8e)===_0x401d6b(0xc8e)){if(_0x82580[_0x401d6b(0x73a)]===0x0)_0x401d6b(0xc8f)!==_0x401d6b(0xc8f)?(this['_svBattlerSprite']=new _0x391c07(_0x28f8ac),this[_0x401d6b(0xaec)]()):this[_0x401d6b(0x559)](_0x401d6b(0x56b));else{if(_0x82580['type']===0x1){if(_0x401d6b(0x635)!==_0x401d6b(0x635))return _0xadd302[_0x401d6b(0x6b3)][_0x401d6b(0xbba)][_0x401d6b(0x368)][_0x401d6b(0xbdb)];else this[_0x401d6b(0x559)](_0x401d6b(0x835));}else _0x82580[_0x401d6b(0x73a)]===0x2&&this[_0x401d6b(0x559)](_0x401d6b(0x985));}}else _0x2dd048--,_0x1710d5++;}},Game_Enemy['prototype'][_0x1f5c57(0x913)]=function(){const _0x264010=_0x1f5c57,_0x120304=this['svBattlerData']()[_0x264010(0x5fd)]||0x0,_0x10699a=$dataSystem[_0x264010(0xbc4)][_0x120304];_0x10699a&&(_0x264010(0x85f)===_0x264010(0x971)?(_0x3de9e0[_0x264010(0x6b3)][_0x264010(0x2c6)]['call'](this),this[_0x264010(0x68e)]()):this[_0x264010(0x561)](_0x10699a[_0x264010(0x6da)]));},Game_Enemy['prototype'][_0x1f5c57(0x7f1)]=function(){const _0x14b395=_0x1f5c57,_0x3869d4=this[_0x14b395(0x79d)]()['wtypeId']||0x0;return $dataSystem['attackMotions'][_0x3869d4];},Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0xbb8)]=function(_0x2d60b5){const _0x4c9d5d=_0x1f5c57;return this[_0x4c9d5d(0x7f1)]();},Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x4dc)]=function(){const _0x3b7d11=_0x1f5c57;Game_Battler['prototype'][_0x3b7d11(0x4dc)][_0x3b7d11(0x5a5)](this),this[_0x3b7d11(0x49a)]()&&this[_0x3b7d11(0x4d7)]()&&this[_0x3b7d11(0x559)]('damage'),SoundManager['playEnemyDamage']();},Game_Enemy['prototype'][_0x1f5c57(0x890)]=function(){const _0x1a3391=_0x1f5c57;Game_Battler[_0x1a3391(0x605)]['performEvasion'][_0x1a3391(0x5a5)](this),this['requestMotion']('evade');},Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x803)]=function(){const _0x58fe0b=_0x1f5c57;Game_Battler['prototype']['performMagicEvasion'][_0x58fe0b(0x5a5)](this),this['requestMotion'](_0x58fe0b(0x3c4));},Game_Enemy['prototype'][_0x1f5c57(0x395)]=function(){const _0x557827=_0x1f5c57;Game_Battler[_0x557827(0x605)][_0x557827(0x395)]['call'](this),this[_0x557827(0xb49)]();},Game_Enemy['prototype'][_0x1f5c57(0x1f9)]=function(){if(this['hasSvBattler']()){if(this['collapseType']()>=0x1)return!![];return this['svBattlerData']()['collapse'];}else return!![];},Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x481)]=function(){const _0x115ed4=_0x1f5c57;return this[_0x115ed4(0x79d)]()['anchorX'];},Game_Enemy[_0x1f5c57(0x605)]['svBattlerAnchorY']=function(){const _0x51d760=_0x1f5c57;return this[_0x51d760(0x79d)]()[_0x51d760(0xb41)];},Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x57a)]=function(){const _0x362a49=_0x1f5c57;return this[_0x362a49(0x79d)]()[_0x362a49(0x263)];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xbf6)]=Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x54d)],Game_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x54d)]=function(_0x4e7643){const _0x2cbc8a=_0x1f5c57;VisuMZ[_0x2cbc8a(0x6b3)][_0x2cbc8a(0xbf6)]['call'](this,_0x4e7643),this['clearBattleCoreData'](),this[_0x2cbc8a(0xbac)]();const _0x28f9cc=this[_0x2cbc8a(0x4b2)]();if(_0x28f9cc)_0x28f9cc[_0x2cbc8a(0x582)](this);},Game_Unit['prototype'][_0x1f5c57(0x87c)]=function(_0x550cde){const _0x1e7049=_0x1f5c57;for(const _0x113e06 of this[_0x1e7049(0x907)]()){if(_0x1e7049(0xa10)===_0x1e7049(0x9fd))this[_0x1e7049(0x8cd)]&&this[_0x1e7049(0x45b)](this[_0x1e7049(0x8cd)]);else{if(_0x113e06)_0x113e06[_0x1e7049(0x87c)](_0x550cde);}}},Game_Unit[_0x1f5c57(0x605)][_0x1f5c57(0x259)]=function(){const _0x34fcfe=_0x1f5c57,_0x533b76=this[_0x34fcfe(0x227)]();return _0x533b76[Math[_0x34fcfe(0x60a)](_0x533b76[_0x34fcfe(0x9fe)])];},VisuMZ['BattleCore'][_0x1f5c57(0x53f)]=Game_Party[_0x1f5c57(0x605)]['addActor'],Game_Party[_0x1f5c57(0x605)][_0x1f5c57(0x1cc)]=function(_0x37a28e){const _0x5e57db=_0x1f5c57;VisuMZ[_0x5e57db(0x6b3)][_0x5e57db(0x53f)]['call'](this,_0x37a28e),BattleManager[_0x5e57db(0x74c)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x7f2)]=Game_Party['prototype'][_0x1f5c57(0x2df)],Game_Party[_0x1f5c57(0x605)][_0x1f5c57(0x2df)]=function(_0x2b43d6){const _0x21aafa=_0x1f5c57;VisuMZ[_0x21aafa(0x6b3)]['Game_Party_removeActor'][_0x21aafa(0x5a5)](this,_0x2b43d6),BattleManager[_0x21aafa(0x74c)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x35e)]=Game_Troop[_0x1f5c57(0x605)]['setup'],Game_Troop['prototype']['setup']=function(_0x350ecf){const _0x5a23e2=_0x1f5c57;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x5a23e2(0x4f2)](_0x350ecf),VisuMZ[_0x5a23e2(0x6b3)][_0x5a23e2(0x35e)][_0x5a23e2(0x5a5)](this,_0x350ecf);},VisuMZ['BattleCore'][_0x1f5c57(0x442)]=Game_Troop[_0x1f5c57(0x605)][_0x1f5c57(0x7c4)],Game_Troop[_0x1f5c57(0x605)][_0x1f5c57(0x7c4)]=function(){const _0x42f211=_0x1f5c57;let _0x5a89d4=VisuMZ[_0x42f211(0x6b3)][_0x42f211(0x442)][_0x42f211(0x5a5)](this);return this[_0x42f211(0x2d6)]&&(_0x5a89d4*=this[_0x42f211(0x2d6)]()),Math[_0x42f211(0x702)](_0x5a89d4);},Game_Troop[_0x1f5c57(0x605)]['expRate']=function(){return 0x1;},VisuMZ['BattleCore'][_0x1f5c57(0x96a)]=Game_Map['prototype'][_0x1f5c57(0x636)],Game_Map[_0x1f5c57(0x605)][_0x1f5c57(0x636)]=function(){const _0x29f9ed=_0x1f5c57;VisuMZ['BattleCore'][_0x29f9ed(0x96a)][_0x29f9ed(0x5a5)](this),this['setupBattlebackBattleCore']();},Game_Map[_0x1f5c57(0x605)][_0x1f5c57(0xc99)]=function(){const _0x265722=_0x1f5c57;this[_0x265722(0x1e7)]={},this[_0x265722(0xb89)]={};if(!$dataMap)return;const _0x4d16c2=$dataMap['note'];if(!_0x4d16c2)return;const _0x4b432a=_0x4d16c2[_0x265722(0x7a1)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x4b432a)for(const _0x3e5e57 of _0x4b432a){if('kDseX'===_0x265722(0xc7b)){_0x3e5e57['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x248569=Number(RegExp['$1']),_0x3892b6=Number(RegExp['$2']),_0x4c0f0d=_0x3892b6===0x1?this[_0x265722(0x1e7)]:this[_0x265722(0xb89)],_0x7b44e5=String(RegExp['$3']);_0x4c0f0d[_0x248569]=_0x7b44e5;}else _0x4cc002['BattleCore']['Sprite_Weapon_loadBitmap'][_0x265722(0x5a5)](this),this[_0x265722(0x302)]&&(this[_0x265722(0x302)]['smooth']=_0x1e6c61[_0x265722(0x6b3)]['Settings']['Actor'][_0x265722(0xa3e)]);}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x8f6)]=Game_Map[_0x1f5c57(0x605)][_0x1f5c57(0x9c9)],Game_Map['prototype'][_0x1f5c57(0x9c9)]=function(){const _0x15a2d2=_0x1f5c57;if(!BattleManager[_0x15a2d2(0x8f5)]()){const _0x4785fe=$gamePlayer[_0x15a2d2(0xbd9)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x15a2d2(0x1e7)][_0x4785fe]){if(_0x15a2d2(0xb95)!=='eMYGf')return this[_0x15a2d2(0x1e7)][_0x4785fe];else for(const _0x491cbc of _0x1b6c06){const _0x387ce5=_0x1616b2[0x0][_0x15a2d2(0x98c)](_0x491cbc[0x0]),_0xeaa727=_0x2b7719[0x1][_0x15a2d2(0x98c)](_0x491cbc[0x1]),_0xe1a5ed=new _0x4a4b4c(_0x59bde7['format'](_0xeaa727),'i');_0x5f1776[_0x387ce5]=_0xe1a5ed;}}}return VisuMZ['BattleCore'][_0x15a2d2(0x8f6)][_0x15a2d2(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)]['Game_Map_battleback2Name']=Game_Map[_0x1f5c57(0x605)]['battleback2Name'],Game_Map[_0x1f5c57(0x605)][_0x1f5c57(0x99a)]=function(){const _0x3a83bf=_0x1f5c57;if(!BattleManager['isBattleTest']()){const _0x17bf66=$gamePlayer[_0x3a83bf(0xbd9)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3a83bf(0x1e7)]&&this[_0x3a83bf(0xb89)][_0x17bf66])return this[_0x3a83bf(0xb89)][_0x17bf66];}return VisuMZ['BattleCore'][_0x3a83bf(0x44d)][_0x3a83bf(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x2f9)]=Game_Map[_0x1f5c57(0x605)]['encounterList'],Game_Map[_0x1f5c57(0x605)][_0x1f5c57(0x9e2)]=function(){const _0x1cd2bd=_0x1f5c57;let _0x1542b4=JsonEx['makeDeepCopy'](VisuMZ['BattleCore']['Game_Map_encounterList']['call'](this));return VisuMZ[_0x1cd2bd(0x6b3)][_0x1cd2bd(0x4f4)](_0x1542b4);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x4f4)]=function(_0x313895){const _0x166e60=_0x1f5c57;var _0x543cce,_0x42dfd1,_0x1a881c;for(_0x1a881c=_0x313895[_0x166e60(0x9fe)]-0x1;_0x1a881c>0x0;_0x1a881c--){_0x543cce=Math[_0x166e60(0x617)](Math[_0x166e60(0x77f)]()*(_0x1a881c+0x1)),_0x42dfd1=_0x313895[_0x1a881c],_0x313895[_0x1a881c]=_0x313895[_0x543cce],_0x313895[_0x543cce]=_0x42dfd1;}return _0x313895;},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x4bd)]=Game_Interpreter['prototype'][_0x1f5c57(0x943)],Game_Interpreter[_0x1f5c57(0x605)]['command357']=function(_0x1930e9){const _0x4b20a7=_0x1f5c57;return $gameTemp[_0x4b20a7(0xab7)](this),VisuMZ['BattleCore'][_0x4b20a7(0x4bd)][_0x4b20a7(0x5a5)](this,_0x1930e9);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x9c7)]=Game_Interpreter[_0x1f5c57(0x605)][_0x1f5c57(0x52c)],Game_Interpreter[_0x1f5c57(0x605)]['updateWaitMode']=function(){const _0x2a7435=_0x1f5c57;if(SceneManager[_0x2a7435(0x2ba)]())switch(this[_0x2a7435(0x651)]){case _0x2a7435(0x9ce):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x2a7435(0x2e9)]()[_0x2a7435(0x4c7)]>0x0)return!![];this[_0x2a7435(0x651)]='';}break;case'battleAnimation':if(BattleManager['_spriteset'][_0x2a7435(0x4b0)]())return!![];this['_waitMode']='';break;case _0x2a7435(0x3a7):if(Imported['VisuMZ_3_ActSeqCamera']){if('ASxGN'!=='EnOCN'){if($gameScreen['battleCameraData']()['cameraDuration']>0x0)return!![];if($gameScreen[_0x2a7435(0x2e9)]()[_0x2a7435(0x290)]>0x0)return!![];this[_0x2a7435(0x651)]='';}else{const _0x204caa=new _0x1d141c();_0x204caa[_0x2a7435(0x302)]=_0x21ade7[_0x2a7435(0x89c)](_0xd5892a[_0x2a7435(0x7bc)]),_0x204caa['x']=_0x4fa01e[_0x2a7435(0x322)]||0x0,_0x204caa['y']=_0x3ba6a8[_0x2a7435(0x364)]||0x0,this[_0x2a7435(0x45b)](_0x204caa),this[_0x2a7435(0x5a6)]=_0x204caa;}}break;case _0x2a7435(0x66f):if(BattleManager['_spriteset']['isEffecting']())return!![];this[_0x2a7435(0x651)]='';break;case _0x2a7435(0x78a):if(BattleManager['_spriteset']['isAnyoneFloating']())return!![];this['_waitMode']='';break;case'battleJump':if(BattleManager[_0x2a7435(0x4d6)]['isAnyoneJumping']())return!![];this[_0x2a7435(0x651)]='';break;case _0x2a7435(0xbc3):if(BattleManager['_logWindow']['isBusy']())return!![];this[_0x2a7435(0x651)]='';break;case _0x2a7435(0x397):if(BattleManager[_0x2a7435(0x4d6)][_0x2a7435(0x598)]())return!![];this[_0x2a7435(0x651)]='';break;case _0x2a7435(0x54a):if(BattleManager[_0x2a7435(0x4d6)][_0x2a7435(0xb31)]())return!![];this[_0x2a7435(0x651)]='';break;case _0x2a7435(0x547):if(BattleManager['_spriteset'][_0x2a7435(0x3c1)]())return!![];this[_0x2a7435(0x651)]='';break;case'battleSpriteSkew':if(BattleManager[_0x2a7435(0x4d6)][_0x2a7435(0x31a)]())return!![];this['_waitMode']='';break;case _0x2a7435(0xa26):if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager[_0x2a7435(0x4d6)][_0x2a7435(0xc22)]())return!![];this['_waitMode']='';}break;case _0x2a7435(0x265):if(Imported[_0x2a7435(0x908)]){if($gameScreen[_0x2a7435(0x2e9)]()[_0x2a7435(0x49c)]>0x0)return!![];this[_0x2a7435(0x651)]='';}break;case _0x2a7435(0x681):if(BattleManager[_0x2a7435(0x4d6)][_0x2a7435(0xc75)]())return!![];this['_waitMode']='';break;case _0x2a7435(0x981):if(Imported[_0x2a7435(0x908)]){if(_0x2a7435(0x6ed)==='bJFqQ'){if($gameScreen[_0x2a7435(0x2e9)]()['zoomDuration']>0x0)return!![];this[_0x2a7435(0x651)]='';}else _0x25dc8c=_0x9dbea1>=_0x2f1688?_0x235c97:_0x8a9d1;}break;case _0x2a7435(0x854):if(Imported[_0x2a7435(0x32a)]){if(BattleManager[_0x2a7435(0x4d6)][_0x2a7435(0x673)]){if(BattleManager[_0x2a7435(0x4d6)]['isAnyoneInjectAniPrepping']())return!![];this[_0x2a7435(0x651)]=_0x2a7435(0xb27);}else'rGomk'===_0x2a7435(0x7d0)?this[_0x2a7435(0x651)]='':_0x34beeb=_0x2a7435(0x7e5);break;}break;case _0x2a7435(0xb27):if(Imported[_0x2a7435(0x32a)]){if(BattleManager[_0x2a7435(0x4d6)]['isAnyoneInjectAnimating']())return!![];this[_0x2a7435(0x651)]='';}break;}return VisuMZ[_0x2a7435(0x6b3)][_0x2a7435(0x9c7)][_0x2a7435(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xa22)]=Game_Interpreter[_0x1f5c57(0x605)][_0x1f5c57(0x3e0)],Game_Interpreter[_0x1f5c57(0x605)][_0x1f5c57(0x3e0)]=function(_0x59a1dd){const _0x3109f9=_0x1f5c57;if(!$gameParty[_0x3109f9(0x668)]())return this['command301_PreBattleEvent'](_0x59a1dd);else{if(_0x3109f9(0x42d)!=='JvOuw')return VisuMZ['BattleCore'][_0x3109f9(0xa22)][_0x3109f9(0x5a5)](this,_0x59a1dd);else{const _0x571070=_0x35ead4[this[_0x3109f9(0xb73)][_0x3109f9(0x315)]()];if(!_0x571070)return;if(!this[_0x3109f9(0xb54)](_0x571070))return;const _0x29925b=this[_0x3109f9(0x94b)](),_0x2da7a1=_0x230c44[_0x3109f9(0x3eb)](_0x571070),_0x2b2cd1=_0x36c6fb[_0x3109f9(0x800)](_0x571070),_0x5198bf=_0x29925b===_0x3109f9(0x245)?_0x2da7a1:_0x3109f9(0x573)[_0x3109f9(0x98c)](_0x2b2cd1,_0x2da7a1);this[_0x3109f9(0xc54)](_0x5198bf,_0x3109f9(0xbea),this['_actor'][_0x3109f9(0xb80)]());}}},Game_Interpreter[_0x1f5c57(0x605)][_0x1f5c57(0x682)]=function(_0x749529){const _0xb98b96=_0x1f5c57;return VisuMZ['BattleCore'][_0xb98b96(0xa22)][_0xb98b96(0x5a5)](this,_0x749529),BattleManager[_0xb98b96(0x86a)](_0x228043=>{const _0x35ff12=_0xb98b96;this[_0x35ff12(0xc94)][this[_0x35ff12(0x883)]]=_0x228043;}),!![];},VisuMZ[_0x1f5c57(0x6b3)]['CheckMapBattleEventValid']=function(_0x468c4e){const _0x267b15=_0x1f5c57,_0x1c4760=$dataCommonEvents[_0x468c4e];if(!_0x1c4760)return![];if(_0x1c4760[_0x267b15(0xc47)][_0x267b15(0x9fe)]<=0x1)return![];return!![];},Game_Interpreter[_0x1f5c57(0x605)][_0x1f5c57(0x2fa)]=function(_0x263dfe){const _0x37083b=_0x1f5c57,_0x57df4c=VisuMZ[_0x37083b(0x6b3)][_0x37083b(0xbba)][_0x37083b(0x92c)],_0x4a99d2=_0x57df4c[_0x37083b(0x548)],_0xfb8b35=$dataCommonEvents[_0x4a99d2];if(_0xfb8b35&&VisuMZ[_0x37083b(0x6b3)][_0x37083b(0xac0)](_0x4a99d2)){if(_0x37083b(0x620)===_0x37083b(0x620)){const _0x46899b=this[_0x37083b(0xaae)]()?this[_0x37083b(0x2c4)]:0x0,_0x2713cb=_0xfb8b35['list'];this['setupChild'](_0x2713cb,_0x46899b),this[_0x37083b(0x20d)]=JsonEx[_0x37083b(0x215)](this['_list']);const _0x5439cd={'code':0xbc3,'indent':this[_0x37083b(0x883)],'parameters':JsonEx[_0x37083b(0x215)](_0x263dfe)};return this[_0x37083b(0x20d)][_0x37083b(0x2b8)](this[_0x37083b(0xb15)]+0x1,0x0,_0x5439cd),!![];}else{const _0x205fd1=this[_0x37083b(0x940)](_0x22ebec),_0x868bc0=this[_0x37083b(0xbd7)](_0x46bf53),_0x596584=this[_0x37083b(0x5ed)](_0x868bc0)[_0x37083b(0xac5)];this[_0x37083b(0x9ca)](this[_0x37083b(0x392)](_0x5004da));const _0x48fbb3=this[_0x37083b(0x589)]();if(_0x48fbb3===_0x37083b(0x7e5))this[_0x37083b(0x2c9)](_0x868bc0,_0x205fd1['x']+_0x205fd1[_0x37083b(0xac5)]-_0x596584,_0x205fd1['y'],_0x596584);else{if(_0x48fbb3===_0x37083b(0x2d8)){const _0x3341da=_0x205fd1['x']+_0x40e33d[_0x37083b(0x617)]((_0x205fd1[_0x37083b(0xac5)]-_0x596584)/0x2);this[_0x37083b(0x2c9)](_0x868bc0,_0x3341da,_0x205fd1['y'],_0x596584);}else this[_0x37083b(0x2c9)](_0x868bc0,_0x205fd1['x'],_0x205fd1['y'],_0x596584);}}}else{if(_0x37083b(0xae3)!==_0x37083b(0xae3)){const _0x1ace0e=this['isAlive'](),_0x2ba630=this[_0x37083b(0x307)]();_0x32408e[_0x37083b(0x6b3)][_0x37083b(0x6bc)][_0x37083b(0x5a5)](this,_0x4f5432),this['isEnemy']()&&_0x1ace0e&&this['isDead']()&&(this['_visualHpGauge_JustDied']=!this[_0x37083b(0xa52)](),_0x6301fd['registerDefeatedEnemy'](this[_0x37083b(0x74b)]())),_0xc8f79[_0x37083b(0x2ba)]()&&_0x2ba630!==this['stateMotionIndex']()&&(this[_0x37083b(0x4b2)]()&&this[_0x37083b(0x4b2)]()[_0x37083b(0x485)]());}else return VisuMZ[_0x37083b(0x6b3)][_0x37083b(0xa22)]['call'](this,_0x263dfe);}},VisuMZ[_0x1f5c57(0x6b3)]['BattleManager_onEncounter']=BattleManager[_0x1f5c57(0xa3c)],BattleManager['onEncounter']=function(){const _0x3eb5f6=_0x1f5c57;VisuMZ[_0x3eb5f6(0x6b3)][_0x3eb5f6(0x209)][_0x3eb5f6(0x5a5)](this),this[_0x3eb5f6(0x312)]();},BattleManager['onEncounterBattleCore']=function(){const _0x364a0a=_0x1f5c57,_0x5666ee=VisuMZ[_0x364a0a(0x6b3)][_0x364a0a(0xbba)]['Mechanics'],_0x4a1f4b=_0x5666ee['BattleStartEvent'];_0x4a1f4b&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x4a1f4b)&&(_0x364a0a(0x40c)!==_0x364a0a(0x783)?(this[_0x364a0a(0x83c)]=!![],$gameTemp[_0x364a0a(0x3ff)](_0x5666ee['BattleStartEvent']),$gameMap[_0x364a0a(0x858)](),$gameMap[_0x364a0a(0xc4f)][_0x364a0a(0xb6e)]=!![]):_0x337abc=_0x44a2fc[this[_0x364a0a(0xb73)][_0x364a0a(0x315)]()]),_0x5666ee[_0x364a0a(0x425)]>0x0&&(this[_0x364a0a(0x996)]=!![]);},VisuMZ[_0x1f5c57(0x6b3)]['Scene_Map_updateCallMenu']=Scene_Map[_0x1f5c57(0x605)][_0x1f5c57(0xa3b)],Scene_Map[_0x1f5c57(0x605)][_0x1f5c57(0xa3b)]=function(){const _0x448303=_0x1f5c57;if(BattleManager[_0x448303(0x83c)])return;VisuMZ[_0x448303(0x6b3)][_0x448303(0x471)][_0x448303(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x9fc)]=Scene_Map[_0x1f5c57(0x605)][_0x1f5c57(0x3ea)],Scene_Map[_0x1f5c57(0x605)]['launchBattle']=function(){const _0x4a3440=_0x1f5c57;if(BattleManager[_0x4a3440(0x83c)]){if(_0x4a3440(0x716)===_0x4a3440(0x2bd)){_0x37e257(_0x4a3440(0xad8)),_0x283859[_0x4a3440(0xa14)]();return;}else this[_0x4a3440(0x66e)]();}else _0x4a3440(0x97d)!=='NGNmg'?VisuMZ[_0x4a3440(0x6b3)][_0x4a3440(0x9fc)][_0x4a3440(0x5a5)](this):this[_0x4a3440(0xc74)]();},Scene_Map[_0x1f5c57(0x605)][_0x1f5c57(0x66e)]=function(){const _0x5ce49c=_0x1f5c57;this[_0x5ce49c(0xb8c)]=!![];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x8eb)]=SceneManager[_0x1f5c57(0x2f0)],SceneManager[_0x1f5c57(0x2f0)]=function(){const _0x1a2a1b=_0x1f5c57;if(BattleManager[_0x1a2a1b(0x83c)])return![];return VisuMZ['BattleCore'][_0x1a2a1b(0x8eb)][_0x1a2a1b(0x5a5)](this);},VisuMZ['BattleCore'][_0x1f5c57(0x743)]=Game_Interpreter[_0x1f5c57(0x605)][_0x1f5c57(0x93f)],Game_Interpreter[_0x1f5c57(0x605)][_0x1f5c57(0x93f)]=function(){const _0x25641a=_0x1f5c57;VisuMZ[_0x25641a(0x6b3)][_0x25641a(0x743)][_0x25641a(0x5a5)](this),this[_0x25641a(0xb6e)]&&(this['_preBattleCommonEvent']=undefined,SceneManager[_0x25641a(0x831)][_0x25641a(0x37b)]());},Scene_Map[_0x1f5c57(0x605)]['battleCoreResumeLaunchBattle']=function(){const _0x42478d=_0x1f5c57;BattleManager[_0x42478d(0x83c)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x42478d(0xc76)]();},VisuMZ['BattleCore'][_0x1f5c57(0x874)]=Scene_Map[_0x1f5c57(0x605)][_0x1f5c57(0x38c)],Scene_Map[_0x1f5c57(0x605)][_0x1f5c57(0x38c)]=function(){const _0x514584=_0x1f5c57;VisuMZ['BattleCore'][_0x514584(0x874)]['call'](this),BattleManager[_0x514584(0xa2d)]&&(_0x514584(0x489)==='Yzffm'?_0x3924b5?this['setup'](_0x1a4b79[_0x514584(0xc47)],0x0):this['terminate']():(this[_0x514584(0xb8c)]=!![],BattleManager[_0x514584(0xa2d)]=undefined));},VisuMZ['BattleCore'][_0x1f5c57(0x965)]=Scene_Map[_0x1f5c57(0x605)][_0x1f5c57(0x38c)],Scene_Map['prototype'][_0x1f5c57(0x38c)]=function(){const _0x59521d=_0x1f5c57;VisuMZ[_0x59521d(0x6b3)][_0x59521d(0x965)][_0x59521d(0x5a5)](this),$gameTemp['clearForcedGameTroopSettingsBattleCore']();},VisuMZ['BattleCore'][_0x1f5c57(0x89a)]=Scene_ItemBase[_0x1f5c57(0x605)][_0x1f5c57(0x780)],Scene_ItemBase[_0x1f5c57(0x605)][_0x1f5c57(0x780)]=function(){const _0x31cfd0=_0x1f5c57;VisuMZ[_0x31cfd0(0x6b3)]['Scene_ItemBase_applyItem'][_0x31cfd0(0x5a5)](this);if(this[_0x31cfd0(0x20c)]()[_0x31cfd0(0x9bc)][_0x31cfd0(0x7a1)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x31cfd0(0x20c)]()[_0x31cfd0(0x9bc)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x31cfd0(0x4da)]=[]);if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](this['item']())){if('kEHYc'!==_0x31cfd0(0xbe4)){const _0x3e809a=this[_0x31cfd0(0x940)](_0x5bd797),_0x32f8b4=this[_0x31cfd0(0x5ed)](_0x4a27f5)[_0x31cfd0(0xac5)];return _0x32f8b4<=_0x3e809a[_0x31cfd0(0xac5)]?'iconText':'icon';}else $gameTemp['_commonEventQueue']=[];}},VisuMZ[_0x1f5c57(0x6b3)]['Scene_Options_maxCommands']=Scene_Options[_0x1f5c57(0x605)]['maxCommands'],Scene_Options['prototype'][_0x1f5c57(0x280)]=function(){const _0x15f914=_0x1f5c57;let _0x380d3d=VisuMZ[_0x15f914(0x6b3)][_0x15f914(0x533)][_0x15f914(0x5a5)](this);const _0x483114=VisuMZ[_0x15f914(0x6b3)]['Settings'];if(_0x483114[_0x15f914(0xa6c)]['AddOption']&&_0x483114[_0x15f914(0xa6c)][_0x15f914(0x61b)])_0x380d3d+=0x2;if(_0x483114['HpGauge'][_0x15f914(0x8e4)]&&_0x483114[_0x15f914(0x3b3)][_0x15f914(0x61b)])_0x380d3d+=0x1;return _0x380d3d;},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xb26)]=Scene_Battle['prototype'][_0x1f5c57(0x38c)],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x38c)]=function(){const _0x48d196=_0x1f5c57;VisuMZ[_0x48d196(0x6b3)]['Scene_Battle_initialize'][_0x48d196(0x5a5)](this),this[_0x48d196(0x2fe)]();},VisuMZ[_0x1f5c57(0x6b3)]['Scene_Battle_start']=Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xc4a)],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xc4a)]=function(){const _0x5117ca=_0x1f5c57;if(SceneManager['isPreviousSceneBattleTransitionable']()){if(_0x5117ca(0x7f8)===_0x5117ca(0xc40))_0x470e50=_0x2a4b88[_0x5117ca(0x72e)];else{Scene_Message['prototype'][_0x5117ca(0xc4a)][_0x5117ca(0x5a5)](this);this[_0x5117ca(0x4d6)]&&this[_0x5117ca(0x4d6)][_0x5117ca(0x9ee)]();if(BattleManager[_0x5117ca(0xa5b)]){if(_0x5117ca(0x79e)!=='lURcc'){const _0xd10b2b=this[_0x5117ca(0x618)];_0xd10b2b[_0x5117ca(0x6db)](_0x354066,0x0,_0x38b6e9['y'],_0xd10b2b[_0x5117ca(0x5eb)],_0x5117ca(0x2d8));}else BattleManager[_0x5117ca(0xb35)]();}}}else VisuMZ[_0x5117ca(0x6b3)][_0x5117ca(0x497)][_0x5117ca(0x5a5)](this),$gameTroop[_0x5117ca(0x9cb)]();},VisuMZ['BattleCore'][_0x1f5c57(0x32c)]=Scene_Battle[_0x1f5c57(0x605)]['stop'],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xc76)]=function(){const _0x52dd70=_0x1f5c57;SceneManager['isNextSceneBattleTransitionable']()?_0x52dd70(0x4f5)!==_0x52dd70(0x9a4)?Scene_Message[_0x52dd70(0x605)][_0x52dd70(0xc76)][_0x52dd70(0x5a5)](this):(this['_battlerContainer']=new _0x179c45(),this[_0x52dd70(0x6f9)]['addChild'](this[_0x52dd70(0x9eb)])):VisuMZ['BattleCore'][_0x52dd70(0x32c)][_0x52dd70(0x5a5)](this);},VisuMZ['BattleCore'][_0x1f5c57(0x697)]=Scene_Battle['prototype'][_0x1f5c57(0x93f)],Scene_Battle['prototype'][_0x1f5c57(0x93f)]=function(){const _0x5473ed=_0x1f5c57;SceneManager[_0x5473ed(0x556)]()?Scene_Message[_0x5473ed(0x605)][_0x5473ed(0x93f)][_0x5473ed(0x5a5)](this):_0x5473ed(0x880)===_0x5473ed(0x880)?VisuMZ['BattleCore'][_0x5473ed(0x697)][_0x5473ed(0x5a5)](this):(_0x3cd36b[_0x5473ed(0x6b3)][_0x5473ed(0x2e1)]['call'](this,_0x2ec0ea),this[_0x5473ed(0x951)]()&&_0x378d89===this[_0x5473ed(0x50c)]()&&this[_0x5473ed(0x3b0)]()&&(this[_0x5473ed(0x693)]=![]),!this[_0x5473ed(0x3a5)]&&!this[_0x5473ed(0x9b2)]&&_0x23e110[_0x5473ed(0x2ba)]()&&this[_0x5473ed(0x2a5)]()),this[_0x5473ed(0x2fe)]();},Scene_Battle['prototype'][_0x1f5c57(0x3fd)]=function(){const _0x42c67c=_0x1f5c57;if(ConfigManager[_0x42c67c(0x473)]&&ConfigManager[_0x42c67c(0xb38)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0x42c67c(0x853)]()===_0x42c67c(0x69e))return![];else{if(_0x42c67c(0x223)===_0x42c67c(0x1d0))return _0xd15259['prototype'][_0x42c67c(0x377)]['call'](this);else{return Scene_Message['prototype'][_0x42c67c(0x3fd)][_0x42c67c(0x5a5)](this);;}}}},VisuMZ[_0x1f5c57(0x6b3)]['Scene_Battle_createAllWindows']=Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x568)],Scene_Battle[_0x1f5c57(0x605)]['createAllWindows']=function(){const _0x25ca22=_0x1f5c57;this['createEnemyNameContainer'](),VisuMZ[_0x25ca22(0x6b3)][_0x25ca22(0x4c6)][_0x25ca22(0x5a5)](this),this['createAutoBattleWindow']();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x8b0)]=Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x6d3)],Scene_Battle[_0x1f5c57(0x605)]['createCancelButton']=function(){const _0x28097f=_0x1f5c57;VisuMZ['BattleCore']['Scene_Battle_createCancelButton'][_0x28097f(0x5a5)](this),this[_0x28097f(0x853)]()===_0x28097f(0x69e)&&this[_0x28097f(0x7da)]();},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x44c)]=function(_0x1fe764){const _0x2f1b5b=_0x1f5c57;_0x1fe764?(this[_0x2f1b5b(0x721)]['x']=(Graphics[_0x2f1b5b(0xac5)]-Graphics[_0x2f1b5b(0xb4d)])/0x2,this[_0x2f1b5b(0x721)]['y']=(Graphics['height']-Graphics[_0x2f1b5b(0x4f3)])/0x2):_0x2f1b5b(0x82b)===_0x2f1b5b(0x8f8)?_0x39faf0['startWeaponAnimation'](0x0):(this[_0x2f1b5b(0x721)]['x']=Graphics[_0x2f1b5b(0xac5)]*0xa,this['_windowLayer']['y']=Graphics[_0x2f1b5b(0x53d)]*0xa);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x5e1)]=Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xa8d)],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xa8d)]=function(){const _0x3b3c0e=_0x1f5c57,_0x4b9210=BattleManager[_0x3b3c0e(0x2f7)]();VisuMZ[_0x3b3c0e(0x6b3)][_0x3b3c0e(0x5e1)][_0x3b3c0e(0x5a5)](this);if(_0x4b9210){if('JKUgL'===_0x3b3c0e(0x85b)){if(this['battleLayoutStyle']()!=='portrait')return;this[_0x3b3c0e(0xa34)](_0x488571['index']());}else{if(_0x4b9210===BattleManager[_0x3b3c0e(0x2f7)]())return;if(_0x4b9210===BattleManager[_0x3b3c0e(0x33d)])return;if(_0x4b9210[_0x3b3c0e(0x4b2)]())_0x4b9210[_0x3b3c0e(0x4b2)]()[_0x3b3c0e(0x8f3)]();}}},VisuMZ['BattleCore'][_0x1f5c57(0x494)]=Scene_Battle['prototype']['selectPreviousCommand'],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x626)]=function(){const _0x30dff8=_0x1f5c57,_0x27aee3=BattleManager[_0x30dff8(0x2f7)]();if(_0x27aee3&&_0x27aee3[_0x30dff8(0x4b2)])_0x27aee3[_0x30dff8(0x4b2)]()[_0x30dff8(0x8f3)]();VisuMZ[_0x30dff8(0x6b3)][_0x30dff8(0x494)][_0x30dff8(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)]['Scene_Battle_logWindowRect']=Scene_Battle[_0x1f5c57(0x605)]['logWindowRect'],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x51e)]=function(){const _0x1264ed=_0x1f5c57;if(VisuMZ[_0x1264ed(0x6b3)][_0x1264ed(0xbba)]['BattleLog'][_0x1264ed(0x571)])return _0x1264ed(0x52a)==='LYWDI'?VisuMZ['BattleCore'][_0x1264ed(0xbba)]['BattleLog'][_0x1264ed(0x571)][_0x1264ed(0x5a5)](this):_0x455184['BattleCore']['Settings'][_0x1264ed(0x415)]['DisablePartyCmd'];return VisuMZ[_0x1264ed(0x6b3)]['Scene_Battle_logWindowRect'][_0x1264ed(0x5a5)](this);},VisuMZ['BattleCore'][_0x1f5c57(0x64a)]=Scene_Battle['prototype'][_0x1f5c57(0xbd1)],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xbd1)]=function(){const _0x1e3933=_0x1f5c57;VisuMZ[_0x1e3933(0x6b3)][_0x1e3933(0x64a)][_0x1e3933(0x5a5)](this),this[_0x1e3933(0x8a2)]();},Scene_Battle['prototype'][_0x1f5c57(0x8a2)]=function(){const _0x3c0d04=_0x1f5c57,_0xfb1975=this[_0x3c0d04(0xc46)];_0xfb1975[_0x3c0d04(0x3dc)]('autoBattle',this[_0x3c0d04(0x426)]['bind'](this)),_0xfb1975[_0x3c0d04(0x3dc)](_0x3c0d04(0xbc0),this[_0x3c0d04(0x3e1)]['bind'](this));const _0x765feb=this[_0x3c0d04(0x853)]();switch(_0x765feb){case'xp':case _0x3c0d04(0x6ea):return this[_0x3c0d04(0xc46)][_0x3c0d04(0x8ac)](0x1);break;}},Scene_Battle['prototype']['commandAutoBattle']=function(){const _0x88daec=_0x1f5c57;BattleManager[_0x88daec(0x391)]=!![],$gameParty[_0x88daec(0x316)](),this[_0x88daec(0xa8d)](),BattleManager[_0x88daec(0x97c)]()&&(BattleManager[_0x88daec(0x876)]=![]);},Scene_Battle['prototype'][_0x1f5c57(0x3e1)]=function(){const _0x25d482=_0x1f5c57;if(this[_0x25d482(0x1f6)]())this[_0x25d482(0x1f8)]=!![],this[_0x25d482(0x57c)]['push'](_0x25d482(0x5c6),VisuMZ['BattleCore'][_0x25d482(0xbba)][_0x25d482(0x415)]['ActiveTpbOptionsMessage']);else{if(_0x25d482(0x4ef)==='ZzgjP'){if(this[_0x25d482(0xa49)]>0x0)this[_0x25d482(0xa49)]-=0x10;}else this['callOptions']();}},Scene_Battle[_0x1f5c57(0x605)]['isQueueOptionsMenu']=function(){const _0x113000=_0x1f5c57;return BattleManager[_0x113000(0xbe3)]();},Scene_Battle['prototype'][_0x1f5c57(0x1e2)]=function(){const _0x5b5062=_0x1f5c57;this[_0x5b5062(0x1f8)]=![],this['_spriteset'][_0x5b5062(0x9ee)](),this['_windowLayer'][_0x5b5062(0x3c0)]=![];if(BattleManager[_0x5b5062(0x8f5)]())_0x5b5062(0x758)!==_0x5b5062(0x4a2)?($dataSystem[_0x5b5062(0x9c9)]||$dataSystem[_0x5b5062(0x99a)])&&SceneManager[_0x5b5062(0x8e9)]():this[_0x5b5062(0x302)]=new _0x29dc8e(_0x534b2d[_0x5b5062(0xac5)],_0x3ab52b[_0x5b5062(0x53d)]);else($gameMap[_0x5b5062(0x9c9)]()||$gameMap[_0x5b5062(0x99a)]())&&('qWBpF'===_0x5b5062(0xb6c)?SceneManager[_0x5b5062(0x8e9)]():this[_0x5b5062(0x337)]=0x0);SceneManager[_0x5b5062(0x5af)](Scene_Options);if(BattleManager[_0x5b5062(0x97c)]()){if(_0x5b5062(0x689)==='oUXOQ')BattleManager[_0x5b5062(0xa5b)]=BattleManager[_0x5b5062(0x2f7)]();else{if(!_0x26e8e4[_0x5b5062(0x754)]())return;const _0x2681c3=this[_0x5b5062(0x4b2)]();if(!_0x2681c3)return;_0x2681c3[_0x5b5062(0xb8d)](_0x192a5c,_0x40396d,_0x5e0989);}}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xc68)]=Scene_Battle['prototype'][_0x1f5c57(0x54f)],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x54f)]=function(){const _0x5cbb22=_0x1f5c57;VisuMZ[_0x5cbb22(0x6b3)][_0x5cbb22(0xc68)][_0x5cbb22(0x5a5)](this);if(this[_0x5cbb22(0x1f8)]&&!BattleManager[_0x5cbb22(0x33d)])this[_0x5cbb22(0x1e2)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x5be)]=Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x9ee)],Scene_Battle[_0x1f5c57(0x605)]['update']=function(){const _0x10320e=_0x1f5c57;VisuMZ['BattleCore'][_0x10320e(0x5be)][_0x10320e(0x5a5)](this),this[_0x10320e(0xa80)]();},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x9b9)]=function(){const _0x292634=_0x1f5c57,_0x44c62b=this[_0x292634(0xad3)]();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x44c62b),this[_0x292634(0x746)][_0x292634(0x251)](),this['addChild'](this[_0x292634(0x746)]);},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xad3)]=function(){const _0x37ad02=_0x1f5c57;return VisuMZ[_0x37ad02(0x6b3)][_0x37ad02(0xbba)][_0x37ad02(0xa6c)][_0x37ad02(0x420)][_0x37ad02(0x5a5)](this);},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x2fe)]=function(){const _0x470ada=_0x1f5c57;this[_0x470ada(0x868)]=[];},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xa80)]=function(){const _0x37277a=_0x1f5c57;if(!this[_0x37277a(0x868)])return;for(const _0x26b339 of this[_0x37277a(0x868)]){if(_0x26b339){if(_0x37277a(0x519)===_0x37277a(0x519))_0x26b339[_0x37277a(0x9ee)]();else{_0x20a5b6[_0x37277a(0x7e7)]['setActionState'](_0x37277a(0x92a));const _0x2bcf73=_0x361c2d[_0x37277a(0x7e7)][_0x37277a(0x4b2)]();if(_0x2bcf73)_0x2bcf73[_0x37277a(0x8f3)]();}}}},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x709)]=function(_0x280f9f){const _0x45bc0b=_0x1f5c57,_0x1cf5f3=$dataCommonEvents[_0x280f9f];if(!_0x1cf5f3)return;const _0x148e8b=new Game_BattleOnceParallelInterpreter();this[_0x45bc0b(0xa01)](_0x148e8b),_0x148e8b['setCommonEvent'](_0x280f9f);},Scene_Battle['prototype'][_0x1f5c57(0xa01)]=function(_0x1cff53){const _0x4e60b9=_0x1f5c57;this[_0x4e60b9(0x868)]=this[_0x4e60b9(0x868)]||[],this[_0x4e60b9(0x868)][_0x4e60b9(0x5af)](_0x1cff53);},Scene_Battle['prototype']['removeOnceParallelInterpreter']=function(_0x133c98){const _0x14b0e5=_0x1f5c57;this[_0x14b0e5(0x868)]=this['_onceParallelInterpreters']||[],this['_onceParallelInterpreters']['remove'](_0x133c98);},Game_Troop['prototype']['onBattleStartOnceParallels']=function(){const _0x4b1d28=_0x1f5c57;for(const _0x6118a2 of this['troop']()[_0x4b1d28(0x664)]){if(!this['doesPageHaveOnceParallelStart'](_0x6118a2))continue;SceneManager[_0x4b1d28(0x831)]['playOnceParallelTroopPage'](_0x6118a2);}},Game_Troop[_0x1f5c57(0x605)][_0x1f5c57(0xb9b)]=function(_0x1270e4){const _0x4750e3=_0x1f5c57;if(!_0x1270e4)return;for(const _0x2ed19d of _0x1270e4[_0x4750e3(0xc47)]){if([0x6c,0x198][_0x4750e3(0x60e)](_0x2ed19d[_0x4750e3(0x63c)])){const _0x17c171=_0x2ed19d[_0x4750e3(0x93e)][0x0];if(_0x17c171[_0x4750e3(0x7a1)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle['prototype']['playOnceParallelTroopPage']=function(_0x174942){const _0x51ffb1=_0x1f5c57;if(!_0x174942)return;const _0x406999=new Game_BattleOnceParallelInterpreter();this[_0x51ffb1(0xa01)](_0x406999),_0x406999[_0x51ffb1(0xaf6)](_0x174942);};function Game_BattleOnceParallelInterpreter(){const _0x2bc8a2=_0x1f5c57;this[_0x2bc8a2(0x38c)](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x1f5c57(0x906)](Game_Interpreter[_0x1f5c57(0x605)]),Game_BattleOnceParallelInterpreter[_0x1f5c57(0x605)][_0x1f5c57(0x9f1)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x1f5c57(0x605)]['setCommonEvent']=function(_0x396142){const _0x319086=_0x1f5c57,_0x41f2bb=$dataCommonEvents[_0x396142];_0x41f2bb?_0x319086(0x8ee)!==_0x319086(0x8ee)?_0x3deeb0[_0x319086(0x6b3)][_0x319086(0x967)](_0x9b463d,_0xc1c8c8):this['setup'](_0x41f2bb[_0x319086(0xc47)],0x0):'taYyI'===_0x319086(0x1cd)?(_0x1d17ca=_0xe49be8[_0x319086(0xac5)]/_0x11103a[_0x319086(0x59c)]()[_0x319086(0x9fe)],_0x6fd3d7*=_0x208c4c,_0x2f72f5+=_0x2072b4['width']/_0x226bb0[_0x319086(0x59c)]()[_0x319086(0x9fe)]/0x2):this[_0x319086(0x93f)]();},Game_BattleOnceParallelInterpreter[_0x1f5c57(0x605)][_0x1f5c57(0x93f)]=function(){const _0x12e41b=_0x1f5c57;if(!SceneManager['isSceneBattle']())return;SceneManager[_0x12e41b(0x831)]['removeOnceParallelInterpreter'](this),Game_Interpreter[_0x12e41b(0x605)]['terminate'][_0x12e41b(0x5a5)](this);},Game_BattleOnceParallelInterpreter[_0x1f5c57(0x605)]['setTroopPage']=function(_0x26370d){const _0x4fc571=_0x1f5c57;_0x26370d?'GTOnC'==='HVFlk'?(this['_activeWeaponSlot']=this[_0x4fc571(0xa8b)]||0x0,this[_0x4fc571(0xa8b)]++,this['_cache']={}):this['setup'](_0x26370d[_0x4fc571(0xc47)],0x0):this['terminate']();},Scene_Battle['prototype']['isPartyCommandWindowDisabled']=function(){const _0xb5f867=_0x1f5c57;return VisuMZ[_0xb5f867(0x6b3)][_0xb5f867(0xbba)][_0xb5f867(0x415)][_0xb5f867(0x84a)];},VisuMZ['BattleCore'][_0x1f5c57(0x4f1)]=Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xb1d)],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xb1d)]=function(){const _0x29ae23=_0x1f5c57;this[_0x29ae23(0x64b)]()?_0x29ae23(0x5f9)===_0x29ae23(0x5f9)?this[_0x29ae23(0xb40)]():(_0x153f04['BattleCore']['Game_Action_applyGlobal']['call'](this),this[_0x29ae23(0x523)](),this[_0x29ae23(0x3ef)]()):VisuMZ[_0x29ae23(0x6b3)]['Scene_Battle_startPartyCommandSelection']['call'](this);},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xb40)]=function(){const _0x151ca8=_0x1f5c57;if(BattleManager[_0x151ca8(0xa9c)]())this[_0x151ca8(0xa8d)]();else{if(BattleManager[_0x151ca8(0x97c)]()){if('hTmWc'!==_0x151ca8(0x75d)){const _0xb156b3=this[_0x151ca8(0x853)]();if(_0x4f8180&&['xp','portrait'][_0x151ca8(0x60e)](_0xb156b3))this['resizeWindowXPStyle'](_0x184779);else _0x387283&&[_0x151ca8(0x69e)][_0x151ca8(0x60e)](_0xb156b3)&&(this[_0x151ca8(0xc25)](_0x5a6e0f),this['showHelpWindow']());_0xf0730c[_0x151ca8(0x6b3)][_0x151ca8(0x7c5)][_0x151ca8(0x5a5)](this,_0x528dc8),_0x14cf0f&&_0x5e5ab2[_0x151ca8(0x227)]()['length']>0x0&&_0x5e4cd0[_0x151ca8(0x4b2)]()&&_0x4bc06c['battler']()[_0x151ca8(0x42b)]();}else VisuMZ[_0x151ca8(0x6b3)][_0x151ca8(0x4f1)][_0x151ca8(0x5a5)](this);}}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xbff)]=Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x225)],Scene_Battle['prototype'][_0x1f5c57(0x225)]=function(){const _0x3429c2=_0x1f5c57;BattleManager['isTpb']()?'zbgIF'!==_0x3429c2(0x33f)?(this['tpbCommandFight'](),this[_0x3429c2(0x6fe)]()):(this[_0x3429c2(0x234)]+=_0x2e651b['getBattlePortraitOffsetX'](),this[_0x3429c2(0x962)]['y']+=_0x117eab[_0x3429c2(0xa90)]()):VisuMZ['BattleCore'][_0x3429c2(0xbff)][_0x3429c2(0x5a5)](this);},Scene_Battle['prototype'][_0x1f5c57(0x3b7)]=function(){const _0x36fa7e=_0x1f5c57;if(!VisuMZ['BattleCore'][_0x36fa7e(0x91a)])return;if(Imported[_0x36fa7e(0x2fc)]&&BattleManager['isCTB']())return;const _0x59dbe0=$gameParty[_0x36fa7e(0x227)]()[_0x36fa7e(0x6ae)](_0x25058f=>_0x25058f[_0x36fa7e(0x7e6)]()&&_0x25058f['canInput']());BattleManager[_0x36fa7e(0x7e7)]=_0x59dbe0[0x0]||null,BattleManager[_0x36fa7e(0x7e7)]&&BattleManager[_0x36fa7e(0x7e7)][_0x36fa7e(0x4f0)]('inputting');},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x468)]=Scene_Battle[_0x1f5c57(0x605)]['createActorCommandWindow'],Scene_Battle[_0x1f5c57(0x605)]['createActorCommandWindow']=function(){const _0x87c72d=_0x1f5c57;VisuMZ[_0x87c72d(0x6b3)][_0x87c72d(0x468)][_0x87c72d(0x5a5)](this),this[_0x87c72d(0x94a)]();},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x94a)]=function(){const _0x16b68c=_0x1f5c57,_0x264a85=this[_0x16b68c(0x4e9)];_0x264a85[_0x16b68c(0x3dc)](_0x16b68c(0xad6),this[_0x16b68c(0xc0c)][_0x16b68c(0xc00)](this)),_0x264a85['setHandler']('autoBattle',this[_0x16b68c(0x356)]['bind'](this)),_0x264a85[_0x16b68c(0x3dc)](_0x16b68c(0x296),this[_0x16b68c(0x1f1)][_0x16b68c(0xc00)](this)),BattleManager[_0x16b68c(0x97c)]()&&(_0x16b68c(0x8b6)!==_0x16b68c(0x9cc)?this[_0x16b68c(0x64b)]()?'dGaWA'===_0x16b68c(0x5ba)?(_0x44a1a1[_0x16b68c(0x83c)]=_0x594d74,_0x2adc96['_battleCoreBattleResumeAfter']=!![],this[_0x16b68c(0xc76)]()):delete _0x264a85[_0x16b68c(0xaf1)]['cancel']:_0x264a85[_0x16b68c(0x3dc)](_0x16b68c(0x6e8),this[_0x16b68c(0x956)][_0x16b68c(0xc00)](this)):_0x2444bd['Actor'][_0x16b68c(0x585)]=!![]);},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xc0c)]=function(){const _0x293cd2=_0x1f5c57;this[_0x293cd2(0x802)]();},Scene_Battle[_0x1f5c57(0x605)]['actorCommandAutoBattle']=function(){const _0x584da4=_0x1f5c57;BattleManager[_0x584da4(0x2f7)]()[_0x584da4(0x7a8)](),BattleManager[_0x584da4(0x9dd)](),BattleManager['selectNextActor'](),this[_0x584da4(0xbf1)]();},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x1f1)]=function(){const _0x24d86=_0x1f5c57,_0xdc5cf5=BattleManager[_0x24d86(0x35c)]();_0xdc5cf5[_0x24d86(0x4e4)](this['_actorCommandWindow'][_0x24d86(0x213)]()),this['onSelectAction']();},Scene_Battle[_0x1f5c57(0x605)]['actorCommandCancelTPB']=function(){const _0x53de72=_0x1f5c57;if(this[_0x53de72(0x31c)]())this[_0x53de72(0x63b)]();else{if(_0x53de72(0x5ee)===_0x53de72(0x7c7)){let _0x53bb37=_0x2c1946['makeDeepCopy'](_0x4f312f[_0x53de72(0x6b3)][_0x53de72(0x2f9)]['call'](this));return _0xcaf447[_0x53de72(0x6b3)][_0x53de72(0x4f4)](_0x53bb37);}else this[_0x53de72(0x8c9)]();}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x91a)]=![],Scene_Battle[_0x1f5c57(0x605)]['tpbActorSwitchConditionsMet']=function(){const _0x105a5d=_0x1f5c57;if(Imported[_0x105a5d(0x2fc)]&&BattleManager[_0x105a5d(0x319)]()){if(_0x105a5d(0xa6d)===_0x105a5d(0xa6d))return![];else this['isTpb']()&&this[_0x105a5d(0x51c)]==='battleEnd'&&(this[_0x105a5d(0x7e7)]=null),_0x2c917e['BattleCore'][_0x105a5d(0x3ac)][_0x105a5d(0x5a5)](this);}else{if('qbIww'!==_0x105a5d(0x297)){if(!VisuMZ[_0x105a5d(0x6b3)][_0x105a5d(0x91a)])return![];const _0x5407bb=$gameParty[_0x105a5d(0x227)]()[_0x105a5d(0x6ae)](_0x34e41d=>_0x34e41d[_0x105a5d(0x7e6)]()&&_0x34e41d[_0x105a5d(0xb6a)]());return _0x5407bb[_0x105a5d(0x9fe)]>0x0&&BattleManager[_0x105a5d(0x2f7)]()!==_0x5407bb[_0x5407bb[_0x105a5d(0x9fe)]-0x1];}else this[_0x105a5d(0x748)](0x1);}},Scene_Battle['prototype'][_0x1f5c57(0x63b)]=function(){const _0x5b8704=_0x1f5c57,_0x1fe8ef=BattleManager[_0x5b8704(0x2f7)](),_0x4772d7=_0x1fe8ef[_0x5b8704(0x4b2)]();if(_0x4772d7)_0x4772d7[_0x5b8704(0x8f3)]();const _0x3d9a8d=$gameParty[_0x5b8704(0x227)]()['filter'](_0x3189d5=>_0x3189d5[_0x5b8704(0x7e6)]()&&_0x3189d5[_0x5b8704(0xb6a)]()),_0x17f897=_0x3d9a8d[_0x5b8704(0x94d)](_0x1fe8ef),_0x464213=_0x3d9a8d[_0x17f897+0x1];BattleManager[_0x5b8704(0x7e7)]=_0x464213||null;if(_0x464213)_0x464213[_0x5b8704(0x4f0)](_0x5b8704(0x70c));_0x1fe8ef[_0x5b8704(0x4f0)](_0x5b8704(0x92a)),this[_0x5b8704(0xbf1)]();},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x8c9)]=function(){const _0x6ef02b=_0x1f5c57;this['_partyCommandWindow']['setup'](),this[_0x6ef02b(0x4e9)]['close']();if(!VisuMZ[_0x6ef02b(0x6b3)][_0x6ef02b(0x91a)])return;if(Imported[_0x6ef02b(0x2fc)]&&BattleManager[_0x6ef02b(0x319)]())return;if(BattleManager[_0x6ef02b(0x7e7)]){if('DVKGt'==='TCwCr')return _0x545a0c[_0x6ef02b(0x605)]['isFlipped']();else{BattleManager[_0x6ef02b(0x7e7)]['setActionState'](_0x6ef02b(0x92a));const _0x2d08e7=BattleManager['_currentActor']['battler']();if(_0x2d08e7)_0x2d08e7[_0x6ef02b(0x8f3)]();}}BattleManager[_0x6ef02b(0x7e7)]=null;},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xc7f)]=Scene_Battle['prototype'][_0x1f5c57(0xae0)],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xae0)]=function(){const _0x1b3245=_0x1f5c57;VisuMZ[_0x1b3245(0x6b3)][_0x1b3245(0xc7f)][_0x1b3245(0x5a5)](this),this[_0x1b3245(0xaa4)]();},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xaa4)]=function(){const _0x45c1c8=_0x1f5c57;this[_0x45c1c8(0x4e9)][_0x45c1c8(0xc92)](this[_0x45c1c8(0xae5)]),this[_0x45c1c8(0xc46)][_0x45c1c8(0xc92)](this[_0x45c1c8(0xae5)]);},Scene_Battle['prototype']['battleLayoutStyle']=function(){const _0xf38fc7=_0x1f5c57;if($gameTemp['_forcedBattleLayout']!==undefined){if(_0xf38fc7(0x4e8)!=='zvaAI')return $gameTemp['_forcedBattleLayout'];else{const _0x149482=_0x50f282['BattleCore'][_0xf38fc7(0xbba)]['BattleLayout'];if(_0x149482['StatusWindowAttachmentBack']){const _0x2815d9=new _0x427d92();_0x2815d9['bitmap']=_0x302523[_0xf38fc7(0x89c)](_0x149482[_0xf38fc7(0x916)]),_0x2815d9['x']=_0x149482[_0xf38fc7(0x899)]||0x0,_0x2815d9['y']=_0x149482['StatusWindowAttachmentBackOffsetY']||0x0,this[_0xf38fc7(0x88b)](_0x2815d9),this[_0xf38fc7(0x5e4)]=_0x2815d9;}if(_0x149482[_0xf38fc7(0x7bc)]){const _0x21534d=new _0xbd714a();_0x21534d[_0xf38fc7(0x302)]=_0x5cb18e[_0xf38fc7(0x89c)](_0x149482['StatusWindowAttachmentFront']),_0x21534d['x']=_0x149482[_0xf38fc7(0x322)]||0x0,_0x21534d['y']=_0x149482[_0xf38fc7(0x364)]||0x0,this[_0xf38fc7(0x45b)](_0x21534d),this[_0xf38fc7(0x5a6)]=_0x21534d;}}}if(this[_0xf38fc7(0xc20)])return this[_0xf38fc7(0xc20)];return this[_0xf38fc7(0xc20)]=VisuMZ[_0xf38fc7(0x6b3)][_0xf38fc7(0xbba)][_0xf38fc7(0x66d)][_0xf38fc7(0x9f3)][_0xf38fc7(0x281)]()[_0xf38fc7(0xc8b)](),this[_0xf38fc7(0xc20)]==='sideview_ui'&&!Imported[_0xf38fc7(0xb02)]&&(_0xf38fc7(0x3ee)===_0xf38fc7(0x9df)?_0xb1927b['BattleCore']['Sprite_Actor_setActorHome'][_0xf38fc7(0x5a5)](this,_0x23bced):this[_0xf38fc7(0xc20)]=_0xf38fc7(0x3b1)),this['_battleLayoutStyle'];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x40f)]=Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x78d)],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x78d)]=function(){const _0x3eca26=_0x1f5c57,_0x109fa3=this['battleLayoutStyle']();switch(_0x109fa3){case _0x3eca26(0xc47):return this[_0x3eca26(0xc62)](Math['max'](0x1,$gameParty['maxBattleMembers']()),!![]);break;default:return VisuMZ[_0x3eca26(0x6b3)][_0x3eca26(0x40f)]['call'](this);break;}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x3bf)]=Scene_Battle[_0x1f5c57(0x605)]['helpWindowRect'],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x30d)]=function(){const _0x458fff=_0x1f5c57,_0x346a90=this[_0x458fff(0x853)]();switch(_0x346a90){case'border':return this[_0x458fff(0x1f7)]();break;case _0x458fff(0x3b1):case _0x458fff(0xc47):case'xp':case _0x458fff(0x6ea):default:return VisuMZ['BattleCore'][_0x458fff(0x3bf)][_0x458fff(0x5a5)](this);break;}},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x75b)]=function(){const _0x35df74=_0x1f5c57,_0x33e4ab=this[_0x35df74(0x853)]();switch(_0x33e4ab){case'xp':case'portrait':return this[_0x35df74(0x2ac)]();break;case _0x35df74(0x69e):return this[_0x35df74(0x597)]();break;case _0x35df74(0x3b1):case _0x35df74(0xc47):default:return this[_0x35df74(0x811)]();break;}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x705)]=Scene_Battle['prototype'][_0x1f5c57(0x510)],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x510)]=function(){const _0x5c5a98=_0x1f5c57,_0x339a3c=this[_0x5c5a98(0x853)]();switch(_0x339a3c){case'xp':case _0x5c5a98(0x6ea):return this[_0x5c5a98(0x6b1)]();break;case _0x5c5a98(0x69e):return this[_0x5c5a98(0x7ab)]();case _0x5c5a98(0x3b1):case _0x5c5a98(0xc47):default:return this[_0x5c5a98(0xa74)]();break;}},Scene_Battle['prototype'][_0x1f5c57(0xa74)]=function(){const _0x965b28=_0x1f5c57,_0x27c619=VisuMZ[_0x965b28(0x6b3)][_0x965b28(0xbba)][_0x965b28(0x66d)],_0x19f89b=_0x27c619[_0x965b28(0x656)]||0xc0,_0x1ac590=this[_0x965b28(0x78d)](),_0x32305b=this[_0x965b28(0x3fd)]()?Graphics['boxWidth']-_0x19f89b:0x0,_0x1806d7=Graphics[_0x965b28(0x4f3)]-_0x1ac590;return new Rectangle(_0x32305b,_0x1806d7,_0x19f89b,_0x1ac590);},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x444)]=function(){const _0x4628ad=_0x1f5c57;return this[_0x4628ad(0x510)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x91d)]=Scene_Battle['prototype']['updateStatusWindowPosition'],Scene_Battle['prototype']['updateStatusWindowPosition']=function(){const _0x673f82=_0x1f5c57,_0x4ee524=this['battleLayoutStyle']();switch(_0x4ee524){case'xp':case _0x673f82(0x6ea):case _0x673f82(0x69e):break;case'default':case _0x673f82(0xc47):default:VisuMZ[_0x673f82(0x6b3)][_0x673f82(0x91d)]['call'](this);break;}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x8d1)]=Scene_Battle[_0x1f5c57(0x605)]['startActorSelection'],Scene_Battle['prototype']['startActorSelection']=function(){const _0x96fb67=_0x1f5c57;VisuMZ[_0x96fb67(0x6b3)][_0x96fb67(0x8d1)][_0x96fb67(0x5a5)](this),this[_0x96fb67(0x43b)]();},VisuMZ['BattleCore'][_0x1f5c57(0x9ec)]=Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x33a)],Scene_Battle['prototype']['startEnemySelection']=function(){const _0x293a76=_0x1f5c57;VisuMZ[_0x293a76(0x6b3)][_0x293a76(0x9ec)][_0x293a76(0x5a5)](this),this[_0x293a76(0x739)]['autoSelect'](),this[_0x293a76(0x43b)]();},Scene_Battle[_0x1f5c57(0x605)]['makeTargetSelectionMoreVisible']=function(){const _0x58ab7d=_0x1f5c57,_0x4ab586=this[_0x58ab7d(0x853)]();['xp',_0x58ab7d(0x6ea),_0x58ab7d(0x69e)][_0x58ab7d(0x60e)](_0x4ab586)&&this['_actorCommandWindow'][_0x58ab7d(0x45a)](),(_0x4ab586===_0x58ab7d(0x69e)||this[_0x58ab7d(0x45d)]())&&(this[_0x58ab7d(0x3d7)][_0x58ab7d(0x45a)](),this['_itemWindow'][_0x58ab7d(0x45a)]());},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xa5a)]=Scene_Battle['prototype'][_0x1f5c57(0x2a7)],Scene_Battle['prototype'][_0x1f5c57(0x2a7)]=function(){const _0xee157f=_0x1f5c57;VisuMZ[_0xee157f(0x6b3)][_0xee157f(0xa5a)][_0xee157f(0x5a5)](this),this[_0xee157f(0x22a)]();},Scene_Battle['prototype'][_0x1f5c57(0xa46)]=function(){const _0x34864f=_0x1f5c57;return['attack',_0x34864f(0xbea),_0x34864f(0x296)][_0x34864f(0x60e)](this['_actorCommandWindow'][_0x34864f(0xa60)]());},VisuMZ['BattleCore'][_0x1f5c57(0x26c)]=Scene_Battle[_0x1f5c57(0x605)]['onActorCancel'],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x786)]=function(){const _0x5b975f=_0x1f5c57;this[_0x5b975f(0xa46)]()?(this[_0x5b975f(0x1ee)][_0x5b975f(0x88c)](),this['_actorWindow'][_0x5b975f(0x251)](),this[_0x5b975f(0x4e9)][_0x5b975f(0x7af)]()):VisuMZ['BattleCore'][_0x5b975f(0x26c)][_0x5b975f(0x5a5)](this),this[_0x5b975f(0x958)]();},VisuMZ['BattleCore'][_0x1f5c57(0x42e)]=Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xc12)],Scene_Battle[_0x1f5c57(0x605)]['onEnemyOk']=function(){const _0x5603c2=_0x1f5c57;VisuMZ[_0x5603c2(0x6b3)][_0x5603c2(0x42e)][_0x5603c2(0x5a5)](this),this['okTargetSelectionVisibility']();},VisuMZ['BattleCore']['Scene_Battle_onEnemyCancel']=Scene_Battle['prototype']['onEnemyCancel'],Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x94e)]=function(){const _0xeb2a95=_0x1f5c57;this[_0xeb2a95(0xa46)]()?(this[_0xeb2a95(0x1ee)][_0xeb2a95(0x88c)](),this[_0xeb2a95(0x739)][_0xeb2a95(0x251)](),this[_0xeb2a95(0x4e9)][_0xeb2a95(0x7af)]()):_0xeb2a95(0x4cd)===_0xeb2a95(0x39a)?_0x5ed321+=_0x1da0af(_0x344340['$1']):VisuMZ[_0xeb2a95(0x6b3)][_0xeb2a95(0x701)][_0xeb2a95(0x5a5)](this),this[_0xeb2a95(0x958)]();},Scene_Battle['prototype'][_0x1f5c57(0x22a)]=function(){const _0x14eed2=_0x1f5c57,_0x39b72a=this[_0x14eed2(0x853)]();(_0x39b72a===_0x14eed2(0x69e)||this[_0x14eed2(0x45d)]())&&(this['_skillWindow'][_0x14eed2(0xc03)](),this[_0x14eed2(0x3d7)][_0x14eed2(0xafa)]&&this['_skillWindow'][_0x14eed2(0x88c)](),this[_0x14eed2(0x43c)][_0x14eed2(0xc03)](),this[_0x14eed2(0x43c)][_0x14eed2(0xafa)]&&this[_0x14eed2(0x43c)][_0x14eed2(0x88c)]());},Scene_Battle[_0x1f5c57(0x605)]['cancelTargetSelectionVisibility']=function(){const _0x3e99dd=_0x1f5c57,_0x450634=this[_0x3e99dd(0x853)]();if(['xp',_0x3e99dd(0x6ea),_0x3e99dd(0x69e)][_0x3e99dd(0x60e)](_0x450634)){if(_0x3e99dd(0x3f1)!==_0x3e99dd(0x9d1))this[_0x3e99dd(0x4e9)]['open']();else{_0x4e14e9=_0x4edb01['BattleCore'][_0x3e99dd(0x8e7)]['call'](this);const _0x5718dc=_0x167b04[_0x3e99dd(0x6b3)]['createKeyJS'](this[_0x3e99dd(0x20c)](),_0x3e99dd(0x3cb));return _0x172061=_0x506905[_0x3e99dd(0x6b3)]['JS'][_0x5718dc][_0x3e99dd(0x5a5)](this,this[_0x3e99dd(0x83e)](),_0x2eb1f5),this[_0x3e99dd(0x97f)](_0x46a29c);}}this[_0x3e99dd(0x22a)]();},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x811)]=function(){const _0x4f3712=_0x1f5c57,_0x3032a8=VisuMZ[_0x4f3712(0x6b3)][_0x4f3712(0xbba)][_0x4f3712(0x66d)],_0xbe0cd4=Window_BattleStatus['prototype'][_0x4f3712(0x4a7)](),_0x4d12b0=Graphics[_0x4f3712(0xb4d)]-(_0x3032a8[_0x4f3712(0x656)]||0xc0),_0x5620d0=this[_0x4f3712(0x78d)]()+_0xbe0cd4,_0x3ba6a7=this[_0x4f3712(0x3fd)]()?0x0:Graphics['boxWidth']-_0x4d12b0,_0x2abcd7=Graphics[_0x4f3712(0x4f3)]-_0x5620d0+_0xbe0cd4;return new Rectangle(_0x3ba6a7,_0x2abcd7,_0x4d12b0,_0x5620d0);},Scene_Battle['prototype'][_0x1f5c57(0x2ac)]=function(){const _0x3ee60b=_0x1f5c57,_0xa85061=Window_BattleStatus[_0x3ee60b(0x605)][_0x3ee60b(0x4a7)](),_0x139cba=Graphics['boxWidth'],_0x4a5268=this[_0x3ee60b(0x78d)]()+_0xa85061,_0x5dc791=0x0,_0x3a6274=Graphics[_0x3ee60b(0x4f3)]-_0x4a5268+_0xa85061;return new Rectangle(_0x5dc791,_0x3a6274,_0x139cba,_0x4a5268);},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x6b1)]=function(){const _0x16eb5b=_0x1f5c57,_0x46748e=Graphics['boxWidth']/0x2,_0x48998d=this[_0x16eb5b(0xc62)](VisuMZ['BattleCore'][_0x16eb5b(0xbba)][_0x16eb5b(0x66d)][_0x16eb5b(0x782)],!![]),_0x26e3cd=Math[_0x16eb5b(0x93c)]((Graphics['boxWidth']-_0x46748e)/0x2),_0x2779fd=Graphics['boxHeight']-_0x48998d-this[_0x16eb5b(0x2ac)]()['height'];return new Rectangle(_0x26e3cd,_0x2779fd,_0x46748e,_0x48998d);},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x1f7)]=function(){const _0x2daa8e=_0x1f5c57,_0x58c436=Graphics['width'],_0x19a56e=Math['round']((Graphics[_0x2daa8e(0xb4d)]-_0x58c436)/0x2),_0x21023e=this[_0x2daa8e(0x832)](),_0x430d1=(Graphics[_0x2daa8e(0x53d)]-Graphics[_0x2daa8e(0x4f3)])/-0x2;return new Rectangle(_0x19a56e,_0x430d1,_0x58c436,_0x21023e);},Scene_Battle[_0x1f5c57(0x605)]['statusWindowRectBorderStyle']=function(){const _0x3ae41c=_0x1f5c57,_0x195bb7=Graphics['width'],_0x1f254f=Math[_0x3ae41c(0x93c)]((Graphics['boxWidth']-_0x195bb7)/0x2),_0x1c688e=this[_0x3ae41c(0xc62)](0x4,!![]),_0x3cd491=Graphics[_0x3ae41c(0x4f3)]-_0x1c688e+(Graphics[_0x3ae41c(0x53d)]-Graphics[_0x3ae41c(0x4f3)])/0x2;return new Rectangle(_0x1f254f,_0x3cd491,_0x195bb7,_0x1c688e);},Scene_Battle['prototype'][_0x1f5c57(0x7ab)]=function(){const _0x40d821=_0x1f5c57,_0x21b70c=Math[_0x40d821(0x617)](Graphics[_0x40d821(0xac5)]/0x3),_0x3771e6=this['isRightInputMode']()?(Graphics['width']+Graphics[_0x40d821(0xb4d)])/0x2-_0x21b70c:(Graphics[_0x40d821(0xac5)]-Graphics[_0x40d821(0xb4d)])/-0x2,_0xc1790e=this[_0x40d821(0x1f7)](),_0x27fbaa=_0xc1790e['y']+_0xc1790e[_0x40d821(0x53d)],_0x7f154f=this[_0x40d821(0x597)](),_0x405007=_0x7f154f['y']-_0x27fbaa;return new Rectangle(_0x3771e6,_0x27fbaa,_0x21b70c,_0x405007);},Scene_Battle[_0x1f5c57(0x605)]['skillItemWindowRectBorderStyle']=function(){const _0x3e8adf=_0x1f5c57,_0x45a90e=Math['ceil'](Graphics[_0x3e8adf(0xac5)]/0x3),_0x24c523=Math['round']((Graphics[_0x3e8adf(0xb4d)]-_0x45a90e)/0x2),_0x5d1cb7=this[_0x3e8adf(0x7ab)](),_0x469f9c=_0x5d1cb7['y'],_0x52ab9e=_0x5d1cb7[_0x3e8adf(0x53d)];return new Rectangle(_0x24c523,_0x469f9c,_0x45a90e,_0x52ab9e);},Scene_Battle['prototype'][_0x1f5c57(0x7da)]=function(){const _0x2427d4=_0x1f5c57;this[_0x2427d4(0x2b3)]['y']=this['_helpWindow']['y']+this[_0x2427d4(0xae5)][_0x2427d4(0x53d)];if(this[_0x2427d4(0x3fd)]()){if(_0x2427d4(0xb2d)===_0x2427d4(0xb2d)){if(this[_0x2427d4(0x853)]()===_0x2427d4(0x69e))_0x2427d4(0x95e)===_0x2427d4(0x95e)?this['_cancelButton']['x']=0x8:this[_0x2427d4(0x521)]=0x0;else{if(_0x2427d4(0x6b7)!=='ynMfO')return _0x1ce0f4[_0x2427d4(0x6b3)][_0x2427d4(0xa2b)][_0x2427d4(0x5a5)](this);else this['_cancelButton']['x']=-this[_0x2427d4(0x2b3)]['width']-0x4;}}else this['push'](_0x2427d4(0xc21),_0x380b67);}else{if('tpOkV'!==_0x2427d4(0x92e)){if(!_0x4cf237['BattleCore'][_0x2427d4(0xbba)][_0x2427d4(0x8fa)][_0x2427d4(0x241)])return;_0x21feb7[_0x2427d4(0x6b3)][_0x2427d4(0xb7d)][_0x2427d4(0x5a5)](this,_0xfd4d72);}else this[_0x2427d4(0x2b3)]['x']=Graphics[_0x2427d4(0xac5)]-(Graphics['width']-Graphics[_0x2427d4(0xb4d)])/0x2-this[_0x2427d4(0x2b3)][_0x2427d4(0xac5)]-0x4;}},VisuMZ[_0x1f5c57(0x6b3)]['Scene_Battle_skillWindowRect']=Scene_Battle[_0x1f5c57(0x605)]['skillWindowRect'],Scene_Battle['prototype'][_0x1f5c57(0x47b)]=function(){const _0x3c0bef=_0x1f5c57;if(this[_0x3c0bef(0x853)]()==='border')return this['skillItemWindowRectBorderStyle']();else return this[_0x3c0bef(0x45d)]()?this[_0x3c0bef(0x41e)]():VisuMZ[_0x3c0bef(0x6b3)][_0x3c0bef(0x42a)][_0x3c0bef(0x5a5)](this);},VisuMZ['BattleCore'][_0x1f5c57(0x95d)]=Scene_Battle[_0x1f5c57(0x605)]['itemWindowRect'],Scene_Battle['prototype'][_0x1f5c57(0x560)]=function(){const _0x2cdb80=_0x1f5c57;if(this[_0x2cdb80(0x853)]()===_0x2cdb80(0x69e))return this[_0x2cdb80(0xc55)]();else return this[_0x2cdb80(0x45d)]()?this[_0x2cdb80(0x41e)]():VisuMZ['BattleCore'][_0x2cdb80(0x95d)][_0x2cdb80(0x5a5)](this);},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x45d)]=function(){const _0x1cc493=_0x1f5c57;return VisuMZ[_0x1cc493(0x6b3)][_0x1cc493(0xbba)][_0x1cc493(0x66d)][_0x1cc493(0x995)];},Scene_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x41e)]=function(){const _0x3b6f15=_0x1f5c57,_0x5a6958=Sprite_Button[_0x3b6f15(0x605)]['blockWidth']()*0x2+0x4;let _0xc024b=Graphics[_0x3b6f15(0xb4d)]-_0x5a6958;Imported[_0x3b6f15(0x8bb)]&&SceneManager[_0x3b6f15(0x2f2)]()&&(_0x3b6f15(0x955)!==_0x3b6f15(0x955)?this[_0x3b6f15(0xb07)][_0x3b6f15(0x302)][_0x3b6f15(0xb4f)]!==this[_0x3b6f15(0xc49)][_0x3b6f15(0xb44)]()&&(this[_0x3b6f15(0xb07)][_0x3b6f15(0x302)][_0x3b6f15(0xb4f)]=this[_0x3b6f15(0xc49)][_0x3b6f15(0xb44)]()):_0xc024b+=_0x5a6958);const _0x157f53=this[_0x3b6f15(0x89b)](),_0x5c511b=Graphics[_0x3b6f15(0x4f3)]-_0x157f53-this[_0x3b6f15(0x75b)]()[_0x3b6f15(0x53d)]+Window_BattleStatus[_0x3b6f15(0x605)][_0x3b6f15(0x4a7)](),_0x21250d=0x0;return new Rectangle(_0x21250d,_0x157f53,_0xc024b,_0x5c511b);},Scene_Battle[_0x1f5c57(0x605)]['createEnemyNameContainer']=function(){const _0x2190fa=_0x1f5c57;if(!VisuMZ[_0x2190fa(0x6b3)]['Settings'][_0x2190fa(0xa0b)][_0x2190fa(0x9f9)])return;this[_0x2190fa(0xbdd)]=new Sprite(),this['_enemyNameContainer']['x']=this[_0x2190fa(0x721)]['x'],this[_0x2190fa(0xbdd)]['y']=this[_0x2190fa(0x721)]['y'];const _0x2541dd=this[_0x2190fa(0x7de)][_0x2190fa(0x94d)](this[_0x2190fa(0x721)]);this[_0x2190fa(0xbb0)](this[_0x2190fa(0xbdd)],_0x2541dd);for(let _0x547f9f=0x0;_0x547f9f<0x8;_0x547f9f++){const _0x5d0052=new Window_EnemyName(_0x547f9f);this[_0x2190fa(0xbdd)][_0x2190fa(0x45b)](_0x5d0052);}},Sprite_Battler[_0x1f5c57(0x909)]=VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xbba)][_0x1f5c57(0x1df)]['MotionSpeed'],VisuMZ[_0x1f5c57(0x6b3)]['Sprite_Battler_initMembers']=Sprite_Battler[_0x1f5c57(0x605)]['initMembers'],Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x6c5)]=function(){const _0x3245c3=_0x1f5c57;VisuMZ[_0x3245c3(0x6b3)]['Sprite_Battler_initMembers'][_0x3245c3(0x5a5)](this),this[_0x3245c3(0x584)]();if(this[_0x3245c3(0x9f1)]===Sprite_Enemy)this[_0x3245c3(0x6de)]();this[_0x3245c3(0x34c)]();},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x584)]=function(){const _0x2e3bdb=_0x1f5c57;this[_0x2e3bdb(0x1ed)]=0x0,this[_0x2e3bdb(0x8b7)]=0x0,this[_0x2e3bdb(0xc6a)]=0x0,this[_0x2e3bdb(0xb5a)]=0x0,this[_0x2e3bdb(0xa2e)]=0x0,this[_0x2e3bdb(0x212)]=0x0,this[_0x2e3bdb(0x7b0)]=_0x2e3bdb(0x9b1),this[_0x2e3bdb(0x7d2)]=0x0,this[_0x2e3bdb(0xc2e)]=0x0,this['_jumpDuration']=0x0,this[_0x2e3bdb(0x812)]=0x0,this[_0x2e3bdb(0x289)]=0xff,this[_0x2e3bdb(0x602)]=0x0,this[_0x2e3bdb(0x6fa)]=0x0,this[_0x2e3bdb(0xb06)]='Linear',this['_currentAngle']=0x0,this[_0x2e3bdb(0x3cd)]=0x0,this[_0x2e3bdb(0x43f)]=0x0,this[_0x2e3bdb(0xa42)]=0x0,this[_0x2e3bdb(0x278)]=_0x2e3bdb(0x9b1),this[_0x2e3bdb(0x96f)]=!![],this[_0x2e3bdb(0xb65)]=0x0,this[_0x2e3bdb(0xa58)]=0x0,this[_0x2e3bdb(0x423)]=0x0,this[_0x2e3bdb(0x1ea)]=0x0,this[_0x2e3bdb(0x770)]=0x0,this[_0x2e3bdb(0x7a6)]=0x0,this[_0x2e3bdb(0x9b8)]=_0x2e3bdb(0x9b1),this[_0x2e3bdb(0x5ad)]=0x1,this['_growY']=0x1,this[_0x2e3bdb(0xc97)]=0x1,this[_0x2e3bdb(0xc45)]=0x1,this[_0x2e3bdb(0x712)]=0x0,this[_0x2e3bdb(0x1fe)]=0x0,this[_0x2e3bdb(0xb8e)]=_0x2e3bdb(0x9b1),this[_0x2e3bdb(0x3f3)]=0x1,this[_0x2e3bdb(0xc83)]=0x0,this['_targetHomeY']=0x0,this['_homeDuration']=0x0,this[_0x2e3bdb(0xb90)]=0x0,this[_0x2e3bdb(0xb0e)]=_0x2e3bdb(0x9b1);},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x6de)]=function(){const _0x1a1c1a=_0x1f5c57;this['_shadowSprite']=new Sprite(),this[_0x1a1c1a(0x4ee)][_0x1a1c1a(0x302)]=ImageManager[_0x1a1c1a(0x89c)]('Shadow2'),this[_0x1a1c1a(0x4ee)][_0x1a1c1a(0x302)][_0x1a1c1a(0xb4f)]=VisuMZ[_0x1a1c1a(0x6b3)][_0x1a1c1a(0xbba)]['Actor'][_0x1a1c1a(0xa3e)],this[_0x1a1c1a(0x4ee)][_0x1a1c1a(0x8de)]['x']=0.5,this[_0x1a1c1a(0x4ee)][_0x1a1c1a(0x8de)]['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x1a1c1a(0x4ee)][_0x1a1c1a(0x3c0)]=![],this[_0x1a1c1a(0x45b)](this['_shadowSprite']);},Sprite_Battler[_0x1f5c57(0x605)]['createDistortionSprite']=function(){const _0x3502f6=_0x1f5c57;this[_0x3502f6(0x73f)]=new Sprite(),this['_distortionSprite'][_0x3502f6(0x8de)]['x']=0.5,this['_distortionSprite']['anchor']['y']=0.5,this[_0x3502f6(0x45b)](this['_distortionSprite']);},Sprite_Battler['prototype'][_0x1f5c57(0xaec)]=function(){const _0x2e77a5=_0x1f5c57;if(!this[_0x2e77a5(0x73f)])return;if(this[_0x2e77a5(0x4ee)]){if('aozZl'===_0x2e77a5(0xab1))return 0x0;else{const _0x27a690=this['getChildIndex'](this[_0x2e77a5(0x73f)]);this[_0x2e77a5(0xbb0)](this[_0x2e77a5(0x4ee)],_0x27a690),this[_0x2e77a5(0x634)]();}}this[_0x2e77a5(0xa8e)]&&this[_0x2e77a5(0x73f)][_0x2e77a5(0x45b)](this['_svBattlerSprite']);if(this[_0x2e77a5(0xbdf)]){if(_0x2e77a5(0x672)==='urBUn')return;else this[_0x2e77a5(0x73f)][_0x2e77a5(0x45b)](this[_0x2e77a5(0xbdf)]);}if(this[_0x2e77a5(0xb07)]){if(_0x2e77a5(0x87b)!==_0x2e77a5(0x200))this[_0x2e77a5(0x73f)][_0x2e77a5(0x45b)](this[_0x2e77a5(0xb07)]);else{const _0x581cd8=_0x30647e(_0x493c06['$1']);return _0x94a666[_0x2e77a5(0x227)]()[_0x2e77a5(0x6ae)](_0x3a55e1=>_0x3a55e1[_0x2e77a5(0x74b)]()===_0x581cd8);}}this[_0x2e77a5(0x733)]&&this[_0x2e77a5(0x73f)][_0x2e77a5(0x45b)](this[_0x2e77a5(0x733)]);if(this['_dragonbonesSpriteContainer']){if(_0x2e77a5(0x6ee)===_0x2e77a5(0x859)){this[_0x2e77a5(0x5af)]('performSubstitute',_0x40dee2,_0xb8f482);if(!_0x233825[_0x2e77a5(0x6b3)][_0x2e77a5(0xbba)][_0x2e77a5(0x8fa)][_0x2e77a5(0x74e)])return;const _0x4dba62=_0x5b5362[_0x2e77a5(0x310)](),_0x33e166=_0x2ccda8['substitute']['format'](_0x4dba62,_0x4cba7c[_0x2e77a5(0x310)]());this[_0x2e77a5(0x5af)](_0x2e77a5(0x5c6),_0x33e166);}else this[_0x2e77a5(0x73f)][_0x2e77a5(0x45b)](this['_dragonbonesSpriteContainer']);}},Sprite_Battler['prototype']['updateShadowVisibility']=function(){const _0xaa97cb=_0x1f5c57;if(!this[_0xaa97cb(0x4ee)])return;if(this['_battler']&&this['_battler']['svBattlerShadowVisible']()){const _0x15b8c3=this[_0xaa97cb(0x4ee)][_0xaa97cb(0x302)];this[_0xaa97cb(0x4ee)]['setFrame'](0x0,0x0,_0x15b8c3['width'],_0x15b8c3[_0xaa97cb(0x53d)]);}else this['_shadowSprite']['setFrame'](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xa7a)]=function(){const _0x3b90f1=_0x1f5c57;return SceneManager[_0x3b90f1(0x2ba)]()?SceneManager['_scene'][_0x3b90f1(0x4d6)][_0x3b90f1(0x918)]:_0x3b90f1(0x4c5)===_0x3b90f1(0x4c5)?this['parent']:0x24;},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x7c0)]=function(_0x525085,_0x1def70){const _0x4a696c=_0x1f5c57;if(!this[_0x4a696c(0xc49)]['isSpriteVisible']())return;const _0x32e9e0=VisuMZ[_0x4a696c(0x6b3)][_0x4a696c(0xbba)][_0x4a696c(0x941)],_0x4bb719=new Sprite_Damage();_0x4bb719[_0x4a696c(0x546)]=_0x32e9e0[_0x4a696c(0x736)],this[_0x4a696c(0x4b6)](_0x4bb719),_0x4bb719['setupTextPopup'](_0x525085,_0x1def70),this[_0x4a696c(0x926)](_0x4bb719);},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x549)]=function(_0x12475b,_0xfa91d,_0x6c42cb){const _0x28f27e=_0x1f5c57;if(!this[_0x28f27e(0xc49)]['isSpriteVisible']())return;const _0x805561=VisuMZ[_0x28f27e(0x6b3)][_0x28f27e(0xbba)][_0x28f27e(0x941)],_0x279212=new Sprite_Damage();_0x279212[_0x28f27e(0x546)]=_0x805561[_0x28f27e(0x736)],this['sortDamageSprites'](_0x279212),_0x279212[_0x28f27e(0x549)](_0x12475b,_0xfa91d,_0x6c42cb),this[_0x28f27e(0x926)](_0x279212);},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xa76)]=function(){const _0x47628e=_0x1f5c57;if(!this[_0x47628e(0xc49)][_0x47628e(0x6d6)]())return;while(this['_battler'][_0x47628e(0x6d6)]()){if('WXUbZ'!==_0x47628e(0xace))this['_battler'][_0x47628e(0x49a)]()&&this[_0x47628e(0x708)]();else{if(_0x221afe[_0x47628e(0x8da)]())_0x3e46e1['log'](_0x321bc7);return _0x20726f[_0x47628e(0x6b3)]['Game_Action_evalDamageFormula'][_0x47628e(0x5a5)](this);}}this[_0x47628e(0xc49)][_0x47628e(0x303)](),this[_0x47628e(0xc49)][_0x47628e(0x474)]();},Sprite_Battler['prototype'][_0x1f5c57(0x708)]=function(){const _0x2f78b3=_0x1f5c57,_0x517f48=VisuMZ['BattleCore'][_0x2f78b3(0xbba)]['Damage'],_0x8f9065=new Sprite_Damage();_0x8f9065[_0x2f78b3(0x546)]=_0x517f48['PopupDuration'],this[_0x2f78b3(0x4b6)](_0x8f9065),_0x8f9065[_0x2f78b3(0x687)](this[_0x2f78b3(0xc49)]),_0x8f9065[_0x2f78b3(0x449)](this[_0x2f78b3(0xc49)]),this[_0x2f78b3(0x926)](_0x8f9065);},Sprite_Battler['prototype'][_0x1f5c57(0x926)]=function(_0xb288ca){const _0x4b808c=_0x1f5c57;this[_0x4b808c(0x88f)]['push'](_0xb288ca);if(this[_0x4b808c(0x611)]()){if(_0x4b808c(0xa88)!=='fuluP')SceneManager[_0x4b808c(0x831)][_0x4b808c(0x1ee)]['addDamageSprite'](_0xb288ca,this['_battler']);else{const _0x5d69cd=_0x4a1ab6[_0x4b808c(0x20c)]();this['push'](_0x4b808c(0xab9),_0x2ee19f,_0x30aeed,![]),this[_0x4b808c(0x5af)](_0x4b808c(0x5bc)),this['push'](_0x4b808c(0x4f8)),this[_0x4b808c(0x5af)](_0x4b808c(0x8e1)),this['push'](_0x4b808c(0x58d),_0x2e33db),this[_0x4b808c(0x5af)]('waitForMovement');}}else{this[_0x4b808c(0xa7a)]()[_0x4b808c(0x45b)](_0xb288ca);if(SceneManager[_0x4b808c(0x1d4)]())_0xb288ca['scale']['x']=-0x1;}},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x611)]=function(){const _0x28a77c=_0x1f5c57;return!$gameSystem[_0x28a77c(0x754)]()&&this[_0x28a77c(0xc49)]&&this[_0x28a77c(0xc49)][_0x28a77c(0xbcf)]();},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x4b6)]=function(_0x18d74b){const _0x3d9629=_0x1f5c57;this[_0x3d9629(0x9f5)](_0x18d74b,!![]);const _0x479492=VisuMZ[_0x3d9629(0x6b3)][_0x3d9629(0xbba)][_0x3d9629(0x941)],_0x390b84=SceneManager['isBattleFlipped']()?-0x1:0x1;if(_0x479492[_0x3d9629(0x235)]){if(_0x3d9629(0x2c8)===_0x3d9629(0x2c8))for(const _0x40f603 of this[_0x3d9629(0x88f)]){'oqkUs'!==_0x3d9629(0x282)?(_0x40f603['x']+=_0x479492[_0x3d9629(0xba1)]*_0x390b84,_0x40f603['y']+=_0x479492[_0x3d9629(0x631)]):this[_0x3d9629(0x77b)][_0x3d9629(0x3c0)]=![];}else return this[_0x3d9629(0x712)]>0x0;}else{const _0x35df40=this['_damages'][this['_damages'][_0x3d9629(0x9fe)]-0x1];_0x35df40&&(_0x18d74b['x']=_0x35df40['x']+_0x479492[_0x3d9629(0xba1)]*_0x390b84,_0x18d74b['y']=_0x35df40['y']+_0x479492['PopupShiftY']);}},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x9f5)]=function(_0x56a30a,_0x5202c6){const _0x55e1bb=_0x1f5c57,_0x2e8a5=SceneManager[_0x55e1bb(0x1d4)]()?-0x1:0x1;let _0x3c88dd=this[_0x55e1bb(0x1ed)];_0x3c88dd+=this['extraPositionX']();let _0x342774=this[_0x55e1bb(0x8b7)];const _0x2a3939=this['_distortionSprite'][_0x55e1bb(0xa7b)]['y'];_0x342774+=this[_0x55e1bb(0xb17)]();const _0x60c2ce=SceneManager['_scene'][_0x55e1bb(0x1ee)];if(_0x60c2ce&&this[_0x55e1bb(0x4e5)]===_0x60c2ce){_0x3c88dd+=_0x60c2ce['x']-this[_0x55e1bb(0x377)]();const _0x4192bb=_0x60c2ce[_0x55e1bb(0xa54)]()*0x3/0x4;_0x342774=_0x60c2ce['y']+_0x4192bb,_0x342774=Math['min'](_0x342774,_0x60c2ce['y']+this['y']-this[_0x55e1bb(0x53d)]+_0x4192bb);}_0x56a30a['x']=Math[_0x55e1bb(0x93c)](_0x3c88dd+this[_0x55e1bb(0x377)]()*_0x2e8a5),_0x56a30a['y']=Math[_0x55e1bb(0x93c)](_0x342774+this[_0x55e1bb(0x25d)]());},VisuMZ[_0x1f5c57(0x6b3)]['Sprite_Battler_damageOffsetX']=Sprite_Battler['prototype'][_0x1f5c57(0x377)],Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x377)]=function(){const _0x267cce=_0x1f5c57;let _0x479713=VisuMZ[_0x267cce(0x6b3)][_0x267cce(0x607)][_0x267cce(0x5a5)](this),_0x5baf17=VisuMZ[_0x267cce(0x6b3)][_0x267cce(0xbba)][_0x267cce(0x941)][_0x267cce(0x954)]||0x0;return Math['round'](_0x479713+_0x5baf17);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x275)]=Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x25d)],Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x25d)]=function(){const _0x5c91dd=_0x1f5c57;let _0x413720=VisuMZ[_0x5c91dd(0x6b3)][_0x5c91dd(0x275)][_0x5c91dd(0x5a5)](this);switch(VisuMZ[_0x5c91dd(0x6b3)][_0x5c91dd(0xbba)][_0x5c91dd(0x941)][_0x5c91dd(0xa6b)]){case _0x5c91dd(0x56c):_0x413720-=this[_0x5c91dd(0x53d)]*this[_0x5c91dd(0xa7b)]['y'];break;case'center':_0x413720-=this[_0x5c91dd(0x53d)]*this['scale']['y']*0.5;break;}let _0x4e2266=VisuMZ[_0x5c91dd(0x6b3)][_0x5c91dd(0xbba)][_0x5c91dd(0x941)][_0x5c91dd(0x3fb)]||0x0;return Math[_0x5c91dd(0x93c)](_0x413720+_0x4e2266);},Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x377)]=function(){const _0x14882e=_0x1f5c57;return Sprite_Battler[_0x14882e(0x605)][_0x14882e(0x377)]['call'](this);},Sprite_Actor['prototype'][_0x1f5c57(0x25d)]=function(){const _0x8114de=_0x1f5c57;return Sprite_Battler[_0x8114de(0x605)][_0x8114de(0x25d)]['call'](this);},Sprite_Battler['prototype'][_0x1f5c57(0xa36)]=function(_0x4d0f71){const _0x485c77=_0x1f5c57;if(this['isShownOnBattlePortrait']())SceneManager[_0x485c77(0x831)][_0x485c77(0x1ee)][_0x485c77(0x63a)](_0x4d0f71);else{if(_0x485c77(0x6e3)===_0x485c77(0x6e3))this[_0x485c77(0xa7a)]()['removeChild'](_0x4d0f71),this['_damages'][_0x485c77(0x665)](_0x4d0f71),_0x4d0f71[_0x485c77(0x923)]();else{if(_0x7e55e3[_0x485c77(0x1ed)]>_0x15888f)_0x1e4eb3+=_0x1d5bf0[_0x485c77(0xac5)]/0x2+_0x1faac1;if(_0x11a770[_0x485c77(0x1ed)]<_0x537158)_0x4a5886-=_0x492166[_0x485c77(0xac5)]/0x2+_0x98c77b;}}},VisuMZ['BattleCore']['Sprite_Battler_setHome']=Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x2cf)],Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x2cf)]=function(_0x5dda24,_0x434482){const _0x274824=_0x1f5c57,_0x481e4e=VisuMZ[_0x274824(0x6b3)][_0x274824(0xbba)];if(this[_0x274824(0x9f1)]===Sprite_Actor)_0x5dda24+=_0x481e4e[_0x274824(0x1df)][_0x274824(0x590)]||0x0,_0x434482+=_0x481e4e[_0x274824(0x1df)][_0x274824(0x2a8)]||0x0;else{if(this[_0x274824(0x9f1)]===Sprite_Enemy){if('ZchFs'===_0x274824(0x614)){let _0x467ed7=_0x1e98c6[_0x274824(0x6ab)];_0x467ed7*=_0x12efd8[_0x274824(0x3b5)](_0xf1d76),_0x467ed7*=this[_0x274824(0x83e)]()[_0x274824(0x2f8)](_0x1c7db3),_0x467ed7*=this[_0x274824(0xc85)](_0x198c93),_0xc51e25['random']()<_0x467ed7&&(_0x4f41be[_0x274824(0x34f)]=!![],this[_0x274824(0xb46)](_0x42bca0));}else _0x5dda24+=_0x481e4e[_0x274824(0xa0b)][_0x274824(0x590)]||0x0,_0x434482+=_0x481e4e['Enemy']['OffsetY']||0x0;}}this[_0x274824(0xc49)]&&(_0x274824(0x9d0)!==_0x274824(0x5cd)?(_0x5dda24=this[_0x274824(0xc49)][_0x274824(0x774)]??_0x5dda24,_0x434482=this[_0x274824(0xc49)][_0x274824(0xc34)]??_0x434482):(_0x10f634[_0x274824(0x6b3)][_0x274824(0x78c)](),_0x42444f[_0x274824(0x6b3)][_0x274824(0x670)](_0x2c1121),_0xa97d68[_0x274824(0x6b3)]['BindCommonEventKeysForGroup'](_0x155d3f))),VisuMZ[_0x274824(0x6b3)][_0x274824(0x3d8)][_0x274824(0x5a5)](this,_0x5dda24,_0x434482),this[_0x274824(0xc83)]=this[_0x274824(0x2b9)],this[_0x274824(0x993)]=this[_0x274824(0xc60)],this[_0x274824(0x34b)]=0x0,this[_0x274824(0xb90)]=0x0,this['_homeEasing']='Linear';},VisuMZ['BattleCore'][_0x1f5c57(0x657)]=Sprite_Battler['prototype'][_0x1f5c57(0x9ee)],Sprite_Battler['prototype'][_0x1f5c57(0x9ee)]=function(){const _0x3a0e46=_0x1f5c57;VisuMZ['BattleCore'][_0x3a0e46(0x657)][_0x3a0e46(0x5a5)](this),!this[_0x3a0e46(0xc49)]&&this[_0x3a0e46(0x792)]&&(this[_0x3a0e46(0x792)]['visible']=![]);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x8b8)]=Sprite_Battler[_0x1f5c57(0x605)]['updateMain'],Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x472)]=function(){const _0x323dff=_0x1f5c57;this['updateScale'](),this['updateSkew'](),this['updateSpin'](),this[_0x323dff(0x683)](),VisuMZ[_0x323dff(0x6b3)][_0x323dff(0x8b8)]['call'](this),this[_0x323dff(0x648)]();if(this[_0x323dff(0x9f1)]===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x1f5c57(0x6b3)]['Sprite_Battler_updatePosition']=Sprite_Battler['prototype'][_0x1f5c57(0xc5f)],Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xc5f)]=function(){const _0x34f61c=_0x1f5c57;this[_0x34f61c(0xba2)](),VisuMZ[_0x34f61c(0x6b3)][_0x34f61c(0x612)][_0x34f61c(0x5a5)](this),this['updatePositionBattleCore'](),this[_0x34f61c(0x332)]();},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x413)]=function(_0x5ce292,_0x234beb,_0xa22f3a,_0x4d2045){const _0x2257cd=_0x1f5c57;if(this['_targetHomeX']!==_0x5ce292||this['_targetHomeY']!==_0x234beb){if(_0x2257cd(0x3a0)===_0x2257cd(0x3a0))this[_0x2257cd(0xc83)]=_0x5ce292,this[_0x2257cd(0x993)]=_0x234beb,this[_0x2257cd(0x34b)]=_0xa22f3a,this['_homeWholeDuration']=_0xa22f3a,this[_0x2257cd(0xb0e)]=_0x4d2045,_0xa22f3a<=0x0&&this[_0x2257cd(0x4f6)]();else{if(!_0x328cc1[_0x2257cd(0x6b3)][_0x2257cd(0x91a)])return;if(_0x49db27[_0x2257cd(0x2fc)]&&_0x575216[_0x2257cd(0x319)]())return;const _0x132953=_0x9c32a2['aliveMembers']()[_0x2257cd(0x6ae)](_0x4228fe=>_0x4228fe[_0x2257cd(0x7e6)]()&&_0x4228fe[_0x2257cd(0xb6a)]());_0x1a0906[_0x2257cd(0x7e7)]=_0x132953[0x0]||null,_0x34937a[_0x2257cd(0x7e7)]&&_0x4405ae[_0x2257cd(0x7e7)]['setActionState'](_0x2257cd(0x70c));}}},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xba2)]=function(){const _0x17a98a=_0x1f5c57;if(this['_homeDuration']<=0x0)return;const _0x5cf5b4=this['_homeDuration'],_0x392339=this[_0x17a98a(0xb90)],_0x2ea2c7=this[_0x17a98a(0xb0e)];Imported[_0x17a98a(0x8bb)]?(this[_0x17a98a(0x2b9)]=this[_0x17a98a(0xb05)](this[_0x17a98a(0x2b9)],this[_0x17a98a(0xc83)],_0x5cf5b4,_0x392339,_0x2ea2c7),this[_0x17a98a(0xc60)]=this[_0x17a98a(0xb05)](this['_homeY'],this[_0x17a98a(0x993)],_0x5cf5b4,_0x392339,_0x2ea2c7)):(this['_homeX']=(this['_homeX']*(_0x5cf5b4-0x1)+this[_0x17a98a(0xc83)])/_0x5cf5b4,this[_0x17a98a(0xc60)]=(this[_0x17a98a(0xc60)]*(_0x5cf5b4-0x1)+this['_targetHomeY'])/_0x5cf5b4);this[_0x17a98a(0x34b)]--;if(this[_0x17a98a(0x34b)]<=0x0)this[_0x17a98a(0x4f6)]();},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x4f6)]=function(){const _0x132ff0=_0x1f5c57;this[_0x132ff0(0x2b9)]=this['_targetHomeX'],this[_0x132ff0(0xc60)]=this[_0x132ff0(0x993)];},Sprite_Battler[_0x1f5c57(0x605)]['updatePositionBattleCore']=function(){const _0x409133=_0x1f5c57;this[_0x409133(0x1ed)]=this['x'],this['_baseY']=this['y'],this[_0x409133(0xa32)](),this['updateJump'](),this['x']+=this[_0x409133(0x8ad)](),this['y']+=this[_0x409133(0xb17)](),this['y']+=this[_0x409133(0x2dd)](),this['x']=Math[_0x409133(0x617)](this['x']),this['y']=Math[_0x409133(0x617)](this['y']);},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x8ad)]=function(){let _0x2b4a0f=0x0;return _0x2b4a0f;},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xb17)]=function(){const _0x35b159=_0x1f5c57;let _0x3ff229=0x0;if(this['_battler']&&!this['_battler'][_0x35b159(0xc7e)]()){if(_0x35b159(0x390)!==_0x35b159(0x390)){const _0x38e9bb=_0x94799b(_0x304db4['$1']);this[_0x35b159(0x7aa)](_0x38e9bb);}else _0x3ff229-=this['_floatHeight'],_0x3ff229-=this[_0x35b159(0x7d2)];}return _0x3ff229;},Sprite_Battler[_0x1f5c57(0x605)]['extraPositionScaledY']=function(){const _0x53925c=_0x1f5c57;let _0x35e2d3=0x0;if(this[_0x53925c(0x73f)]&&this['constructor']!==Sprite_SvEnemy){const _0x45055b=this['_distortionSprite']['scale']['y'];_0x35e2d3-=(_0x45055b-0x1)*this[_0x53925c(0x53d)];}return _0x35e2d3;},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x683)]=function(){const _0x412ba8=_0x1f5c57,_0x24d203=this[_0x412ba8(0xc49)]&&this[_0x412ba8(0xc49)][_0x412ba8(0x91c)]();this[_0x412ba8(0x3f3)]=(_0x24d203?-0x1:0x1)*Math[_0x412ba8(0x938)](this[_0x412ba8(0xa7b)]['x']);},Sprite_Battler['prototype']['startFloat']=function(_0x3e3ff1,_0x1a8989,_0x164b30){const _0x53867c=_0x1f5c57;if(!this[_0x53867c(0x797)]())return;if(this[_0x53867c(0xb5a)]===_0x3e3ff1)return;this[_0x53867c(0xb5a)]=_0x3e3ff1,this[_0x53867c(0xa2e)]=_0x1a8989,this['_floatWholeDuration']=_0x1a8989,this['_floatEasing']=_0x164b30||_0x53867c(0x9b1);if(_0x1a8989<=0x0)this[_0x53867c(0xc6a)]=_0x3e3ff1;},Sprite_Battler['prototype'][_0x1f5c57(0xa32)]=function(){const _0x393b25=_0x1f5c57;if(this[_0x393b25(0xa2e)]<=0x0)return;const _0x256993=this[_0x393b25(0xa2e)],_0x2bb602=this[_0x393b25(0x212)],_0x5d2279=this[_0x393b25(0x7b0)];Imported[_0x393b25(0x8bb)]?this[_0x393b25(0xc6a)]=this[_0x393b25(0xb05)](this[_0x393b25(0xc6a)],this['_targetFloatHeight'],_0x256993,_0x2bb602,_0x5d2279):this[_0x393b25(0xc6a)]=(this[_0x393b25(0xc6a)]*(_0x256993-0x1)+this['_targetFloatHeight'])/_0x256993;this[_0x393b25(0xa2e)]--;if(this[_0x393b25(0xa2e)]<=0x0)this[_0x393b25(0xc05)]();},Sprite_Battler['prototype']['onFloatEnd']=function(){const _0x1cb744=_0x1f5c57;this[_0x1cb744(0xc6a)]=this[_0x1cb744(0xb5a)];},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xc66)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x1f5c57(0x605)]['startJump']=function(_0x45c8df,_0x11e139){const _0x239cfc=_0x1f5c57;if(!this[_0x239cfc(0x797)]())return;if(_0x11e139<=0x0)return;this['_jumpMaxHeight']=_0x45c8df,this[_0x239cfc(0x3bd)]=_0x11e139,this[_0x239cfc(0x812)]=_0x11e139;},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x601)]=function(){const _0x2fda21=_0x1f5c57;if(this[_0x2fda21(0x3bd)]<=0x0)return;const _0x232d5c=this['_jumpWholeDuration']-this[_0x2fda21(0x3bd)],_0x2d350c=this[_0x2fda21(0x812)]/0x2,_0x54f92e=this[_0x2fda21(0xc2e)],_0x5298c3=-_0x54f92e/Math['pow'](_0x2d350c,0x2);this[_0x2fda21(0x7d2)]=_0x5298c3*Math['pow'](_0x232d5c-_0x2d350c,0x2)+_0x54f92e,this['_jumpDuration']--;if(this[_0x2fda21(0x3bd)]<=0x0)return this[_0x2fda21(0x1f2)]();},Sprite_Battler['prototype'][_0x1f5c57(0x1f2)]=function(){this['_jumpHeight']=0x0;},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x644)]=function(){return this['_jumpDuration']>0x0;},Sprite_Battler['prototype'][_0x1f5c57(0xb8d)]=function(_0x5f51d4,_0x3ad282,_0x396df1){const _0x17d544=_0x1f5c57;if(this[_0x17d544(0x289)]===_0x5f51d4)return;this[_0x17d544(0x289)]=_0x5f51d4,this[_0x17d544(0x602)]=_0x3ad282,this[_0x17d544(0x6fa)]=_0x3ad282,this[_0x17d544(0xb06)]=_0x396df1||_0x17d544(0x9b1);if(_0x3ad282<=0x0)this[_0x17d544(0x337)]=_0x5f51d4;},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x332)]=function(){const _0x248011=_0x1f5c57;if(this[_0x248011(0x9f1)][_0x248011(0x310)]==='Sprite_SvEnemy')return;if(this[_0x248011(0x602)]<=0x0)return;const _0x3ffc1d=this[_0x248011(0x602)],_0x59646c=this[_0x248011(0x6fa)],_0x30b1f2=this[_0x248011(0xb06)];Imported['VisuMZ_0_CoreEngine']?this[_0x248011(0x337)]=this[_0x248011(0xb05)](this[_0x248011(0x337)],this[_0x248011(0x289)],_0x3ffc1d,_0x59646c,_0x30b1f2):this['opacity']=(this[_0x248011(0x337)]*(_0x3ffc1d-0x1)+this['_targetOpacity'])/_0x3ffc1d;this['_opacityDuration']--;if(this[_0x248011(0x602)]<=0x0)this[_0x248011(0xa07)]();},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xa07)]=function(){const _0x19367d=_0x1f5c57;this[_0x19367d(0x337)]=this[_0x19367d(0x289)];},Sprite_Battler[_0x1f5c57(0x605)]['isChangingOpacity']=function(){const _0x4d3751=_0x1f5c57;return this[_0x4d3751(0x602)]>0x0;},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xaf7)]=function(){const _0x44dcc2=_0x1f5c57;this['_shadowSprite'][_0x44dcc2(0x3c0)]=this['_battler'][_0x44dcc2(0x4d7)](),this[_0x44dcc2(0xa44)]();},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xa44)]=function(){const _0x385634=_0x1f5c57;if(!this[_0x385634(0x4ee)])return;this[_0x385634(0x4ee)]['y']=this[_0x385634(0x8b7)]-this['y']-0x2;},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xc96)]=function(){const _0x42c4e1=_0x1f5c57;if(!this[_0x42c4e1(0xc49)])return;this[_0x42c4e1(0xab3)]=this['_battler'][_0x42c4e1(0x26f)](),this[_0x42c4e1(0x5b2)]=this[_0x42c4e1(0xc49)]['battlerShadowScaleY']();},Game_BattlerBase[_0x1f5c57(0x605)][_0x1f5c57(0x26f)]=function(){const _0x22a378=_0x1f5c57,_0x4460de=this[_0x22a378(0xbcf)]()?this['actor']():this['enemy']();if(_0x4460de){const _0x374890=_0x4460de[_0x22a378(0x9bc)];if(_0x374890['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x374890[_0x22a378(0x7a1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if(_0x22a378(0x9c3)!==_0x22a378(0x7d6))return Number(RegExp['$1'])||0x0;else this[_0x22a378(0xb1c)]['removeChild'](_0x128957);}}}return 0x1;},Game_BattlerBase['prototype'][_0x1f5c57(0x95b)]=function(){const _0x239b17=_0x1f5c57,_0x1f892b=this[_0x239b17(0xbcf)]()?this[_0x239b17(0x2f7)]():this[_0x239b17(0xc2a)]();if(_0x1f892b){if('xYjlv'===_0x239b17(0x2b7)){const _0xb8ad48=this[_0x239b17(0x940)](this[_0x239b17(0x891)]());let _0x7dd114=this[_0x239b17(0xbd7)](this[_0x239b17(0x891)]());_0x7dd114=_0x7dd114[_0x239b17(0x6e6)](/\\I\[(\d+)\]/gi,''),_0x5289d4['resetFontSettings'](),this['commandNameWindowDrawBackground'](_0x7dd114,_0xb8ad48),this[_0x239b17(0x1d6)](_0x7dd114,_0xb8ad48),this[_0x239b17(0x81e)](_0x7dd114,_0xb8ad48);}else{const _0x53fa6a=_0x1f892b['note'];if(_0x53fa6a[_0x239b17(0x7a1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i)){if('tqLSe'!=='ZzArD')return Number(RegExp['$1'])*0.01;else{this['removeAnimationFromContainer'](_0x1c8a49);for(const _0x599333 of _0x30f213[_0x239b17(0xa8c)]){_0x599333[_0x239b17(0x4aa)]&&_0x599333[_0x239b17(0x4aa)]();}_0x2f57cc['destroy']();}}else{if(_0x53fa6a[_0x239b17(0x7a1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i)){if(_0x239b17(0x968)!==_0x239b17(0x968))this[_0x239b17(0xb35)]();else return Number(RegExp['$1'])||0x0;}}}}return 0x1;},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xa9e)]=function(){const _0x2a74c5=_0x1f5c57;if(this[_0x2a74c5(0x9f1)]===Sprite_SvEnemy)return;this[_0x2a74c5(0x77c)](),this[_0x2a74c5(0xc3c)]();},Sprite_Battler[_0x1f5c57(0x605)]['finalizeScale']=function(){const _0x3035fd=_0x1f5c57,_0x138718=this[_0x3035fd(0x73f)];if(_0x138718){if(_0x3035fd(0xa06)!==_0x3035fd(0xa06)){if(this[_0x3035fd(0x38d)]()>=0x1)return!![];return this['svBattlerData']()[_0x3035fd(0x870)];}else _0x138718[_0x3035fd(0xa7b)]['x']=this[_0x3035fd(0xc90)](),_0x138718[_0x3035fd(0xa7b)]['y']=this[_0x3035fd(0x834)]();}},Sprite_Battler['prototype']['mainSpriteScaleX']=function(){const _0x13fee5=_0x1f5c57;let _0x3a26b2=0x1;return _0x3a26b2*=this[_0x13fee5(0x3f3)],_0x3a26b2*=this['_growX'],_0x3a26b2;},Sprite_Battler[_0x1f5c57(0x605)]['mainSpriteScaleY']=function(){const _0x5ca113=_0x1f5c57;return 0x1*this[_0x5ca113(0x5bf)];},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x8c7)]=function(){const _0x3995d6=_0x1f5c57;return this[_0x3995d6(0xac5)]*this['mainSpriteScaleX']();},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xc35)]=function(){const _0x301801=_0x1f5c57;return this[_0x301801(0x53d)]*this['mainSpriteScaleY']();},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x944)]=function(_0x580d3e,_0x19ccff,_0x33d968,_0x36f8aa){const _0x32efe1=_0x1f5c57;if(!this['canMove']())return;if(!this[_0x32efe1(0x73f)])return;if(this[_0x32efe1(0xc97)]===_0x580d3e&&this[_0x32efe1(0xc45)]===_0x19ccff)return;this['_targetGrowX']=_0x580d3e,this[_0x32efe1(0xc45)]=_0x19ccff,this[_0x32efe1(0x712)]=_0x33d968,this[_0x32efe1(0x1fe)]=_0x33d968,this[_0x32efe1(0xb8e)]=_0x36f8aa||_0x32efe1(0x9b1),_0x33d968<=0x0&&('sWYqY'!==_0x32efe1(0x896)?(this[_0x32efe1(0x5ad)]=this[_0x32efe1(0xc97)],this[_0x32efe1(0x5bf)]=this['_targetGrowY']):_0x4bc43b[_0x32efe1(0x4ea)](_0x506b3f[_0x32efe1(0x4ed)],0x0));},Sprite_Battler[_0x1f5c57(0x605)]['updateGrow']=function(){const _0x4606be=_0x1f5c57;if(this[_0x4606be(0x712)]<=0x0)return;if(!this[_0x4606be(0x73f)])return;const _0x1eb6fe=this['_growDuration'],_0x383626=this[_0x4606be(0x1fe)],_0x5ef3bf=this[_0x4606be(0xb8e)];Imported[_0x4606be(0x8bb)]?(this[_0x4606be(0x5ad)]=this[_0x4606be(0xb05)](this['_growX'],this[_0x4606be(0xc97)],_0x1eb6fe,_0x383626,_0x5ef3bf),this[_0x4606be(0x5bf)]=this[_0x4606be(0xb05)](this['_growY'],this['_targetGrowY'],_0x1eb6fe,_0x383626,_0x5ef3bf)):(this[_0x4606be(0x5ad)]=(this[_0x4606be(0x5ad)]*(_0x1eb6fe-0x1)+this[_0x4606be(0xc97)])/_0x1eb6fe,this[_0x4606be(0x5bf)]=(this['_growY']*(_0x1eb6fe-0x1)+this['_targetGrowY'])/_0x1eb6fe);this[_0x4606be(0x712)]--;if(this[_0x4606be(0x712)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x1f5c57(0x605)]['onGrowEnd']=function(){const _0x1b925b=_0x1f5c57;this['_growX']=this[_0x1b925b(0xc97)],this[_0x1b925b(0x5bf)]=this[_0x1b925b(0xc45)];},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x467)]=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x1f5c57(0x605)]['startSkew']=function(_0x5c8526,_0x5d0258,_0xff872e,_0x6384db){const _0xb0774a=_0x1f5c57;if(!this[_0xb0774a(0x797)]())return;if(!this['_distortionSprite'])return;if(this['_targetSkewX']===_0x5c8526&&this[_0xb0774a(0x1ea)]===_0x5d0258)return;this[_0xb0774a(0x423)]=_0x5c8526,this[_0xb0774a(0x1ea)]=_0x5d0258,this['_skewDuration']=_0xff872e,this['_skewWholeDuration']=_0xff872e,this[_0xb0774a(0x9b8)]=_0x6384db||'Linear',_0xff872e<=0x0&&(this['_distortionSprite']['skew']['x']=this[_0xb0774a(0x423)],this[_0xb0774a(0x73f)]['skew']['y']=this['_targetSkewY']);},Sprite_Battler['prototype']['updateSkew']=function(){const _0x26fe5b=_0x1f5c57;if(this['_skewDuration']<=0x0)return;if(!this[_0x26fe5b(0x73f)])return;const _0x1ea0bc=this[_0x26fe5b(0x770)],_0x9eaeac=this[_0x26fe5b(0x7a6)],_0x1045cd=this[_0x26fe5b(0x9b8)],_0x4a34be=this[_0x26fe5b(0x73f)];if(Imported[_0x26fe5b(0x8bb)])_0x26fe5b(0x34a)==='ayBeP'?_0x174066*=this[_0x26fe5b(0x2d6)]():(_0x4a34be[_0x26fe5b(0x537)]['x']=this['applyEasing'](_0x4a34be[_0x26fe5b(0x537)]['x'],this[_0x26fe5b(0x423)],_0x1ea0bc,_0x9eaeac,_0x1045cd),_0x4a34be['skew']['y']=this['applyEasing'](_0x4a34be[_0x26fe5b(0x537)]['y'],this[_0x26fe5b(0x1ea)],_0x1ea0bc,_0x9eaeac,_0x1045cd));else{if(_0x26fe5b(0x29f)!==_0x26fe5b(0x29f)){this[_0x26fe5b(0x474)]();if(_0x2cf935['VisuMZ_1_SkillsStatesCore']){const _0x57593c=_0x56bf11['SkillsStatesCore'][_0x26fe5b(0xbba)][_0x26fe5b(0x969)];_0x57593c&&_0x57593c[_0x26fe5b(0xa7e)]===![]&&this[_0x26fe5b(0x748)](0x1);}else this['removeStatesAuto'](0x1);this[_0x26fe5b(0xb45)]();}else _0x4a34be[_0x26fe5b(0x537)]['x']=(_0x4a34be[_0x26fe5b(0x537)]['x']*(_0x1ea0bc-0x1)+this[_0x26fe5b(0x423)])/_0x1ea0bc,_0x4a34be[_0x26fe5b(0x537)]['y']=(_0x4a34be['skew']['y']*(_0x1ea0bc-0x1)+this[_0x26fe5b(0x1ea)])/_0x1ea0bc;}this[_0x26fe5b(0x770)]--;if(this[_0x26fe5b(0x770)]<=0x0)this[_0x26fe5b(0x914)]();},Sprite_Battler['prototype']['onSkewEnd']=function(){const _0x2a2b6c=_0x1f5c57;this[_0x2a2b6c(0x73f)][_0x2a2b6c(0x537)]['x']=this[_0x2a2b6c(0x423)],this[_0x2a2b6c(0x73f)][_0x2a2b6c(0x537)]['y']=this['_targetSkewY'];},Sprite_Battler[_0x1f5c57(0x605)]['isSkewing']=function(){return this['_skewDuration']>0x0;},Sprite_Battler['prototype'][_0x1f5c57(0x7ec)]=function(_0x4efc86,_0x596b21,_0x4cecc9,_0x51c352){const _0x47b0e4=_0x1f5c57;if(!this[_0x47b0e4(0x797)]())return;if(!this[_0x47b0e4(0x73f)])return;if(this[_0x47b0e4(0x3cd)]===_0x4efc86)return;this['_targetAngle']=_0x4efc86,this[_0x47b0e4(0x43f)]=_0x596b21,this[_0x47b0e4(0xa42)]=_0x596b21,this[_0x47b0e4(0x278)]=_0x4cecc9||_0x47b0e4(0x9b1),this['_angleRevertOnFinish']=_0x51c352,this[_0x47b0e4(0x96f)]===undefined&&(this['_angleRevertOnFinish']=!![]),_0x596b21<=0x0&&(this[_0x47b0e4(0x557)]=_0x4efc86,this[_0x47b0e4(0x96f)]&&(this[_0x47b0e4(0x3cd)]=0x0,this[_0x47b0e4(0x557)]=0x0));},Sprite_Battler['prototype'][_0x1f5c57(0xb64)]=function(){const _0x661013=_0x1f5c57;this[_0x661013(0xb5b)](),this[_0x661013(0x50d)]();},Sprite_Battler['prototype'][_0x1f5c57(0xb5b)]=function(){const _0x5ed508=_0x1f5c57;if(this[_0x5ed508(0x43f)]<=0x0)return;const _0x377448=this[_0x5ed508(0x43f)],_0x238479=this[_0x5ed508(0xa42)],_0x4f3fe1=this[_0x5ed508(0x278)];if(Imported[_0x5ed508(0x8bb)])this['_currentAngle']=this[_0x5ed508(0xb05)](this[_0x5ed508(0x557)],this[_0x5ed508(0x3cd)],_0x377448,_0x238479,_0x4f3fe1);else{if('OTnmt'===_0x5ed508(0x294))this['_currentAngle']=(this[_0x5ed508(0x557)]*(_0x377448-0x1)+this['_targetAngle'])/_0x377448;else{if(!_0x378c22[_0x5ed508(0x2ba)]())return;const _0x420158=_0x476d1f[_0x5ed508(0x78b)]();if(!_0x420158)return;_0x420158[_0x5ed508(0x924)](_0x5ed508(0x66f));}}this['_angleDuration']--;if(this['_angleDuration']<=0x0)this[_0x5ed508(0x2ee)]();},Sprite_Battler['prototype'][_0x1f5c57(0x2ee)]=function(){const _0x2ff0fe=_0x1f5c57;this[_0x2ff0fe(0x557)]=this['_targetAngle'],this[_0x2ff0fe(0x96f)]&&('wYUtc'!==_0x2ff0fe(0x5e9)?this[_0x2ff0fe(0x708)]():(this['_targetAngle']=0x0,this[_0x2ff0fe(0x557)]=0x0));},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xb28)]=function(){const _0x5bef86=_0x1f5c57;return this[_0x5bef86(0x43f)]>0x0;},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x50d)]=function(){const _0x61c56d=_0x1f5c57;if(!this['_distortionSprite'])return;const _0x2d1064=this[_0x61c56d(0x557)],_0x4fcdf3=this[_0x61c56d(0xa7b)]['x'],_0x984b75=this[_0x61c56d(0xc49)][_0x61c56d(0xbcf)]()?-0x1:0x1;this[_0x61c56d(0x73f)][_0x61c56d(0x975)]=_0x2d1064*_0x4fcdf3*_0x984b75;const _0x2c189a=this[_0x61c56d(0x73f)][_0x61c56d(0xa7b)]['y'];this[_0x61c56d(0x73f)]['y']=this[_0x61c56d(0x53d)]*-0.5*(0x2-_0x2c189a),this[_0x61c56d(0x73f)]['y']=Math['ceil'](this[_0x61c56d(0x73f)]['y']);const _0x50a87f=[this[_0x61c56d(0xb07)],this[_0x61c56d(0xa8e)],this[_0x61c56d(0x38b)]];for(const _0xf39bf5 of _0x50a87f){if(!_0xf39bf5)continue;_0xf39bf5['y']=this[_0x61c56d(0x53d)]*0.5;}this['_shadowSprite']&&('anVPH'===_0x61c56d(0x313)?(_0x26e9a9=_0x3bd6c2[_0x61c56d(0x6e6)](/\x1I\[(\d+)\]/gi,''),_0x499802=_0x2dfd66[_0x61c56d(0x6e6)](/\\I\[(\d+)\]/gi,'')):(this[_0x61c56d(0xab3)]=this[_0x61c56d(0xab3)]??0x1,this['_shadowScaleY']=this[_0x61c56d(0x5b2)]??0x1,this[_0x61c56d(0x4ee)][_0x61c56d(0xa7b)]['x']=this[_0x61c56d(0x73f)][_0x61c56d(0xa7b)]['x']*this[_0x61c56d(0xab3)],this[_0x61c56d(0x4ee)]['scale']['y']=this[_0x61c56d(0x73f)][_0x61c56d(0xa7b)]['y']*this[_0x61c56d(0x5b2)]));},VisuMZ['BattleCore']['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0xc80)],Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0xc80)]=function(){const _0x424f95=_0x1f5c57;VisuMZ[_0x424f95(0x6b3)][_0x424f95(0x9e9)][_0x424f95(0x5a5)](this),VisuMZ[_0x424f95(0x6b3)]['Settings'][_0x424f95(0x3b3)][_0x424f95(0xb1b)]&&this[_0x424f95(0x208)]();},VisuMZ[_0x1f5c57(0x6b3)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy['prototype']['createStateIconSprite'],Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x699)]=function(){const _0x48a8af=_0x1f5c57;VisuMZ['BattleCore'][_0x48a8af(0xbba)][_0x48a8af(0x3b3)][_0x48a8af(0x6b4)]&&this[_0x48a8af(0x208)](),VisuMZ[_0x48a8af(0x6b3)][_0x48a8af(0x8f4)][_0x48a8af(0x5a5)](this);},Sprite_Battler['prototype']['createHpGaugeSprite']=function(){const _0x540152=_0x1f5c57;if(!ConfigManager[_0x540152(0x2c2)])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x429444=VisuMZ[_0x540152(0x6b3)][_0x540152(0xbba)][_0x540152(0x3b3)],_0xc2fcea=new Sprite_HpGauge();_0xc2fcea[_0x540152(0x8de)]['x']=_0x429444[_0x540152(0xc81)],_0xc2fcea['anchor']['y']=_0x429444[_0x540152(0x8be)],_0xc2fcea['scale']['x']=_0xc2fcea[_0x540152(0xa7b)]['y']=_0x429444[_0x540152(0xaa8)],this[_0x540152(0x792)]=_0xc2fcea,this[_0x540152(0x45b)](this[_0x540152(0x792)]),Spriteset_Battle[_0x540152(0x305)]&&('oLgQZ'==='oLgQZ'?BattleManager[_0x540152(0x71d)](this['_hpGaugeSprite']):this['_battleLayoutStyle']=_0x540152(0x3b1));},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x358)]=Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x582)],Sprite_Battler['prototype'][_0x1f5c57(0x582)]=function(_0x42fab0){const _0x428e0b=_0x1f5c57,_0x4ca575=this['_battler'];VisuMZ['BattleCore'][_0x428e0b(0x358)]['call'](this,_0x42fab0),this[_0x428e0b(0x76e)](_0x42fab0);if(_0x4ca575!==_0x42fab0)this[_0x428e0b(0xc96)]();},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x76e)]=function(_0x4fc071){const _0x1bfbf3=_0x1f5c57;if(!_0x4fc071)return;if(!this[_0x1bfbf3(0x792)])return;if(_0x4fc071[_0x1bfbf3(0xbcf)]()){}else{if(_0x4fc071[_0x1bfbf3(0x951)]()){if(this['constructor']===Sprite_SvEnemy&&!_0x4fc071['hasSvBattler']())return;}}this[_0x1bfbf3(0x792)]['setup'](_0x4fc071,'hp');},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x381)]=function(){const _0x4447a0=_0x1f5c57;return this['_battler']&&this[_0x4447a0(0xc49)][_0x4447a0(0x381)]();},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0xbe7)]=function(){const _0x206cb3=_0x1f5c57,_0x2df3c7=this[_0x206cb3(0xb07)]['bitmap'];if(!_0x2df3c7)return;const _0x285a08=_0x2df3c7['width'];let _0x5f268b=_0x2df3c7['height'];if(this[_0x206cb3(0xc49)][_0x206cb3(0x750)]()){if(this[_0x206cb3(0x99d)])_0x5f268b=Math[_0x206cb3(0x795)](0x0,this[_0x206cb3(0x99d)][_0x206cb3(0x53d)]-0x4);}this[_0x206cb3(0xb07)][_0x206cb3(0x2a1)](0x0,0x0,_0x285a08,_0x5f268b),this[_0x206cb3(0x2a1)](0x0,0x0,_0x285a08,_0x5f268b);},Sprite_Battler[_0x1f5c57(0x605)]['updateHpGaugePosition']=function(){const _0x26c98f=_0x1f5c57;if(!this[_0x26c98f(0xc49)])return;if(!this[_0x26c98f(0x792)])return;const _0x1e37ec=VisuMZ[_0x26c98f(0x6b3)][_0x26c98f(0xbba)]['HpGauge'],_0x598ff7=this[_0x26c98f(0x792)];_0x598ff7['visible']=this[_0x26c98f(0x8e8)]();const _0x351e9f=_0x1e37ec['OffsetX'],_0x379eb4=_0x1e37ec[_0x26c98f(0x2a8)];_0x598ff7['x']=_0x351e9f,_0x598ff7['x']+=this[_0x26c98f(0xc49)][_0x26c98f(0x720)](),_0x598ff7['y']=-this[_0x26c98f(0x53d)]+_0x379eb4,_0x598ff7['y']+=this[_0x26c98f(0xc49)][_0x26c98f(0xb30)](),Spriteset_Battle[_0x26c98f(0x305)]&&SceneManager[_0x26c98f(0x831)][_0x26c98f(0x4d6)]&&(_0x598ff7['x']+=this['x'],_0x598ff7['y']+=this['y']);},Sprite_Battler['prototype'][_0x1f5c57(0x8e8)]=function(){const _0xb2db98=_0x1f5c57;if(!this[_0xb2db98(0xc49)])return![];if(this[_0xb2db98(0xc49)][_0xb2db98(0xbcf)]())return!![];if(this[_0xb2db98(0xc49)][_0xb2db98(0x55b)]())return![];if(this[_0xb2db98(0x337)]<=0x0)return![];const _0x58ff70=this['_battler'][_0xb2db98(0xc2a)]()[_0xb2db98(0x9bc)];if(_0x58ff70[_0xb2db98(0x7a1)](/<SHOW HP GAUGE>/i))return!![];if(_0x58ff70['match'](/<HIDE HP GAUGE>/i))return![];const _0x4f5961=VisuMZ[_0xb2db98(0x6b3)][_0xb2db98(0xbba)][_0xb2db98(0x3b3)];if(_0x4f5961[_0xb2db98(0x238)]){if(_0x4f5961[_0xb2db98(0xa04)]&&BattleManager['isBattleTest']())return!![];if(this[_0xb2db98(0xc49)]['_visualHpGauge_JustDied'])return![];return this[_0xb2db98(0xc49)][_0xb2db98(0xa52)]();}return!![];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x20e)]=Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x7cc)],Sprite_Battler['prototype'][_0x1f5c57(0x7cc)]=function(){const _0x342365=_0x1f5c57;if(!this[_0x342365(0xc49)])return![];if(this['_homeDuration']>0x0)return!![];return VisuMZ[_0x342365(0x6b3)][_0x342365(0x20e)][_0x342365(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x5f4)]=Sprite_Battler[_0x1f5c57(0x605)]['startMove'],Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x3e9)]=function(_0x55aacf,_0x2a2a1c,_0x24f6d3){const _0x50993f=_0x1f5c57;this[_0x50993f(0x797)]()&&VisuMZ[_0x50993f(0x6b3)][_0x50993f(0x5f4)][_0x50993f(0x5a5)](this,_0x55aacf,_0x2a2a1c,_0x24f6d3);},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x797)]=function(){const _0x17806b=_0x1f5c57;if(this['_battler']&&this['_battler'][_0x17806b(0x750)]())return![];if(this[_0x17806b(0xc49)]&&!this[_0x17806b(0xc49)][_0x17806b(0x8b2)]())return![];return $gameSystem[_0x17806b(0x754)]();},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x42b)]=function(){},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x8f3)]=function(){const _0x453f5d=_0x1f5c57;this[_0x453f5d(0x3e9)](0x0,0x0,0xc);},Sprite_Battler[_0x1f5c57(0x605)][_0x1f5c57(0x353)]=function(){},Sprite_Battler['prototype'][_0x1f5c57(0x33c)]=function(){const _0x49fb29=_0x1f5c57,_0x4408da=VisuMZ[_0x49fb29(0x6b3)][_0x49fb29(0xbba)][_0x49fb29(0x1df)],_0x4923ed=this[_0x49fb29(0xc49)]&&this[_0x49fb29(0xc49)][_0x49fb29(0xbcf)]()?0x1:-0x1,_0x58f019=this[_0x49fb29(0x1ed)]-this[_0x49fb29(0x2b9)]+_0x4923ed*_0x4408da[_0x49fb29(0xaaa)],_0x3894ef=this[_0x49fb29(0x8b7)]-this[_0x49fb29(0xc60)]+_0x4923ed*_0x4408da[_0x49fb29(0x3fc)],_0x5ae9fc=_0x4408da['FlinchDuration'];this[_0x49fb29(0x3e9)](_0x58f019,_0x3894ef,_0x5ae9fc);},VisuMZ['BattleCore'][_0x1f5c57(0x226)]=Sprite_Actor['prototype']['initMembers'],Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x6c5)]=function(){const _0x179efd=_0x1f5c57;VisuMZ[_0x179efd(0x6b3)][_0x179efd(0x226)][_0x179efd(0x5a5)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x1f5c57(0x605)]['mainSprite']=function(){const _0x34a33d=_0x1f5c57;return this['_distortionSprite']||this[_0x34a33d(0xb07)]||this;},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x60f)]=Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0xa5e)],Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0xa5e)]=function(){},Sprite_Actor[_0x1f5c57(0x605)]['moveToStartPositionBattleCore']=function(_0x2f71a2){const _0x36087a=_0x1f5c57;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x2f71a2)return;if(!_0x2f71a2[_0x36087a(0x797)]())return;VisuMZ[_0x36087a(0x6b3)][_0x36087a(0x60f)][_0x36087a(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xa15)]=Sprite_Actor['prototype']['setActorHome'],Sprite_Actor['prototype'][_0x1f5c57(0x2f3)]=function(_0x1e232a){const _0x40444b=_0x1f5c57;if(VisuMZ[_0x40444b(0x6b3)][_0x40444b(0xbba)][_0x40444b(0x1df)]['HomePosJS']){if(_0x40444b(0x661)==='yhCRB')return this[_0x40444b(0xb73)]&&this['_actor'][_0x40444b(0x1cf)]();else VisuMZ[_0x40444b(0x6b3)][_0x40444b(0xbba)][_0x40444b(0x1df)][_0x40444b(0x254)]['call'](this,_0x1e232a);}else'XxFOj'==='DAoKf'?(_0x66b277['isAttack']()&&_0x3bfafb['isActor']()&&this[_0x40444b(0x5af)](_0x40444b(0x98d),_0x47edcd,_0x4a9bfb),this[_0x40444b(0x7ba)](_0x4458fe,_0x4b5738,_0x24d6d2)):VisuMZ[_0x40444b(0x6b3)]['Sprite_Actor_setActorHome'][_0x40444b(0x5a5)](this,_0x1e232a);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xb98)]=Sprite_Actor['prototype'][_0x1f5c57(0x582)],Sprite_Actor[_0x1f5c57(0x605)]['setBattler']=function(_0x1fc5a7){const _0x1d4561=_0x1f5c57;VisuMZ[_0x1d4561(0x6b3)][_0x1d4561(0xb98)][_0x1d4561(0x5a5)](this,_0x1fc5a7),this[_0x1d4561(0x67f)](_0x1fc5a7);},Sprite_Actor[_0x1f5c57(0x605)]['setBattlerBattleCore']=function(_0x89e5ff){const _0x18f7bf=_0x1f5c57;if(!_0x89e5ff)return;if(!this['_mainSprite'])return;this[_0x18f7bf(0xb07)]['anchor']['x']=this[_0x18f7bf(0xb73)][_0x18f7bf(0x481)](),this[_0x18f7bf(0xb07)][_0x18f7bf(0x8de)]['y']=this['_actor'][_0x18f7bf(0xa7c)](),this[_0x18f7bf(0x634)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xa41)]=Sprite_Actor['prototype']['update'],Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x9ee)]=function(){const _0x4ca256=_0x1f5c57;VisuMZ[_0x4ca256(0x6b3)][_0x4ca256(0xa41)]['call'](this);if(this[_0x4ca256(0xb73)]){if('xNitj'===_0x4ca256(0x8f7))return!![];else this[_0x4ca256(0x6c3)](),this['updateStyleOpacity']();}},VisuMZ[_0x1f5c57(0x6b3)]['Sprite_Actor_updateBitmap']=Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x839)],Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x839)]=function(){const _0xb58173=_0x1f5c57;VisuMZ[_0xb58173(0x6b3)]['Sprite_Actor_updateBitmap']['call'](this);if(this[_0xb58173(0xb07)]&&this['_mainSprite'][_0xb58173(0x302)]&&this[_0xb58173(0xc49)]){if(this[_0xb58173(0xb07)][_0xb58173(0x302)]['smooth']!==this[_0xb58173(0xc49)][_0xb58173(0xb44)]()){if(_0xb58173(0xa21)===_0xb58173(0x45c)){this['_tempEquipCheck']=!![];const _0x3b584c=this[_0xb58173(0xa28)]();for(let _0x15fb95=0x0;_0x15fb95<_0x3b584c[_0xb58173(0x9fe)];_0x15fb95++){_0x3b584c[_0x15fb95]===0x1&&this[_0xb58173(0xa8b)]!==_0x15fb95&&(_0x32ebf9[_0x15fb95]=null);}this[_0xb58173(0x5b7)]=_0x2a6558;}else this[_0xb58173(0xb07)][_0xb58173(0x302)][_0xb58173(0xb4f)]=this[_0xb58173(0xc49)]['battlerSmoothImage']();}}},VisuMZ['BattleCore']['Sprite_Actor_updateShadow']=Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0xaf7)],Sprite_Actor['prototype'][_0x1f5c57(0xaf7)]=function(){const _0x6ee1e4=_0x1f5c57;VisuMZ[_0x6ee1e4(0x6b3)][_0x6ee1e4(0xad4)][_0x6ee1e4(0x5a5)](this),this[_0x6ee1e4(0xb85)]();},Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0xb85)]=function(){const _0x155c2f=_0x1f5c57;if(!this[_0x155c2f(0xb07)])return;if(!this[_0x155c2f(0x4ee)])return;this[_0x155c2f(0x634)](),this[_0x155c2f(0xa44)]();},Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x6c3)]=function(){const _0x257f9d=_0x1f5c57;this[_0x257f9d(0xa13)][_0x257f9d(0xa7b)]['x']=0x1/(this[_0x257f9d(0xa7b)]['x']||0.001),this[_0x257f9d(0xa13)][_0x257f9d(0xa7b)]['y']=0x1/(this[_0x257f9d(0xa7b)]['y']||0.001);},Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x36d)]=function(){const _0x25e232=_0x1f5c57;if(!$gameSystem[_0x25e232(0x754)]()&&this[_0x25e232(0x9f1)]===Sprite_Actor){const _0x22e317=Scene_Battle[_0x25e232(0x605)][_0x25e232(0x853)]();if([_0x25e232(0x3b1),_0x25e232(0xc47),_0x25e232(0x6ea),_0x25e232(0x69e)][_0x25e232(0x60e)](_0x22e317)){if('PkFrN'===_0x25e232(0x950))this[_0x25e232(0x337)]=0x0;else{_0x516efa(_0x25e232(0xad8)),_0x50115a[_0x25e232(0xa14)]();return;}}}},Sprite_Actor[_0x1f5c57(0x605)]['refreshMotion']=function(){const _0x531cff=_0x1f5c57,_0x318983=this['_actor'];if(_0x318983){const _0x39cdfa=_0x318983['stateMotionIndex']();if(_0x318983[_0x531cff(0x7e2)]()||_0x318983[_0x531cff(0x509)]())_0x531cff(0x201)!==_0x531cff(0x660)?this[_0x531cff(0xafd)](_0x531cff(0x1fa)):(_0x221a0d[_0x531cff(0xa7b)]['x']=this['mainSpriteScaleX'](),_0x167334['scale']['y']=this['mainSpriteScaleY']());else{if(_0x39cdfa===0x3)this[_0x531cff(0xafd)](_0x531cff(0xbf5));else{if(_0x39cdfa===0x2)this[_0x531cff(0xafd)](_0x531cff(0x3db));else{if(this[_0x531cff(0x7d1)])this[_0x531cff(0xafd)](_0x531cff(0xad6));else{if(_0x318983['isCharging']())this['startMotion'](_0x531cff(0x478));else{if(_0x318983[_0x531cff(0x28c)]())_0x531cff(0x886)===_0x531cff(0x986)?this['callNextMethod']():this[_0x531cff(0xafd)](_0x531cff(0x846));else{if(_0x318983[_0x531cff(0xb99)]()||_0x318983[_0x531cff(0xaad)]())this[_0x531cff(0xafd)](_0x531cff(0xbea));else{if(_0x39cdfa===0x1)_0x531cff(0x8f0)===_0x531cff(0x8f0)?this['startMotion'](_0x531cff(0x9a6)):(_0x2fbbec[_0x531cff(0x686)]=_0x49b78e[_0x531cff(0x686)]||{},_0x9d2f32[_0x531cff(0x686)][_0x531cff(0x214)]=0x0);else{if(_0x318983['isDying']())this[_0x531cff(0xafd)](_0x531cff(0x841));else{if(_0x318983['isUndecided']())this['startMotion'](_0x531cff(0x1fa));else _0x318983[_0x531cff(0xa11)]()?'xBeTw'!==_0x531cff(0xaa0)?_0x5b93f5[_0x531cff(0x605)]['initialize']['call'](this):this[_0x531cff(0xafd)](_0x531cff(0x478)):this[_0x531cff(0xafd)](_0x531cff(0x1fa));}}}}}}}}}}},Sprite_Actor[_0x1f5c57(0x605)]['retreat']=function(){const _0x337685=_0x1f5c57,_0xba1978=0xa,_0x1378b7=0x12c*_0xba1978,_0x4aa77d=0x1e*_0xba1978;this[_0x337685(0x3e9)](_0x1378b7,0x0,_0x4aa77d);},Sprite_Actor['prototype'][_0x1f5c57(0x6be)]=function(){const _0x9ef608=_0x1f5c57;Sprite_Battler[_0x9ef608(0x605)]['onMoveEnd']['call'](this);},Sprite_Actor['prototype']['motionSpeed']=function(){const _0x5e6ef6=_0x1f5c57;return Sprite_Battler[_0x5e6ef6(0x909)];},Sprite_Weapon['prototype'][_0x1f5c57(0x6d4)]=function(){const _0x462a36=_0x1f5c57;return Sprite_Battler[_0x462a36(0x909)];},Sprite_Actor[_0x1f5c57(0x605)]['setupMotion']=function(){},Sprite_Actor[_0x1f5c57(0x605)]['setupWeaponAnimation']=function(){},Sprite_Actor['prototype'][_0x1f5c57(0xba6)]=function(){const _0x29fb82=_0x1f5c57;if(this[_0x29fb82(0x44b)]&&++this['_motionCount']>=this[_0x29fb82(0x58a)]()){if(_0x29fb82(0x3a2)===_0x29fb82(0x5de))_0x236d38=_0x6b39dd;else{if(this[_0x29fb82(0x44b)][_0x29fb82(0xa08)])this[_0x29fb82(0x8a7)]=(this[_0x29fb82(0x8a7)]+0x1)%0x4;else this['_pattern']<0x2?this[_0x29fb82(0x8a7)]++:this[_0x29fb82(0x485)]();this['_motionCount']=0x0;}}},Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x576)]=function(_0x1743b3){const _0x4d4eda=_0x1f5c57;if(_0x1743b3===_0x4d4eda(0x359))this['_checkOn']=!![];if(this[_0x4d4eda(0xc49)]&&this[_0x4d4eda(0xc49)]['isDead']()){this[_0x4d4eda(0x44b)]=Sprite_Actor['MOTIONS'][_0x4d4eda(0xbf5)];return;}const _0x315712=Sprite_Actor[_0x4d4eda(0x45f)][_0x1743b3];this['_motion']=_0x315712,this[_0x4d4eda(0x39c)]=0x0,this[_0x4d4eda(0x8a7)]=0x0;},Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0xb23)]=function(_0x5deab1){const _0x481852=_0x1f5c57;if(this['hasStaticSvBattler']())return;this[_0x481852(0x6bb)](),this['_weaponSprite'][_0x481852(0x687)](_0x5deab1),this['_actor'][_0x481852(0x2d2)]();},Sprite_Actor[_0x1f5c57(0x605)]['adjustWeaponSpriteOffset']=function(){const _0x2da913=_0x1f5c57;let _0x4a685a=-0x10,_0x3676bd=this[_0x2da913(0x53d)]*0.5;const _0x5671e0=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x336d00=this['_battler'][_0x2da913(0x948)]()['map'](_0x24d4b3=>_0x24d4b3&&_0x24d4b3[_0x2da913(0x9bc)][_0x2da913(0x7a1)](_0x5671e0)?Number(RegExp['$1']):0x0),_0x1e04f9=this[_0x2da913(0xc49)][_0x2da913(0x948)]()['map'](_0x4bcd8f=>_0x4bcd8f&&_0x4bcd8f[_0x2da913(0x9bc)][_0x2da913(0x7a1)](_0x5671e0)?Number(RegExp['$2']):0x0);_0x4a685a=_0x336d00[_0x2da913(0x2af)]((_0x1c3564,_0x3bf947)=>_0x1c3564+_0x3bf947,_0x4a685a),_0x3676bd=_0x1e04f9[_0x2da913(0x2af)]((_0x2489b7,_0x56ec5b)=>_0x2489b7+_0x56ec5b,_0x3676bd),this[_0x2da913(0xbdf)]['x']=_0x4a685a,this['_weaponSprite']['y']=_0x3676bd,this['_weaponSprite']['update']();},Sprite_Weapon[_0x1f5c57(0x605)][_0x1f5c57(0x687)]=function(_0x1a8f74){const _0x2e392d=_0x1f5c57;this['_weaponImageId']=_0x1a8f74,this[_0x2e392d(0x46e)]=-0x1,this['_pattern']=0x0,this['loadBitmap'](),this['updateFrame']();},Sprite_Actor[_0x1f5c57(0x605)]['updateTargetPosition']=function(){},Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0x42b)]=function(){const _0x789d9e=_0x1f5c57,_0x5bfdcf=VisuMZ[_0x789d9e(0x6b3)][_0x789d9e(0xbba)]['ActionSequence'],_0x44aa7f=_0x5bfdcf['StepDistanceX'],_0x408038=_0x5bfdcf[_0x789d9e(0xbc7)],_0x213d3e=_0x5bfdcf[_0x789d9e(0x59b)];this[_0x789d9e(0x3e9)](-_0x44aa7f,-_0x408038,_0x213d3e);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x5f8)]=Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0xa5c)],Sprite_Actor[_0x1f5c57(0x605)][_0x1f5c57(0xa5c)]=function(){const _0x458ea1=_0x1f5c57;this[_0x458ea1(0x381)]()?this[_0x458ea1(0xbe7)]():(this[_0x458ea1(0x5a7)](),VisuMZ[_0x458ea1(0x6b3)][_0x458ea1(0x5f8)][_0x458ea1(0x5a5)](this));},Sprite_Actor[_0x1f5c57(0x605)]['applyFreezeMotionFrames']=function(){const _0x488e77=_0x1f5c57;if(this[_0x488e77(0xc49)]&&this['_battler'][_0x488e77(0x5b0)]){if(_0x488e77(0x46b)!==_0x488e77(0x46b))this['_linkedSprite']=_0x3877a3;else{const _0x1042df=this['_battler']['_freezeMotionData'];this[_0x488e77(0x44b)]=Sprite_Actor[_0x488e77(0x45f)][_0x1042df['motionType']],this['_pattern']=_0x1042df['pattern'];const _0x16d4e4=this[_0x488e77(0xbdf)];_0x16d4e4[_0x488e77(0x893)](_0x1042df['weaponImageId'],_0x1042df['pattern']),this[_0x488e77(0x6bb)]();}}},Sprite_Weapon[_0x1f5c57(0x605)]['freezeFrame']=function(_0x34a232,_0x2fb950){const _0x184e4c=_0x1f5c57;this['_weaponImageId']=_0x34a232,this[_0x184e4c(0x46e)]=-Infinity,this[_0x184e4c(0x8a7)]=_0x2fb950,this[_0x184e4c(0xb8b)](),this[_0x184e4c(0xa5c)]();},Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x6c5)]=function(){const _0x54928e=_0x1f5c57;Sprite_Battler[_0x54928e(0x605)][_0x54928e(0x6c5)]['call'](this),this[_0x54928e(0x394)]=null,this[_0x54928e(0x32f)]=![],this[_0x54928e(0x823)]='',this[_0x54928e(0x591)]=0x0,this[_0x54928e(0x765)]=null,this[_0x54928e(0x991)]=0x0,this[_0x54928e(0x564)]=0x0,this['createMainSprite'](),this['createStateIconSprite']();},VisuMZ['BattleCore'][_0x1f5c57(0x267)]=Sprite_Enemy[_0x1f5c57(0x605)]['update'],Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x9ee)]=function(){const _0x1bb845=_0x1f5c57;VisuMZ[_0x1bb845(0x6b3)][_0x1bb845(0x267)][_0x1bb845(0x5a5)](this),this['updateShadowVisibility']();},Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x2d5)]=function(){const _0x585a0d=_0x1f5c57;this[_0x585a0d(0xb07)]=new Sprite(),this[_0x585a0d(0xb07)][_0x585a0d(0x8de)]['x']=0.5,this[_0x585a0d(0xb07)][_0x585a0d(0x8de)]['y']=0x1,this[_0x585a0d(0x45b)](this[_0x585a0d(0xb07)]),this[_0x585a0d(0xaec)]();},Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x869)]=function(){const _0x53d0f2=_0x1f5c57;return this[_0x53d0f2(0x73f)]||this['_mainSprite']||this;},Sprite_Enemy['prototype'][_0x1f5c57(0xb8b)]=function(_0x5e9257){const _0x34ecd6=_0x1f5c57;this[_0x34ecd6(0x302)]=new Bitmap(0x1,0x1);if(this[_0x34ecd6(0x4d7)]()){const _0x1d9670=this[_0x34ecd6(0x394)]['svBattlerData']();this['bitmap']=new Bitmap(_0x1d9670['width'],_0x1d9670[_0x34ecd6(0x53d)]),this[_0x34ecd6(0xb07)]['bitmap']=new Bitmap(0x1,0x1);}else $gameSystem[_0x34ecd6(0x754)]()?(this[_0x34ecd6(0xb07)]['bitmap']=ImageManager[_0x34ecd6(0x5a4)](_0x5e9257),this[_0x34ecd6(0xb07)]['bitmap']['addLoadListener'](this['createEmptyBitmap']['bind'](this))):(this['_mainSprite'][_0x34ecd6(0x302)]=ImageManager[_0x34ecd6(0x764)](_0x5e9257),this['_mainSprite'][_0x34ecd6(0x302)][_0x34ecd6(0xc30)](this[_0x34ecd6(0x430)][_0x34ecd6(0xc00)](this)));},Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x430)]=function(){const _0x561da1=_0x1f5c57,_0x54c383=this[_0x561da1(0xb07)]['bitmap'];_0x54c383&&(this[_0x561da1(0x302)]=new Bitmap(_0x54c383[_0x561da1(0xac5)],_0x54c383[_0x561da1(0x53d)]));},VisuMZ['BattleCore']['Sprite_Enemy_setHue']=Sprite_Enemy['prototype'][_0x1f5c57(0xc70)],Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0xc70)]=function(_0x2b3d22){const _0x2f6bbf=_0x1f5c57;this['_mainSprite']&&this[_0x2f6bbf(0xb07)][_0x2f6bbf(0xc70)](_0x2b3d22);},VisuMZ['BattleCore'][_0x1f5c57(0x565)]=Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x7d8)],Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x7d8)]=function(){const _0x10043f=_0x1f5c57;if(this[_0x10043f(0x1f9)]()){if(_0x10043f(0x7eb)!==_0x10043f(0x7eb)){if(!_0x4e3ea1[_0x10043f(0x6b3)][_0x10043f(0xbba)][_0x10043f(0x8fa)][_0x10043f(0xa92)])return;_0x5e7a86[_0x10043f(0x6b3)][_0x10043f(0x502)][_0x10043f(0x5a5)](this,_0x510df4);}else VisuMZ[_0x10043f(0x6b3)][_0x10043f(0x565)][_0x10043f(0x5a5)](this);}else{if(_0x10043f(0xa9d)!==_0x10043f(0x83b)){this[_0x10043f(0x32f)]=!this[_0x10043f(0x394)][_0x10043f(0x55b)]();if(!this['_appeared']){if(_0x10043f(0x94c)!==_0x10043f(0x94c)){const _0x3f09ea=_0x3bafbd[_0x10043f(0x5d0)]?_0x12e485['SkillsStatesCore']['Settings'][_0x10043f(0x1da)]:_0x44d8b4[_0x10043f(0x6b3)][_0x10043f(0xbba)][_0x10043f(0x368)],_0x15b721=_0x2277e2[_0x10043f(0x5fc)][_0x10043f(0x60e)](_0x10692f),_0xcd4092=_0x15b721?_0x3f09ea[_0x10043f(0x4fd)]:_0x3f09ea[_0x10043f(0x3b4)];_0x5a61e8=_0x10043f(0x573)[_0x10043f(0x98c)](_0xcd4092,_0x34b791);}else this['opacity']=0x0;}}else return!![];}},VisuMZ[_0x1f5c57(0x6b3)]['Sprite_Enemy_updateCollapse']=Sprite_Enemy['prototype'][_0x1f5c57(0x6b9)],Sprite_Enemy[_0x1f5c57(0x605)]['updateCollapse']=function(){const _0x5b7d82=_0x1f5c57;if(this[_0x5b7d82(0x1f9)]())VisuMZ[_0x5b7d82(0x6b3)][_0x5b7d82(0x8ab)]['call'](this);},Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0xa5c)]=function(){const _0x35c6a2=_0x1f5c57;Sprite_Battler[_0x35c6a2(0x605)][_0x35c6a2(0xa5c)]['call'](this);const _0x187983=this[_0x35c6a2(0x869)]()||this;if(!_0x187983)return;!_0x187983['bitmap']&&(_0x187983[_0x35c6a2(0x302)]=new Bitmap(this[_0x35c6a2(0xac5)],this[_0x35c6a2(0x53d)]));if(this[_0x35c6a2(0x765)]===_0x35c6a2(0x221)){if(_0x35c6a2(0x69a)==='ZerOO')this[_0x35c6a2(0xb07)][_0x35c6a2(0x2a1)](0x0,0x0,this[_0x35c6a2(0xb07)]['width'],this['_effectDuration']);else return _0x404738[_0x35c6a2(0xa45)]()[_0x35c6a2(0x23a)]();}else _0x187983[_0x35c6a2(0x2a1)](0x0,0x0,_0x187983[_0x35c6a2(0x302)][_0x35c6a2(0xac5)],this[_0x35c6a2(0x302)][_0x35c6a2(0x53d)]);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x900)]=Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x3cf)],Sprite_Enemy[_0x1f5c57(0x605)]['updateBossCollapse']=function(){const _0x1a1c03=_0x1f5c57;if(this[_0x1a1c03(0x1f9)]())VisuMZ[_0x1a1c03(0x6b3)][_0x1a1c03(0x900)]['call'](this);},Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x7cc)]=function(){const _0x5a1bdf=_0x1f5c57;return Sprite_Battler['prototype'][_0x5a1bdf(0x7cc)]['call'](this);},VisuMZ['BattleCore'][_0x1f5c57(0x43d)]=Sprite_Enemy['prototype'][_0x1f5c57(0x6c3)],Sprite_Enemy[_0x1f5c57(0x605)]['updateStateSprite']=function(){const _0x3b1c7a=_0x1f5c57;VisuMZ[_0x3b1c7a(0x6b3)][_0x3b1c7a(0x43d)][_0x3b1c7a(0x5a5)](this),this[_0x3b1c7a(0x790)]();},Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x790)]=function(){const _0x10c551=_0x1f5c57,_0x181ecc=VisuMZ['BattleCore'][_0x10c551(0xbba)][_0x10c551(0xa0b)];if(_0x181ecc[_0x10c551(0xc50)]&&!_0x181ecc[_0x10c551(0x9f9)]){if(_0x10c551(0x53b)===_0x10c551(0xb3e)){if(this['constructor']===_0xcb6b58)return;this['updateGrow'](),this[_0x10c551(0xc3c)]();}else{this[_0x10c551(0x462)]['opacity']=0x0;return;}}this['_stateIconSprite']['x']=0x0,this[_0x10c551(0x462)]['x']+=this[_0x10c551(0xc49)][_0x10c551(0x720)](),this['_stateIconSprite']['y']=-this[_0x10c551(0x302)]['height']-this[_0x10c551(0x462)][_0x10c551(0x53d)]-0x4,this[_0x10c551(0x462)]['y']+=this[_0x10c551(0xc49)]['battleUIOffsetY'](),this['_stateIconSprite']['scale']['x']=0x1/(this[_0x10c551(0xa7b)]['x']||0.001),this['_stateIconSprite']['scale']['y']=0x1/(this[_0x10c551(0xa7b)]['y']||0.001);if(this[_0x10c551(0x4d7)]()){if('doxPb'!=='WlAOo')this[_0x10c551(0xa8e)][_0x10c551(0xa13)][_0x10c551(0xa7b)]['x']=-0x1/(this[_0x10c551(0xa7b)]['x']||0.001),this[_0x10c551(0xa8e)][_0x10c551(0xa13)][_0x10c551(0xa7b)]['y']=0x1/(this[_0x10c551(0xa7b)]['y']||0.001);else{const _0x2b87be=_0x541521[_0x10c551(0x927)]('['+_0x35f80e['$1'][_0x10c551(0x7a1)](/\d+/g)+']');for(const _0x11a3c1 of _0x2b87be){if(!_0x13ea5f['value'](_0x11a3c1))return!![];}return![];}}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x60d)]=Sprite_Enemy[_0x1f5c57(0x605)]['setBattler'],Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x582)]=function(_0x18d058){const _0x5f3d51=_0x1f5c57;VisuMZ[_0x5f3d51(0x6b3)]['Sprite_Enemy_setBattler'][_0x5f3d51(0x5a5)](this,_0x18d058),this[_0x5f3d51(0x4bb)](_0x18d058);},Sprite_Enemy['prototype'][_0x1f5c57(0x4bb)]=function(_0x513161){const _0x4e40a7=_0x1f5c57;!this[_0x4e40a7(0xa8e)]&&(this[_0x4e40a7(0xa8e)]=new Sprite_SvEnemy(_0x513161),this[_0x4e40a7(0xaec)]()),this[_0x4e40a7(0xa8e)][_0x4e40a7(0x582)](_0x513161);},Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x4d7)]=function(){const _0x5910e8=_0x1f5c57;return this[_0x5910e8(0x394)]&&this[_0x5910e8(0x394)][_0x5910e8(0x4d7)]();},Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x1f9)]=function(){const _0x45c0da=_0x1f5c57;if(this['hasSvBattler']())return this[_0x45c0da(0x394)][_0x45c0da(0x1f9)]();else{if('tivng'!==_0x45c0da(0x2d0))return!![];else _0x4ffa7d[_0x45c0da(0x34f)]=!![],this[_0x45c0da(0xb46)](_0x50b6de);}},Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x485)]=function(){const _0x3bad59=_0x1f5c57;this[_0x3bad59(0x4d7)]()&&this[_0x3bad59(0xa8e)]['refreshMotion']();},Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0x576)]=function(_0x2bedd9){const _0x528725=_0x1f5c57;if(this[_0x528725(0x4d7)]())this['_svBattlerSprite'][_0x528725(0x576)](_0x2bedd9);},Sprite_Enemy[_0x1f5c57(0x605)][_0x1f5c57(0xb23)]=function(_0x522d12){const _0x49a95a=_0x1f5c57;if(this['hasSvBattler']())this[_0x49a95a(0xa8e)][_0x49a95a(0xb23)](_0x522d12);},Sprite_Enemy['prototype'][_0x1f5c57(0x42b)]=function(){const _0x1482f5=_0x1f5c57,_0x4b3ba5=VisuMZ[_0x1482f5(0x6b3)][_0x1482f5(0xbba)][_0x1482f5(0xbaa)],_0x128360=_0x4b3ba5[_0x1482f5(0xbd3)],_0x4ebbff=_0x4b3ba5[_0x1482f5(0xbc7)],_0x4426cc=_0x4b3ba5['StepDuration'];this['startMove'](_0x128360,_0x4ebbff,_0x4426cc);};function Sprite_SvEnemy(){this['initialize'](...arguments);}Sprite_SvEnemy[_0x1f5c57(0x605)]=Object[_0x1f5c57(0x906)](Sprite_Actor[_0x1f5c57(0x605)]),Sprite_SvEnemy['prototype']['constructor']=Sprite_SvEnemy,Sprite_SvEnemy[_0x1f5c57(0x605)][_0x1f5c57(0x38c)]=function(_0x4d321f){const _0x2d9352=_0x1f5c57;Sprite_Actor['prototype']['initialize'][_0x2d9352(0x5a5)](this,_0x4d321f),this['scale']['x']=-0x1,this[_0x2d9352(0xa13)][_0x2d9352(0xa7b)]['x']=-0x1;},Sprite_SvEnemy[_0x1f5c57(0x605)][_0x1f5c57(0x6de)]=function(){},Sprite_SvEnemy[_0x1f5c57(0x605)][_0x1f5c57(0xa5e)]=function(){},Sprite_SvEnemy[_0x1f5c57(0x605)][_0x1f5c57(0x2f3)]=function(_0x48caa4){},Sprite_SvEnemy['prototype'][_0x1f5c57(0xaf7)]=function(){},Sprite_SvEnemy[_0x1f5c57(0x605)][_0x1f5c57(0xa44)]=function(){},Sprite_SvEnemy[_0x1f5c57(0x605)][_0x1f5c57(0x6c3)]=function(){const _0x239c13=_0x1f5c57;this[_0x239c13(0xa13)]['visible']=![];},Sprite_SvEnemy[_0x1f5c57(0x605)][_0x1f5c57(0x839)]=function(){const _0x3fa7ab=_0x1f5c57;Sprite_Battler['prototype'][_0x3fa7ab(0x839)][_0x3fa7ab(0x5a5)](this);const _0x48f21e=this['_actor'][_0x3fa7ab(0x52e)]();if(this[_0x3fa7ab(0x823)]!==_0x48f21e){if(_0x3fa7ab(0x9f0)!==_0x3fa7ab(0x86f))this['_battlerName']=_0x48f21e,this[_0x3fa7ab(0xb07)][_0x3fa7ab(0x302)]=ImageManager['loadSvActor'](_0x48f21e);else{if(!_0x2695ba[_0x3fa7ab(0x2ba)]())return;if(!_0x4820fa[_0x3fa7ab(0x350)])return;_0x42c19f[_0x3fa7ab(0xa1c)](_0x29bcb4,_0x1cae16);const _0x5d91ef=_0x375bb4[_0x3fa7ab(0x78b)](),_0x18c3c3=_0x46f8a2['WaitForProjectile'];if(!_0x5d91ef)return;const _0x13492e=_0x52ee19[_0x3fa7ab(0x4d6)];if(!_0x13492e)return;_0x13492e['createActionSequenceProjectile'](_0x255fbc);if(_0x18c3c3)_0x5d91ef[_0x3fa7ab(0x924)](_0x3fa7ab(0xa26));}}this[_0x3fa7ab(0xb07)]&&this['_mainSprite']['bitmap']&&this[_0x3fa7ab(0xc49)]&&(_0x3fa7ab(0x6e0)!=='kQrsr'?this[_0x3fa7ab(0xb07)][_0x3fa7ab(0x302)][_0x3fa7ab(0xb4f)]!==this[_0x3fa7ab(0xc49)][_0x3fa7ab(0xb44)]()&&('jjATi'===_0x3fa7ab(0xa37)?this[_0x3fa7ab(0xb07)][_0x3fa7ab(0x302)][_0x3fa7ab(0xb4f)]=this[_0x3fa7ab(0xc49)][_0x3fa7ab(0xb44)]():this['_stateSprite']['visible']=![]):(_0x4dc29f['BattleCore'][_0x3fa7ab(0x468)][_0x3fa7ab(0x5a5)](this),this[_0x3fa7ab(0x94a)]()));},Sprite_SvEnemy[_0x1f5c57(0x605)]['retreat']=function(){},Sprite_SvEnemy[_0x1f5c57(0x605)]['startMove']=function(_0xb99604,_0x4218b3,_0x333b22){const _0xd1817b=_0x1f5c57;if(this[_0xd1817b(0x4e5)])this[_0xd1817b(0x4e5)]['startMove'](_0xb99604,_0x4218b3,_0x333b22);},Sprite_SvEnemy['prototype'][_0x1f5c57(0x485)]=function(){const _0x56079c=_0x1f5c57,_0x475746=this[_0x56079c(0xb73)];if(_0x475746){const _0x3beb3c=_0x475746[_0x56079c(0x307)]();if(_0x475746[_0x56079c(0x7e2)]()||_0x475746[_0x56079c(0x509)]()){if('CBsIg'===_0x56079c(0x24e))this[_0x56079c(0xafd)](_0x56079c(0x1fa));else{let _0x2f5bd9=[];return this[_0x56079c(0x7ff)]()?_0x2f5bd9=this['makeTargetsBattleCore']():_0x2f5bd9=_0x58983d[_0x56079c(0x6b3)]['Game_Action_makeTargets'][_0x56079c(0x5a5)](this),_0x2f5bd9=this[_0x56079c(0xb0b)](_0x2f5bd9),_0x2f5bd9;}}else{if(_0x3beb3c===0x3)this[_0x56079c(0xafd)]('dead');else{if(_0x3beb3c===0x2)this[_0x56079c(0xafd)](_0x56079c(0x3db));else{if(_0x475746['isChanting']()){if(_0x56079c(0x6dc)!==_0x56079c(0x5f6))this[_0x56079c(0xafd)](_0x56079c(0x846));else{const _0x583b29=_0xb17470[_0x56079c(0x98c)](_0x3c5873[_0x56079c(0x310)](),_0x12bd3a[_0x56079c(0xa96)](_0x4c64b8));this[_0x56079c(0x5af)](_0x56079c(0xa73)),this[_0x56079c(0x5af)](_0x56079c(0x67c)),this[_0x56079c(0x5af)](_0x56079c(0x5c6),_0x583b29),this[_0x56079c(0x5af)](_0x56079c(0x478));}}else{if(_0x475746[_0x56079c(0xb99)]()||_0x475746[_0x56079c(0xaad)]())'edjku'===_0x56079c(0x852)?this['processBattleCoreJS'](_0x56079c(0x654)):this[_0x56079c(0xafd)](_0x56079c(0xbea));else{if(_0x3beb3c===0x1)this[_0x56079c(0xafd)](_0x56079c(0x9a6));else{if(_0x475746[_0x56079c(0x95c)]())'AlMrh'===_0x56079c(0x6dd)?this[_0x56079c(0xafd)](_0x56079c(0x841)):delete _0x3d5c83[_0x56079c(0xaf1)][_0x56079c(0x6e8)];else _0x475746[_0x56079c(0x54e)]()?_0x56079c(0x837)===_0x56079c(0xc19)?this[_0x56079c(0x6f9)][_0x56079c(0x45b)](this[_0x56079c(0xb1c)]):this[_0x56079c(0xafd)](_0x56079c(0x1fa)):this['startMotion'](_0x475746['svBattlerData']()['motionIdle']||_0x56079c(0x1fa));}}}}}}}},Sprite_SvEnemy['prototype'][_0x1f5c57(0xb36)]=function(){const _0x32999d=_0x1f5c57;if(this[_0x32999d(0x4e5)]){if(_0x32999d(0x51a)!==_0x32999d(0x8c6))return this[_0x32999d(0x4e5)]['_offsetX']===0x0&&this[_0x32999d(0x4e5)][_0x32999d(0x85a)]===0x0;else _0x2744d6[_0x32999d(0x6b3)][_0x32999d(0x79f)][_0x32999d(0x5a5)](this,_0x5c7610,_0x3153d1),this[_0x32999d(0x68e)]();}else return!![];},Sprite_SvEnemy[_0x1f5c57(0x605)][_0x1f5c57(0x683)]=function(){},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x99c)]=Sprite_Animation[_0x1f5c57(0x605)][_0x1f5c57(0x633)],Sprite_Animation[_0x1f5c57(0x605)]['targetSpritePosition']=function(_0x20e431){const _0x2764ff=_0x1f5c57;if(_0x20e431[_0x2764ff(0x73f)]){if(_0x2764ff(0xa23)==='rthJQ'){let _0xb31e94=_0x5dd0de(_0x54ed53['$1']);while(_0xb31e94--){_0x5c042b[_0x2764ff(0x5af)](this[_0x2764ff(0xb10)]()[_0x2764ff(0x259)]());}return this[_0x2764ff(0x97f)](_0x2aabb7);}else return this[_0x2764ff(0x9de)](_0x20e431);}else{if(_0x2764ff(0x48e)!==_0x2764ff(0x1d8))return VisuMZ[_0x2764ff(0x6b3)][_0x2764ff(0x99c)][_0x2764ff(0x5a5)](this,_0x20e431);else{const _0x1c59cf=new _0xf8ba6d(0x0,0x0,_0x11fc86['width'],_0x3104bb['height']);this[_0x2764ff(0x618)]=new _0x1c9635(_0x1c59cf),this[_0x2764ff(0x618)]['opacity']=0x0,this[_0x2764ff(0x45b)](this[_0x2764ff(0x618)]),this[_0x2764ff(0xc3f)]();}}},Sprite_Animation[_0x1f5c57(0x605)][_0x1f5c57(0x9de)]=function(_0x543f77){const _0x3d68e8=_0x1f5c57;let _0x24681b=_0x543f77['x'],_0x271bb5=_0x543f77['y'],_0x148996=_0x543f77[_0x3d68e8(0x53d)],_0x287790=_0x543f77[_0x3d68e8(0x73f)][_0x3d68e8(0xa7b)]['y'];_0x543f77['x']=_0x543f77[_0x3d68e8(0x1ed)]+_0x543f77[_0x3d68e8(0x8ad)](),_0x543f77['y']=_0x543f77[_0x3d68e8(0x8b7)]+_0x543f77[_0x3d68e8(0xb17)](),_0x543f77[_0x3d68e8(0x53d)]*=_0x287790;let _0x337ee4=VisuMZ[_0x3d68e8(0x6b3)][_0x3d68e8(0x99c)][_0x3d68e8(0x5a5)](this,_0x543f77);return _0x543f77['x']=_0x24681b,_0x543f77['y']=_0x271bb5,_0x543f77[_0x3d68e8(0x53d)]=_0x148996,_0x337ee4;},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x629)]=Sprite_AnimationMV[_0x1f5c57(0x605)][_0x1f5c57(0xc5f)],Sprite_AnimationMV[_0x1f5c57(0x605)][_0x1f5c57(0xc5f)]=function(){const _0x3335a2=_0x1f5c57;VisuMZ[_0x3335a2(0x6b3)]['Sprite_AnimationMV_updatePosition'][_0x3335a2(0x5a5)](this);if(this['_animation'][_0x3335a2(0x781)]===0x3){if(_0x3335a2(0xc13)==='TdTNM'){if(this['x']===0x0)this['x']=Math[_0x3335a2(0x93c)](Graphics[_0x3335a2(0xac5)]/0x2);if(this['y']===0x0)this['y']=Math[_0x3335a2(0x93c)](Graphics[_0x3335a2(0x53d)]/0x2);}else _0x119de6[_0x2a13ad]=0x1,_0x6ce5a2++;}},Sprite_Damage['prototype'][_0x1f5c57(0x449)]=function(_0x4fecfa){const _0x315695=_0x1f5c57,_0x17fe9f=_0x4fecfa[_0x315695(0x72c)]()||_0x4fecfa['result']();if(_0x17fe9f[_0x315695(0x431)]||_0x17fe9f[_0x315695(0x4a1)])_0x315695(0x63f)!==_0x315695(0xb70)?(this[_0x315695(0xbb9)]=0x0,this[_0x315695(0x5f0)]()):_0x43c5a3[_0x315695(0x3d6)](_0x33fc92,_0x22d8f6);else{if(_0x17fe9f[_0x315695(0xa0c)]){if(_0x315695(0x5f5)!==_0x315695(0x5f5))return _0x1a39bf[_0x315695(0x567)]&&_0x5d4f84[_0x315695(0x57e)][_0x315695(0x60e)]('['+_0x59ddc8+']');else this[_0x315695(0xbb9)]=_0x17fe9f[_0x315695(0xc11)]>=0x0?0x0:0x1,this[_0x315695(0x81f)](_0x17fe9f[_0x315695(0xc11)]);}else{if(_0x4fecfa['isAlive']()&&_0x17fe9f[_0x315695(0x593)]!==0x0){if(_0x315695(0x6fc)!=='HiBLG')this[_0x315695(0xbb9)]=_0x17fe9f[_0x315695(0x593)]>=0x0?0x2:0x3,this['createDigits'](_0x17fe9f[_0x315695(0x593)]);else{if(this[_0x315695(0x8bc)]!==_0x5311e9)return this[_0x315695(0x8bc)];return this[_0x315695(0xbac)](),this['_svBattlerData'];}}}}_0x17fe9f['critical']&&(_0x315695(0x454)!==_0x315695(0x454)?_0x352f29[_0x457e09]['call'](this,_0x154a3c):this[_0x315695(0xb93)]());},Sprite_Damage[_0x1f5c57(0x605)][_0x1f5c57(0x687)]=function(_0x187ee1){},Sprite_Damage['prototype'][_0x1f5c57(0x81f)]=function(_0x34916c){const _0x3ab644=_0x1f5c57;let _0x34362a=this['createString'](_0x34916c);const _0x54ee76=this[_0x3ab644(0x8b9)](),_0x280118=Math[_0x3ab644(0x617)](_0x54ee76*0.75);for(let _0x3f2898=0x0;_0x3f2898<_0x34362a[_0x3ab644(0x9fe)];_0x3f2898++){if('KzPWo'===_0x3ab644(0xc53)){const _0x139cef=this[_0x3ab644(0x919)](_0x280118,_0x54ee76);_0x139cef[_0x3ab644(0x302)]['drawText'](_0x34362a[_0x3f2898],0x0,0x0,_0x280118,_0x54ee76,_0x3ab644(0x2d8)),_0x139cef['x']=(_0x3f2898-(_0x34362a['length']-0x1)/0x2)*_0x280118,_0x139cef['dy']=-_0x3f2898;}else _0x8827c3['push'](_0x3ab644(0xc21),_0x5d30ad);}},Sprite_Damage[_0x1f5c57(0x605)][_0x1f5c57(0xc86)]=function(_0x171afe){const _0x2b52c1=_0x1f5c57;let _0x5af9b5=Math['abs'](_0x171afe)[_0x2b52c1(0xae7)]();this[_0x2b52c1(0x58b)]()&&(_0x2b52c1(0xc06)==='BAUKq'?_0x5af9b5=VisuMZ[_0x2b52c1(0xc88)](_0x5af9b5):_0x321cec[_0x2b52c1(0xc1f)](_0xd77970));const _0x3dbf52=VisuMZ['BattleCore'][_0x2b52c1(0xbba)]['Damage'];let _0x164d24='',_0x2a79eb='';switch(this[_0x2b52c1(0xbb9)]){case 0x0:_0x164d24=_0x3dbf52[_0x2b52c1(0xbb5)]||_0x2b52c1(0xabc),_0x2a79eb=TextManager['hp'];if(_0x171afe===0x0)_0x164d24='%1';break;case 0x1:_0x164d24=_0x3dbf52[_0x2b52c1(0x6e7)]||_0x2b52c1(0x262),_0x2a79eb=TextManager['hp'];break;case 0x2:_0x164d24=_0x3dbf52[_0x2b52c1(0x7d5)]||'-%1\x20MP',_0x2a79eb=TextManager['mp'];break;case 0x3:_0x164d24=_0x3dbf52[_0x2b52c1(0x6e1)]||_0x2b52c1(0x979),_0x2a79eb=TextManager['mp'];break;}return _0x164d24[_0x2b52c1(0x98c)](_0x5af9b5,_0x2a79eb)[_0x2b52c1(0xc8b)]();},Sprite_Damage[_0x1f5c57(0x605)][_0x1f5c57(0x58b)]=function(){const _0x115fa6=_0x1f5c57;return Imported[_0x115fa6(0x8bb)]?VisuMZ[_0x115fa6(0xbef)][_0x115fa6(0xbba)][_0x115fa6(0x8d8)][_0x115fa6(0x32d)]:![];},Sprite_Damage[_0x1f5c57(0x605)]['setupCriticalEffect']=function(){const _0xfccd3b=_0x1f5c57,_0x4c00de=VisuMZ['BattleCore'][_0xfccd3b(0xbba)][_0xfccd3b(0x941)];this[_0xfccd3b(0x83d)]=_0x4c00de[_0xfccd3b(0x7b8)][_0xfccd3b(0x7b5)](0x0),this[_0xfccd3b(0xb7c)]=_0x4c00de[_0xfccd3b(0xb7f)];},Sprite_Damage['prototype'][_0x1f5c57(0x7c0)]=function(_0xef7cca,_0x5d377a){const _0x1b3e52=_0x1f5c57;this['_flashColor']=_0x5d377a[_0x1b3e52(0x31d)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x1b3e52(0x215)](this[_0x1b3e52(0x83d)]),this[_0x1b3e52(0xb7c)]=_0x5d377a[_0x1b3e52(0x403)]||0x0;const _0x248944=this[_0x1b3e52(0x8b9)](),_0x225b96=Math[_0x1b3e52(0x617)](_0x248944*0x1e),_0x171255=this[_0x1b3e52(0x919)](_0x225b96,_0x248944);_0x171255[_0x1b3e52(0x302)][_0x1b3e52(0xad9)]=ColorManager[_0x1b3e52(0x80c)](_0x5d377a[_0x1b3e52(0xad9)]),_0x171255[_0x1b3e52(0x302)][_0x1b3e52(0x6db)](_0xef7cca,0x0,0x0,_0x225b96,_0x248944,_0x1b3e52(0x2d8)),_0x171255['dy']=0x0;},Sprite_Damage['prototype'][_0x1f5c57(0x549)]=function(_0x348c36,_0xdd7ab2,_0x4c4c96){const _0x55ddc1=_0x1f5c57,_0x4fe9ce=Math[_0x55ddc1(0x795)](this['fontSize'](),ImageManager[_0x55ddc1(0xa19)]),_0x281ce9=Math[_0x55ddc1(0x617)](_0x4fe9ce*0x1e),_0x2825ef=this[_0x55ddc1(0x919)](_0x281ce9,_0x4fe9ce),_0x498631=ImageManager[_0x55ddc1(0x5f2)]/0x2,_0x54c4ad=_0x2825ef['bitmap'][_0x55ddc1(0x9e6)](_0xdd7ab2+'\x20');_0x2825ef[_0x55ddc1(0x302)][_0x55ddc1(0xad9)]=ColorManager[_0x55ddc1(0x80c)](_0x4c4c96[_0x55ddc1(0xad9)]),_0x2825ef[_0x55ddc1(0x302)][_0x55ddc1(0x6db)](_0xdd7ab2,_0x498631,0x0,_0x281ce9-_0x498631,_0x4fe9ce,_0x55ddc1(0x2d8));const _0xc7fbdf=Math[_0x55ddc1(0x93c)]((_0x4fe9ce-ImageManager['iconHeight'])/0x2),_0x3a4388=_0x281ce9/0x2-ImageManager[_0x55ddc1(0x5f2)]-_0x54c4ad/0x2+_0x498631/0x2,_0x57e8ad=ImageManager[_0x55ddc1(0x89c)](_0x55ddc1(0x6d8)),_0x44a2de=ImageManager['iconWidth'],_0x52a5ea=ImageManager[_0x55ddc1(0xa19)],_0x28d492=_0x348c36%0x10*_0x44a2de,_0x3094ab=Math[_0x55ddc1(0x617)](_0x348c36/0x10)*_0x52a5ea;_0x2825ef[_0x55ddc1(0x302)][_0x55ddc1(0x376)](_0x57e8ad,_0x28d492,_0x3094ab,_0x44a2de,_0x52a5ea,_0x3a4388,_0xc7fbdf),this['_flashColor']=_0x4c4c96['flashColor']||[0x0,0x0,0x0,0x0],this[_0x55ddc1(0x83d)]=JsonEx[_0x55ddc1(0x215)](this[_0x55ddc1(0x83d)]),this[_0x55ddc1(0xb7c)]=_0x4c4c96['flashDuration']||0x0,_0x2825ef['dy']=0x0;},VisuMZ[_0x1f5c57(0x6b3)]['Sprite_Damage_createChildSprite']=Sprite_Damage[_0x1f5c57(0x605)]['createChildSprite'],Sprite_Damage[_0x1f5c57(0x605)]['createChildSprite']=function(_0x5221c6,_0x48c2df){const _0x1dc8ed=_0x1f5c57;return _0x48c2df=Math[_0x1dc8ed(0x93c)](_0x48c2df*1.2),VisuMZ[_0x1dc8ed(0x6b3)][_0x1dc8ed(0xa62)]['call'](this,_0x5221c6,_0x48c2df);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x2e6)]=Sprite_StateIcon['prototype'][_0x1f5c57(0xa5c)],Sprite_StateIcon[_0x1f5c57(0x605)][_0x1f5c57(0xa5c)]=function(){const _0x5935da=_0x1f5c57;VisuMZ[_0x5935da(0x6b3)][_0x5935da(0x2e6)][_0x5935da(0x5a5)](this),this[_0x5935da(0x337)]=this[_0x5935da(0x441)]>0x0?0xff:0x0;},VisuMZ[_0x1f5c57(0x6b3)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon[_0x1f5c57(0x605)][_0x1f5c57(0xb8b)],Sprite_Weapon['prototype'][_0x1f5c57(0xb8b)]=function(){const _0x519c1a=_0x1f5c57;VisuMZ[_0x519c1a(0x6b3)]['Sprite_Weapon_loadBitmap'][_0x519c1a(0x5a5)](this),this[_0x519c1a(0x302)]&&('aXEep'===_0x519c1a(0x4fb)?this[_0x519c1a(0x302)][_0x519c1a(0xb4f)]=VisuMZ['BattleCore'][_0x519c1a(0xbba)][_0x519c1a(0x1df)][_0x519c1a(0xa3e)]:(_0x2f1840['BattleCore'][_0x519c1a(0x96a)][_0x519c1a(0x5a5)](this),this[_0x519c1a(0xc99)]()));};function Sprite_HpGauge(){const _0x17e88c=_0x1f5c57;this[_0x17e88c(0x38c)](...arguments);}Sprite_HpGauge[_0x1f5c57(0x605)]=Object[_0x1f5c57(0x906)](Sprite_Gauge[_0x1f5c57(0x605)]),Sprite_HpGauge['prototype']['constructor']=Sprite_HpGauge,Sprite_HpGauge['prototype'][_0x1f5c57(0x38c)]=function(){const _0x201a08=_0x1f5c57;Sprite_Gauge[_0x201a08(0x605)]['initialize']['call'](this);},Sprite_HpGauge['prototype'][_0x1f5c57(0x5b4)]=function(){return 0x0;},Sprite_HpGauge[_0x1f5c57(0x605)][_0x1f5c57(0x6eb)]=function(){const _0x14f164=_0x1f5c57;this['bitmap'][_0x14f164(0x8e1)]();const _0x47c554=this['currentValue']();!isNaN(_0x47c554)&&this[_0x14f164(0x77d)]();};function Sprite_EnemyName(){const _0x1022bc=_0x1f5c57;this[_0x1022bc(0x38c)](...arguments);}Sprite_EnemyName[_0x1f5c57(0x605)]=Object[_0x1f5c57(0x906)](Sprite_Name['prototype']),Sprite_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0x9f1)]=Sprite_EnemyName,Sprite_EnemyName[_0x1f5c57(0x605)]['initialize']=function(){const _0x6299fe=_0x1f5c57;Sprite_Name[_0x6299fe(0x605)][_0x6299fe(0x38c)][_0x6299fe(0x5a5)](this),this['createAttachedSprites']();},Sprite_EnemyName['prototype'][_0x1f5c57(0x6c5)]=function(){const _0x424394=_0x1f5c57;Sprite_Name[_0x424394(0x605)][_0x424394(0x6c5)][_0x424394(0x5a5)](this),this['opacity']=0x0,this[_0x424394(0x828)]=null,this[_0x424394(0x8de)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName[_0x1f5c57(0x605)]['createAttachedSprites']=function(){const _0x223219=_0x1f5c57;VisuMZ[_0x223219(0x6b3)]['Settings'][_0x223219(0xa0b)][_0x223219(0xc50)]&&(this[_0x223219(0x462)]=new Sprite_StateIcon(),this[_0x223219(0x45b)](this[_0x223219(0x462)]));},Sprite_EnemyName[_0x1f5c57(0x605)]['bitmapWidth']=function(){const _0x156adc=_0x1f5c57;return Graphics[_0x156adc(0xb4d)];},Sprite_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0x4bc)]=function(){const _0x1b41fd=_0x1f5c57;return this['_lineHeight']=this[_0x1b41fd(0x318)]||Window_Base[_0x1b41fd(0x605)]['lineHeight']()||0x24,this[_0x1b41fd(0x318)]*0x4;},Sprite_EnemyName['prototype'][_0x1f5c57(0x8b9)]=function(){const _0x4b6abb=_0x1f5c57;return VisuMZ[_0x4b6abb(0x6b3)][_0x4b6abb(0xbba)]['Enemy']['NameFontSize']||$gameSystem[_0x4b6abb(0x685)]();},Sprite_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0xb97)]=function(_0x542ac5){const _0xa35175=_0x1f5c57;this[_0xa35175(0x828)]=_0x542ac5;},Sprite_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0x9ee)]=function(){const _0x10e091=_0x1f5c57;Sprite_Name[_0x10e091(0x605)][_0x10e091(0x9ee)][_0x10e091(0x5a5)](this),this[_0x10e091(0x284)](),this['updatePosition'](),this[_0x10e091(0xb4a)](),this[_0x10e091(0x332)]();},Sprite_EnemyName[_0x1f5c57(0x605)]['redraw']=function(){const _0x43fec9=_0x1f5c57;this[_0x43fec9(0xa51)]=undefined;const _0x23808e=this[_0x43fec9(0x310)](),_0x4b6644=this[_0x43fec9(0xaf9)](),_0x1d4ce4=Window_Base[_0x43fec9(0x605)][_0x43fec9(0xa54)]();this[_0x43fec9(0xc32)](),this['bitmap'][_0x43fec9(0x8e1)](),this[_0x43fec9(0x302)][_0x43fec9(0x6db)](_0x23808e,0x0,0x0,_0x4b6644,_0x1d4ce4,_0x43fec9(0x2d8));},Sprite_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0x284)]=function(){const _0x4a8d80=_0x1f5c57;if(!this['_linkedSprite'])return;this[_0x4a8d80(0xc49)]!==this[_0x4a8d80(0x828)][_0x4a8d80(0xc49)]&&this['setup'](this[_0x4a8d80(0x828)][_0x4a8d80(0xc49)]);},Sprite_EnemyName[_0x1f5c57(0x605)]['updatePosition']=function(){const _0x2c5454=_0x1f5c57;if(!this[_0x2c5454(0x828)])return;this[_0x2c5454(0x318)]=this[_0x2c5454(0x318)]||Window_Base[_0x2c5454(0x605)]['lineHeight'](),this['x']=this['_linkedSprite'][_0x2c5454(0x1ed)],this['y']=this['_linkedSprite'][_0x2c5454(0x8b7)]-this['_lineHeight']*0.5;const _0x1e60bc=VisuMZ['BattleCore'][_0x2c5454(0xbba)][_0x2c5454(0xa0b)];this['x']+=_0x1e60bc[_0x2c5454(0x562)]||0x0,this['y']+=_0x1e60bc['NameOffsetY']||0x0;},Sprite_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0xb4a)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName['prototype'][_0x1f5c57(0xaee)]=function(){const _0x3c6c16=_0x1f5c57;if(!this[_0x3c6c16(0x462)])return;this[_0x3c6c16(0xc49)]!==this[_0x3c6c16(0x462)][_0x3c6c16(0xc49)]&&this[_0x3c6c16(0x462)][_0x3c6c16(0x687)](this[_0x3c6c16(0xc49)]);const _0x77ff02=this['textWidth']();this['_lineHeight']=this[_0x3c6c16(0x318)]||Window_Base[_0x3c6c16(0x605)][_0x3c6c16(0xa54)](),this[_0x3c6c16(0x462)]['x']=Math[_0x3c6c16(0x93c)]((_0x77ff02+ImageManager[_0x3c6c16(0x5f2)])/0x2)+0x8,this[_0x3c6c16(0x462)]['y']=this[_0x3c6c16(0x318)]/0x2;const _0x4856f5=VisuMZ[_0x3c6c16(0x6b3)]['Settings'][_0x3c6c16(0xa0b)];this['_stateIconSprite']['x']+=_0x4856f5[_0x3c6c16(0x3c9)]||0x0,this[_0x3c6c16(0x462)]['y']+=_0x4856f5[_0x3c6c16(0x29b)]||0x0;},Sprite_EnemyName[_0x1f5c57(0x605)]['updateOpacity']=function(){const _0x433b10=_0x1f5c57,_0x1a4649=this[_0x433b10(0x89d)]();if(_0x1a4649&&this[_0x433b10(0x337)]<0xff)this[_0x433b10(0x337)]+=0x10;else!_0x1a4649&&this['opacity']>0x0&&(this['opacity']-=0x10);},Sprite_EnemyName['prototype'][_0x1f5c57(0x89d)]=function(){const _0xe434c7=_0x1f5c57;if(this['isAlwaysHidden']()){if(_0xe434c7(0x304)===_0xe434c7(0x304))return![];else this[_0xe434c7(0x3d7)][_0xe434c7(0x88c)]();}else{if(!this[_0xe434c7(0xc49)])return![];else{if(this['_battler'][_0xe434c7(0x750)]()){if(_0xe434c7(0x65d)!==_0xe434c7(0x8b1))return![];else{const _0x432dd6=this[_0xe434c7(0x4e9)];_0x432dd6[_0xe434c7(0x3dc)](_0xe434c7(0xad6),this['actorCommandEscape'][_0xe434c7(0xc00)](this)),_0x432dd6[_0xe434c7(0x3dc)](_0xe434c7(0x535),this[_0xe434c7(0x356)][_0xe434c7(0xc00)](this)),_0x432dd6[_0xe434c7(0x3dc)](_0xe434c7(0x296),this['actorCommandSingleSkill'][_0xe434c7(0xc00)](this)),_0x1f5a38['isTpb']()&&(this['isPartyCommandWindowDisabled']()?delete _0x432dd6[_0xe434c7(0xaf1)][_0xe434c7(0x6e8)]:_0x432dd6[_0xe434c7(0x3dc)](_0xe434c7(0x6e8),this[_0xe434c7(0x956)][_0xe434c7(0xc00)](this)));}}else{if(!this[_0xe434c7(0xc49)]['isAppeared']())return![];else{if(this['compatibilityVisible']()){if(_0xe434c7(0x581)==='fLavJ')return!![];else{const _0x5c1a8a=this['visibilityState']();if(_0x5c1a8a&&this[_0xe434c7(0x337)]<0xff)this['opacity']+=0x10;else!_0x5c1a8a&&this[_0xe434c7(0x337)]>0x0&&(this[_0xe434c7(0x337)]-=0x10);}}else{if(this[_0xe434c7(0x807)]())return _0xe434c7(0xbbf)!==_0xe434c7(0x68b)?!![]:this[_0xe434c7(0x2c1)]()['some'](_0x10cd8a=>_0x10cd8a['isSpinning']());else{if(this[_0xe434c7(0x387)]())return!![];else{if(this[_0xe434c7(0x337)]>0x0)return'nBerX'==='IqCXy'?_0x4eef6a['BattleCore'][_0xe434c7(0x745)][_0xe434c7(0x5a5)](this):![];}}}}}}}},Sprite_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0x966)]=function(){const _0x3b076d=_0x1f5c57;return VisuMZ[_0x3b076d(0x6b3)][_0x3b076d(0xbba)][_0x3b076d(0xa0b)][_0x3b076d(0x3f6)];},Sprite_EnemyName[_0x1f5c57(0x605)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x1f5c57(0x605)]['isAlwaysVisible']=function(){const _0x2b90bb=_0x1f5c57;return VisuMZ['BattleCore']['Settings'][_0x2b90bb(0xa0b)][_0x2b90bb(0x5a2)];},Sprite_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0x387)]=function(){const _0x583d5b=_0x1f5c57;return VisuMZ[_0x583d5b(0x6b3)][_0x583d5b(0xbba)][_0x583d5b(0xa0b)][_0x583d5b(0x55f)]?this[_0x583d5b(0xc49)][_0x583d5b(0x5fb)]():SceneManager[_0x583d5b(0x831)][_0x583d5b(0x739)]&&SceneManager[_0x583d5b(0x831)][_0x583d5b(0x739)][_0x583d5b(0xafa)]&&SceneManager[_0x583d5b(0x831)][_0x583d5b(0x739)]['_enemies'][_0x583d5b(0x60e)](this['_battler']);},Sprite_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0x78f)]=function(){const _0x7637c1=_0x1f5c57;if(!this[_0x7637c1(0xc49)])return 0x0;if(this[_0x7637c1(0xa51)])return this[_0x7637c1(0xa51)];const _0x98f41a=this[_0x7637c1(0x310)]();return this['setupFont'](),this[_0x7637c1(0xa51)]=this[_0x7637c1(0x302)][_0x7637c1(0x9e6)](_0x98f41a)||0x1,this[_0x7637c1(0xa51)];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x44a)]=Sprite_Battleback[_0x1f5c57(0x605)][_0x1f5c57(0x2d7)],Sprite_Battleback[_0x1f5c57(0x605)][_0x1f5c57(0x2d7)]=function(){const _0x2744e0=_0x1f5c57,_0x4638ac=VisuMZ[_0x2744e0(0x6b3)][_0x2744e0(0xbba)][_0x2744e0(0x622)];if(!_0x4638ac)return VisuMZ['BattleCore']['Sprite_Battleback_adjustPosition'][_0x2744e0(0x5a5)](this);const _0x3123c7=String(_0x4638ac[_0x2744e0(0x506)])||'MZ';switch(_0x3123c7){case'MZ':VisuMZ['BattleCore']['Sprite_Battleback_adjustPosition'][_0x2744e0(0x5a5)](this);break;case'1:1':this[_0x2744e0(0x6e5)]();break;case _0x2744e0(0x725):this[_0x2744e0(0x662)]();break;case _0x2744e0(0x4a9):this[_0x2744e0(0x848)]();break;case _0x2744e0(0x246):this[_0x2744e0(0xa59)]();break;}},Sprite_Battleback[_0x1f5c57(0x605)][_0x1f5c57(0x6e5)]=function(){const _0x5c96af=_0x1f5c57;this[_0x5c96af(0xac5)]=Graphics[_0x5c96af(0xac5)],this[_0x5c96af(0x53d)]=Graphics['height'];const _0x4ab8ec=0x1;this[_0x5c96af(0xa7b)]['x']=_0x4ab8ec,this['scale']['y']=_0x4ab8ec,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x1f5c57(0x662)]=function(){const _0x386165=_0x1f5c57;this['width']=Graphics[_0x386165(0xac5)],this[_0x386165(0x53d)]=Graphics['height'];const _0x19364e=this[_0x386165(0xac5)]/this['bitmap']['width'],_0x35eef9=this[_0x386165(0x53d)]/this[_0x386165(0x302)]['height'],_0x19b2d7=Math['max'](_0x19364e,_0x35eef9);this['scale']['x']=_0x19b2d7,this[_0x386165(0xa7b)]['y']=_0x19b2d7,this['x']=(Graphics[_0x386165(0xac5)]-this[_0x386165(0xac5)])/0x2,this['y']=Graphics[_0x386165(0x53d)]-this[_0x386165(0x53d)];},Sprite_Battleback[_0x1f5c57(0x605)][_0x1f5c57(0x848)]=function(){const _0x23c53c=_0x1f5c57;this['width']=Graphics['width'],this[_0x23c53c(0x53d)]=Graphics[_0x23c53c(0x53d)];const _0x7d9025=Math['min'](0x1,this['width']/this[_0x23c53c(0x302)][_0x23c53c(0xac5)]),_0x6862cd=Math[_0x23c53c(0xaea)](0x1,this[_0x23c53c(0x53d)]/this['bitmap'][_0x23c53c(0x53d)]),_0x1d2324=Math[_0x23c53c(0x795)](_0x7d9025,_0x6862cd);this['scale']['x']=_0x1d2324,this[_0x23c53c(0xa7b)]['y']=_0x1d2324,this['x']=(Graphics[_0x23c53c(0xac5)]-this['width'])/0x2,this['y']=Graphics[_0x23c53c(0x53d)]-this[_0x23c53c(0x53d)];},Sprite_Battleback[_0x1f5c57(0x605)][_0x1f5c57(0xa59)]=function(){const _0x377e36=_0x1f5c57;this[_0x377e36(0xac5)]=Graphics[_0x377e36(0xac5)],this[_0x377e36(0x53d)]=Graphics[_0x377e36(0x53d)];const _0x2237e8=Math[_0x377e36(0x795)](0x1,this[_0x377e36(0xac5)]/this[_0x377e36(0x302)][_0x377e36(0xac5)]),_0x3e13d3=Math[_0x377e36(0x795)](0x1,this['height']/this[_0x377e36(0x302)][_0x377e36(0x53d)]),_0x9cc108=Math[_0x377e36(0x795)](_0x2237e8,_0x3e13d3);this['scale']['x']=_0x9cc108,this[_0x377e36(0xa7b)]['y']=_0x9cc108,this['x']=(Graphics[_0x377e36(0xac5)]-this[_0x377e36(0xac5)])/0x2,this['y']=Graphics[_0x377e36(0x53d)]-this[_0x377e36(0x53d)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ[_0x1f5c57(0x6b3)]['Settings']['BattleLayout'][_0x1f5c57(0x84d)]??!![],Spriteset_Battle[_0x1f5c57(0x605)]['isFlipped']=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x1f5c57(0x605)]['animationBaseDelay']=function(){return 0x0;},Spriteset_Battle[_0x1f5c57(0x605)]['animationNextDelay']=function(){return 0x0;},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x4ec)]=Spriteset_Battle[_0x1f5c57(0x605)]['createLowerLayer'],Spriteset_Battle['prototype']['createLowerLayer']=function(){const _0x115be7=_0x1f5c57;VisuMZ[_0x115be7(0x6b3)][_0x115be7(0x4ec)][_0x115be7(0x5a5)](this),this[_0x115be7(0x6f0)](),this['createEnemyNames']();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x352)]=Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x9ee)],Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x9ee)]=function(){const _0x1bbb1d=_0x1f5c57;VisuMZ[_0x1bbb1d(0x6b3)][_0x1bbb1d(0x352)][_0x1bbb1d(0x5a5)](this),this['updateUiContainerPosition'](),this['updateWeather']();},Spriteset_Battle['prototype'][_0x1f5c57(0x6f0)]=function(){const _0x2f7ef6=_0x1f5c57;this['_weather']=new Weather(),this[_0x2f7ef6(0x6f9)]['addChild'](this[_0x2f7ef6(0x22d)]);},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x2f1)]=function(){const _0x56388f=_0x1f5c57;this['_weather'][_0x56388f(0x73a)]=$gameScreen[_0x56388f(0x698)](),this[_0x56388f(0x22d)][_0x56388f(0x453)]=$gameScreen['weatherPower']();},Game_Interpreter[_0x1f5c57(0x605)][_0x1f5c57(0x4c9)]=function(_0x3a89cf){const _0x1105d1=_0x1f5c57;$gameScreen[_0x1105d1(0x675)](_0x3a89cf[0x0],_0x3a89cf[0x1],_0x3a89cf[0x2]);if(_0x3a89cf[0x3])this['wait'](_0x3a89cf[0x2]);return!![];},VisuMZ[_0x1f5c57(0x6b3)]['Game_Interpreter_command283']=Game_Interpreter[_0x1f5c57(0x605)][_0x1f5c57(0x7f4)],Game_Interpreter[_0x1f5c57(0x605)]['command283']=function(_0x3214d2){const _0x3e6793=_0x1f5c57;return SceneManager[_0x3e6793(0x2ba)]()?(SceneManager[_0x3e6793(0x831)]['_spriteset'][_0x3e6793(0x8a6)](_0x3214d2[0x0],_0x3214d2[0x1]),!![]):VisuMZ['BattleCore']['Game_Interpreter_command283']['call'](this,_0x3214d2);},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x4d2)]=function(_0x455dc8,_0x43887c){const _0xb589ed=_0x1f5c57;_0x455dc8[_0xb589ed(0x302)]=_0x43887c;},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x8a6)]=function(_0x5eaef7,_0x518aa8){const _0xfd726e=_0x1f5c57;_0x5eaef7=_0x5eaef7||'',_0x518aa8=_0x518aa8||'';_0x5eaef7===''&&_0x518aa8===''&&(_0x5eaef7=this['_back1Sprite'][_0xfd726e(0x9c9)](),_0x518aa8=this[_0xfd726e(0x258)][_0xfd726e(0x99a)]());const _0x24ebb9=ImageManager[_0xfd726e(0xacc)](_0x5eaef7),_0x97ca8a=ImageManager[_0xfd726e(0x5a3)](_0x518aa8);_0x24ebb9[_0xfd726e(0xc30)](this[_0xfd726e(0x63d)]['bind'](this,this[_0xfd726e(0xbb4)],this['_back2Sprite'],_0x24ebb9,_0x97ca8a));},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x63d)]=function(_0x49cae6,_0x28dd19,_0x5933d4,_0x51554a){const _0x231900=_0x1f5c57;_0x51554a[_0x231900(0xc30)](this[_0x231900(0x6b2)][_0x231900(0xc00)](this,_0x49cae6,_0x28dd19,_0x5933d4,_0x51554a));},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x6b2)]=function(_0x350ee6,_0x25a06f,_0x3376a9,_0x127477){const _0xdbac40=_0x1f5c57;_0x350ee6['bitmap']=_0x3376a9,_0x25a06f[_0xdbac40(0x302)]=_0x127477,_0x350ee6[_0xdbac40(0x2d7)](),_0x25a06f['adjustPosition']();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x2b6)]=Spriteset_Battle['prototype'][_0x1f5c57(0xaff)],Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xaff)]=function(){const _0x2beeda=_0x1f5c57;VisuMZ[_0x2beeda(0x6b3)]['Spriteset_Battle_createBattleField'][_0x2beeda(0x5a5)](this),this[_0x2beeda(0x3bb)]();},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x3bb)]=function(){const _0x413b5c=_0x1f5c57;this[_0x413b5c(0x946)](),this['createUIContainer'](),this[_0x413b5c(0x8d2)](),this['createDamageContainer'](),this[_0x413b5c(0x615)]();},Spriteset_Battle['prototype'][_0x1f5c57(0x946)]=function(){const _0x1f41a6=_0x1f5c57;this[_0x1f41a6(0x9eb)]=new Sprite(),this[_0x1f41a6(0x6f9)][_0x1f41a6(0x45b)](this[_0x1f41a6(0x9eb)]);},Spriteset_Battle[_0x1f5c57(0x605)]['createAnimationContainer']=function(){const _0x2e1c99=_0x1f5c57;this[_0x2e1c99(0xb1c)]=new Sprite();if(Spriteset_Battle[_0x2e1c99(0x305)]){if('RTkul'!==_0x2e1c99(0x4e1))return this[_0x2e1c99(0x7ff)]()&&!this[_0x2e1c99(0x98b)]()?this[_0x2e1c99(0x7e1)]():_0xb37345[_0x2e1c99(0x6b3)][_0x2e1c99(0x745)][_0x2e1c99(0x5a5)](this);else this['addChild'](this[_0x2e1c99(0xb1c)]);}else _0x2e1c99(0x5ca)===_0x2e1c99(0xa61)?(this[_0x2e1c99(0x22d)]=new _0x309647(),this['_battleField'][_0x2e1c99(0x45b)](this['_weather'])):this[_0x2e1c99(0x6f9)]['addChild'](this[_0x2e1c99(0xb1c)]);},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x48a)]=function(){const _0x600d8f=_0x1f5c57;this[_0x600d8f(0x918)]=new Sprite(),this[_0x600d8f(0x918)]['x']=this['_battleField']['x'],this[_0x600d8f(0x918)]['y']=this[_0x600d8f(0x6f9)]['y'],this[_0x600d8f(0x45b)](this['_damageContainer']);},Spriteset_Battle['prototype'][_0x1f5c57(0x615)]=function(){const _0xf3897=_0x1f5c57;if(!this[_0xf3897(0xbee)]())return;this[_0xf3897(0x9eb)][_0xf3897(0xa7b)]['x']=-0x1,this[_0xf3897(0x9eb)]['x']=this['_battleField'][_0xf3897(0xac5)],this[_0xf3897(0xc7a)][_0xf3897(0xa7b)]['x']=-0x1,this['_uiContainer']['x']=this[_0xf3897(0x6f9)][_0xf3897(0xac5)],this[_0xf3897(0xb1c)][_0xf3897(0xa7b)]['x']=-0x1,this['_animationContainer']['x']=this['_battleField'][_0xf3897(0xac5)],this[_0xf3897(0x918)][_0xf3897(0xa7b)]['x']=-0x1,this[_0xf3897(0x918)]['x']=this[_0xf3897(0x6f9)]['x']+this[_0xf3897(0x6f9)][_0xf3897(0xac5)];},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x646)]=function(){const _0x612c68=_0x1f5c57;Imported[_0x612c68(0x8bb)]&&this[_0x612c68(0x788)]()&&this[_0x612c68(0x762)]();const _0xeaa62a=$gameTroop[_0x612c68(0x907)](),_0x258407=[];for(const _0x47c8cd of _0xeaa62a){_0x612c68(0x57f)!==_0x612c68(0x824)?_0x258407[_0x612c68(0x5af)](new Sprite_Enemy(_0x47c8cd)):(_0x5d6532['removeImmortal'](),_0x2b7c70[_0x612c68(0x5ec)](_0x28a9bc['deathStateId']()));}_0x258407[_0x612c68(0x9b5)](this['compareEnemySprite'][_0x612c68(0xc00)](this));for(const _0x347a3c of _0x258407){this[_0x612c68(0x9eb)][_0x612c68(0x45b)](_0x347a3c);}this[_0x612c68(0x36f)]=_0x258407;},Spriteset_Battle['prototype'][_0x1f5c57(0x677)]=function(){const _0x4aeeba=_0x1f5c57;this['_actorSprites']=[];for(let _0x50e842=0x0;_0x50e842<$gameParty['maxBattleMembers']();_0x50e842++){if('OxSYz'!==_0x4aeeba(0x362)){const _0x27dc5c=[];for(let _0x3b14b3=0x0;_0x3b14b3<this[_0x4aeeba(0x79a)]();_0x3b14b3++){_0x27dc5c[_0x4aeeba(0x5af)](_0x1f55bc[_0x4aeeba(0x259)]());}return _0x27dc5c;}else{const _0x344f4a=$gameParty['battleMembers']()[_0x50e842],_0x47736a=new Sprite_Actor();_0x47736a['moveToStartPositionBattleCore'](_0x344f4a),_0x47736a[_0x4aeeba(0x582)](_0x344f4a),_0x47736a[_0x4aeeba(0x9ee)](),this[_0x4aeeba(0xc16)][_0x4aeeba(0x5af)](_0x47736a),this['_battlerContainer']['addChild'](_0x47736a);}}},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x4c3)]=function(_0x3d8f7e,_0x4c156e,_0x5d4569,_0xda16c5){const _0x5da9db=_0x1f5c57,_0x33e415=this['isMVAnimation'](_0x4c156e),_0x102d5b=new(_0x33e415?Sprite_AnimationMV:Sprite_Animation)(),_0xaf7597=this['makeTargetSprites'](_0x3d8f7e);this[_0x5da9db(0xc14)](_0x3d8f7e[0x0])&&(_0x5da9db(0x7b7)===_0x5da9db(0x349)?this['selectNextActor']():_0x5d4569=!_0x5d4569),_0x102d5b['targetObjects']=_0x3d8f7e,_0x102d5b[_0x5da9db(0x687)](_0xaf7597,_0x4c156e,_0x5d4569,_0xda16c5),this[_0x5da9db(0x70e)](_0x102d5b);},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x70e)]=function(_0x23b031){const _0x2caa6a=_0x1f5c57;this[_0x2caa6a(0xb3d)](_0x23b031)?this[_0x2caa6a(0x295)]()[_0x2caa6a(0x45b)](_0x23b031):_0x2caa6a(0x9e1)===_0x2caa6a(0x9e1)?this[_0x2caa6a(0xb1c)][_0x2caa6a(0x45b)](_0x23b031):_0x1ebd97=![],this[_0x2caa6a(0x206)][_0x2caa6a(0x5af)](_0x23b031);},Spriteset_Battle['prototype'][_0x1f5c57(0xb3d)]=function(_0x1fbb10){const _0x5cdc89=_0x1f5c57;if(!_0x1fbb10)return![];if(!_0x1fbb10[_0x5cdc89(0x8c1)])return![];if(!_0x1fbb10[_0x5cdc89(0xa8c)][0x0])return![];if(_0x1fbb10[_0x5cdc89(0xa8c)][0x0][_0x5cdc89(0xbcf)]&&!_0x1fbb10[_0x5cdc89(0xa8c)][0x0][_0x5cdc89(0xbcf)]())return![];if($gameSystem['isSideView']())return![];if(!this[_0x5cdc89(0x295)]())return![];if(_0x1fbb10[_0x5cdc89(0x9f1)]===Sprite_Animation){if(_0x5cdc89(0xbf7)!==_0x5cdc89(0xbf7))_0x4140ff[_0x5cdc89(0x6b3)][_0x5cdc89(0xa65)][_0x5cdc89(0x5a5)](this,_0x24f6a6);else{if(_0x1fbb10[_0x5cdc89(0x8c1)][_0x5cdc89(0x28e)]!==0x0)return![];}}else{if(_0x1fbb10[_0x5cdc89(0x9f1)]===Sprite_AnimationMV){if(_0x1fbb10[_0x5cdc89(0x8c1)]['position']===0x3)return![];}}return!![];const _0x303df5=Window_BattleStatus['prototype'][_0x5cdc89(0x853)]();return['xp',_0x5cdc89(0x6ea)][_0x5cdc89(0x23f)](_0x303df5);},Spriteset_Battle['prototype'][_0x1f5c57(0x295)]=function(){const _0x484550=_0x1f5c57;if(!SceneManager[_0x484550(0x831)])return null;if(!SceneManager[_0x484550(0x831)][_0x484550(0x1ee)])return null;if(!SceneManager['_scene'][_0x484550(0x1ee)][_0x484550(0x8cd)])return null;return SceneManager[_0x484550(0x831)]['_statusWindow']['_effectsContainer'];},Spriteset_Battle['prototype'][_0x1f5c57(0x380)]=function(_0x39dbc0){const _0x25e07f=_0x1f5c57;this['removeAnimationFromContainer'](_0x39dbc0);for(const _0x597339 of _0x39dbc0[_0x25e07f(0xa8c)]){if(_0x25e07f(0x52f)===_0x25e07f(0x31b))return!![];else{if(_0x597339[_0x25e07f(0x4aa)]){if(_0x25e07f(0xc61)===_0x25e07f(0xc61))_0x597339['endAnimation']();else{if(!_0x3cb4b7[_0x25e07f(0x6b3)]['Settings'][_0x25e07f(0x8fa)][_0x25e07f(0x456)])return;const _0x152e8f=_0x4951b3[_0x25e07f(0x260)](),_0x19fc43=_0x152e8f[_0x25e07f(0xb04)]();for(const _0x1b54da of _0x19fc43){_0x1b54da[_0x25e07f(0x8dc)]&&(this[_0x25e07f(0x5af)]('fnordRemovedStates'),this[_0x25e07f(0x5af)](_0x25e07f(0xa73)),this[_0x25e07f(0x5af)](_0x25e07f(0x67c)),this[_0x25e07f(0x5af)](_0x25e07f(0x5c6),_0x1b54da[_0x25e07f(0x8dc)]['format'](_0x23b349['name']())),this['push'](_0x25e07f(0x478)));}}}}}_0x39dbc0[_0x25e07f(0x923)]();},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x405)]=function(_0x2d1ac3){const _0x52c0ce=_0x1f5c57;this['_animationSprites']['remove'](_0x2d1ac3),this[_0x52c0ce(0xb3d)](_0x2d1ac3)?this['battleStatusWindowAnimationContainer']()[_0x52c0ce(0x1dc)](_0x2d1ac3):_0x52c0ce(0x842)!==_0x52c0ce(0x842)?_0x312e36[_0x42c210]=null:this[_0x52c0ce(0xb1c)][_0x52c0ce(0x1dc)](_0x2d1ac3);},VisuMZ['BattleCore'][_0x1f5c57(0xa9f)]=Spriteset_Battle[_0x1f5c57(0x605)]['updateActors'],Spriteset_Battle[_0x1f5c57(0x605)]['updateActors']=function(){const _0x2fc683=_0x1f5c57;VisuMZ[_0x2fc683(0x6b3)][_0x2fc683(0xa9f)]['call'](this),this[_0x2fc683(0x66c)]();},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x66c)]=function(){const _0x3cdb5e=_0x1f5c57;this[_0x3cdb5e(0x9eb)][_0x3cdb5e(0x7de)][_0x3cdb5e(0x9b5)](this['compareBattlerSprites'][_0x3cdb5e(0xc00)](this)),this[_0x3cdb5e(0xac9)]();},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x3cc)]=function(_0x490ec9,_0x21cce6){const _0x10acb2=_0x1f5c57;if(VisuMZ['BattleCore']['Settings'][_0x10acb2(0x1df)][_0x10acb2(0x585)]){if(_0x490ec9['_battler']&&_0x21cce6[_0x10acb2(0xc49)]){if(_0x10acb2(0x586)!==_0x10acb2(0x586))_0x5c4b32[_0x10acb2(0x605)]['stop']['call'](this);else{if(_0x490ec9[_0x10acb2(0xc49)][_0x10acb2(0xbcf)]()&&_0x21cce6[_0x10acb2(0xc49)][_0x10acb2(0x951)]())return 0x1;else{if(_0x21cce6[_0x10acb2(0xc49)]['isActor']()&&_0x490ec9[_0x10acb2(0xc49)]['isEnemy']()){if(_0x10acb2(0x849)===_0x10acb2(0x849))return-0x1;else this[_0x10acb2(0x337)]=0x0;}}}}}if(_0x490ec9[_0x10acb2(0x8b7)]!==_0x21cce6[_0x10acb2(0x8b7)])return _0x490ec9['_baseY']-_0x21cce6[_0x10acb2(0x8b7)];else{if(_0x10acb2(0xaac)!=='YGPLs')this[_0x10acb2(0x61c)]=_0x318f02,this[_0x10acb2(0x46e)]=-0x1,this[_0x10acb2(0x8a7)]=0x0,this[_0x10acb2(0xb8b)](),this[_0x10acb2(0xa5c)]();else return _0x21cce6[_0x10acb2(0x772)]-_0x490ec9['spriteId'];}},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xac9)]=function(){const _0x286918=_0x1f5c57;if(!VisuMZ[_0x286918(0x6b3)][_0x286918(0xbba)][_0x286918(0x1df)][_0x286918(0xb11)])return;const _0x1c0856=BattleManager[_0x286918(0x33d)];if(_0x1c0856){if(_0x1c0856[_0x286918(0xbcf)]()&&!$gameSystem['isSideView']())return;const _0x130cf1=_0x1c0856[_0x286918(0x4b2)]();if(_0x130cf1&&_0x1c0856['isActor']())this['_battlerContainer'][_0x286918(0x45b)](_0x130cf1);}},Spriteset_Battle['prototype']['processEscape']=function(){const _0x5a4898=_0x1f5c57;for(const _0x540b23 of $gameParty[_0x5a4898(0x227)]()){if(_0x5a4898(0xbf9)===_0x5a4898(0xbf9)){if(!_0x540b23)continue;if(!_0x540b23[_0x5a4898(0x4b2)]())continue;_0x540b23[_0x5a4898(0x4b2)]()['forceEscapeSprite']=!![],_0x540b23[_0x5a4898(0x4b2)]()[_0x5a4898(0x353)]();}else this[_0x5a4898(0x88b)](this[_0x5a4898(0x5e4)]);}},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x740)]=function(){const _0x73ed01=_0x1f5c57;this[_0x73ed01(0xc7a)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x73ed01(0x45b)](this[_0x73ed01(0xc7a)]):this['_battleField'][_0x73ed01(0x45b)](this['_uiContainer']),SceneManager[_0x73ed01(0x831)][_0x73ed01(0xc7a)]=this[_0x73ed01(0xc7a)];},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x90c)]=function(){const _0x54db86=_0x1f5c57;if(VisuMZ[_0x54db86(0x6b3)][_0x54db86(0xbba)][_0x54db86(0xa0b)][_0x54db86(0x9f9)])return;this[_0x54db86(0xbdd)]=new Sprite(),BattleManager[_0x54db86(0x71d)](this[_0x54db86(0xbdd)]);for(const _0x2871c2 of this['_enemySprites']){const _0x20be45=new Sprite_EnemyName();this[_0x54db86(0xbdd)]['addChild'](_0x20be45),_0x20be45[_0x54db86(0xb97)](_0x2871c2);}},Spriteset_Battle['prototype'][_0x1f5c57(0x3e3)]=function(){const _0x34eba6=_0x1f5c57;if(!this['_damageContainer'])return;if(!this[_0x34eba6(0xc7a)])return;const _0xc6690b=Spriteset_Battle[_0x34eba6(0x305)]?this[_0x34eba6(0x918)]['x']:0x0,_0x2cebb0=Spriteset_Battle[_0x34eba6(0x305)]?this[_0x34eba6(0x918)]['y']:0x0,_0x4913ec=Imported[_0x34eba6(0x908)]?this[_0x34eba6(0x6f9)]['x']:0x0,_0x158bef=Imported[_0x34eba6(0x908)]?this[_0x34eba6(0x6f9)]['y']:0x0;this[_0x34eba6(0xc7a)]['x']=_0xc6690b+_0x4913ec,this[_0x34eba6(0xc7a)]['y']=_0x2cebb0+_0x158bef;},BattleManager[_0x1f5c57(0x71d)]=function(_0x3a5010){const _0x332e44=_0x1f5c57;if(!SceneManager[_0x332e44(0x831)][_0x332e44(0xc7a)])return;SceneManager[_0x332e44(0x831)]['_uiContainer'][_0x332e44(0x45b)](_0x3a5010);},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xb62)]=function(){return![];},Spriteset_Battle[_0x1f5c57(0x605)]['isAnyoneFloating']=function(){const _0x4576fd=_0x1f5c57;return this['battlerSprites']()[_0x4576fd(0x9d3)](_0x3d4870=>_0x3d4870[_0x4576fd(0xc66)]());},Spriteset_Battle['prototype'][_0x1f5c57(0x335)]=function(){const _0x2be61b=_0x1f5c57;return this[_0x2be61b(0x2c1)]()[_0x2be61b(0x9d3)](_0x4a6c82=>_0x4a6c82[_0x2be61b(0x644)]());},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0x3c1)]=function(){const _0x17eb95=_0x1f5c57;return this['battlerSprites']()[_0x17eb95(0x9d3)](_0x5a117f=>_0x5a117f['isGrowing']());},Spriteset_Battle['prototype']['isAnyoneSkewing']=function(){const _0x411096=_0x1f5c57;return this[_0x411096(0x2c1)]()[_0x411096(0x9d3)](_0x2bb077=>_0x2bb077[_0x411096(0x4ce)]());},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xc75)]=function(){const _0x143398=_0x1f5c57;return this[_0x143398(0x2c1)]()[_0x143398(0x9d3)](_0x531b1f=>_0x531b1f[_0x143398(0xb28)]());},Spriteset_Battle[_0x1f5c57(0x605)][_0x1f5c57(0xb31)]=function(){const _0x25cdae=_0x1f5c57;return this['battlerSprites']()['some'](_0x1a57a8=>_0x1a57a8[_0x25cdae(0x229)]());},VisuMZ['BattleCore'][_0x1f5c57(0x729)]=Window_ItemList[_0x1f5c57(0x605)][_0x1f5c57(0x7e3)],Window_ItemList[_0x1f5c57(0x605)]['maxCols']=function(){const _0x5a8eb9=_0x1f5c57;if(SceneManager[_0x5a8eb9(0x2ba)]()){if(_0x5a8eb9(0x412)===_0x5a8eb9(0x412)){if(SceneManager[_0x5a8eb9(0x831)][_0x5a8eb9(0x853)]()===_0x5a8eb9(0x69e)){if(_0x5a8eb9(0x822)===_0x5a8eb9(0x822))return VisuMZ[_0x5a8eb9(0x6b3)]['Settings'][_0x5a8eb9(0x66d)][_0x5a8eb9(0xc5a)];else{if(!_0xf7d1c0[_0x5a8eb9(0x2ba)]())return;if(!_0x57cf3a[_0x5a8eb9(0x908)])return;_0x34af74['ConvertParams'](_0xa7b290,_0x4c05c1);const _0x55e400=_0x13c90f[_0x5a8eb9(0x78b)](),_0x3ffe0c=_0x2df954[_0x5a8eb9(0x285)];if(!_0x55e400)return;_0x23ffaf[_0x5a8eb9(0xbed)](0x0,0x0,_0x52bbc0[_0x5a8eb9(0xacb)],_0x20b941[_0x5a8eb9(0xa64)]);if(_0x3ffe0c)_0x55e400['setWaitMode']('battleSkew');}}else return _0x5a8eb9(0xb8a)!==_0x5a8eb9(0x887)?VisuMZ[_0x5a8eb9(0x6b3)]['Settings'][_0x5a8eb9(0x66d)][_0x5a8eb9(0x5dc)]:this[_0x5a8eb9(0x79d)]()[_0x5a8eb9(0xb41)];}else return _0x3b7f97[_0x5a8eb9(0x6b3)][_0x5a8eb9(0xbba)][_0x5a8eb9(0xa6c)]['AutoBattleOK'];}else{if(_0x5a8eb9(0x4dd)==='CdxMl')return VisuMZ[_0x5a8eb9(0x6b3)][_0x5a8eb9(0x729)]['call'](this);else{if(!_0x3f3c7d['isSceneBattle']())return;_0x36d6e0['ConvertParams'](_0x4c5e89,_0x515048);const _0x406206=_0x4cacf0[_0x5a8eb9(0x78b)](),_0x46d6fb=_0x3fe321[_0x5a8eb9(0x921)](_0x22c30b['Targets']),_0x4a4539=_0x2cb14d[_0x5a8eb9(0xa87)],_0x2ca06f=_0x41df1e[_0x5a8eb9(0x1ef)];if(!_0x406206)return;_0x165811[_0x5a8eb9(0xad2)](_0x46d6fb,_0x4a4539,_0x2ca06f);if(_0x1d0e0a['WaitForAnimation'])_0x406206[_0x5a8eb9(0x924)](_0x5a8eb9(0x266));}}},VisuMZ['BattleCore'][_0x1f5c57(0xb08)]=Window_SkillList[_0x1f5c57(0x605)][_0x1f5c57(0x7e3)],Window_SkillList[_0x1f5c57(0x605)]['maxCols']=function(){const _0xbde52c=_0x1f5c57;if(SceneManager['isSceneBattle']()){if(SceneManager[_0xbde52c(0x831)]['battleLayoutStyle']()===_0xbde52c(0x69e)){if(_0xbde52c(0x58c)==='QEwjD'){const _0x243741=this[_0xbde52c(0x4b2)]();if(_0x243741)_0x243741[_0xbde52c(0xb23)](_0x5a8020);}else return VisuMZ[_0xbde52c(0x6b3)][_0xbde52c(0xbba)]['BattleLayout'][_0xbde52c(0xc5a)];}else return VisuMZ['BattleCore']['Settings'][_0xbde52c(0x66d)][_0xbde52c(0x5dc)];}else return VisuMZ['BattleCore']['Window_SkillList_maxCols']['call'](this);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x20a)]=Window_Options[_0x1f5c57(0x605)][_0x1f5c57(0x692)],Window_Options['prototype'][_0x1f5c57(0x692)]=function(){const _0x331e90=_0x1f5c57;VisuMZ[_0x331e90(0x6b3)][_0x331e90(0x20a)]['call'](this),this[_0x331e90(0x643)](),this[_0x331e90(0x7cf)]();},Window_Options[_0x1f5c57(0x605)][_0x1f5c57(0x643)]=function(){const _0x129c38=_0x1f5c57;VisuMZ[_0x129c38(0x6b3)][_0x129c38(0xbba)][_0x129c38(0xa6c)][_0x129c38(0x8e4)]&&(this[_0x129c38(0x2c3)](),this[_0x129c38(0xc07)]());},Window_Options[_0x1f5c57(0x605)][_0x1f5c57(0x7cf)]=function(){const _0x2df19c=_0x1f5c57;if(!VisuMZ['BattleCore'][_0x2df19c(0xbba)][_0x2df19c(0x3b3)][_0x2df19c(0x39e)])return;const _0x3742d2=TextManager[_0x2df19c(0x2c2)],_0x47c2f3=_0x2df19c(0x2c2);this[_0x2df19c(0xc54)](_0x3742d2,_0x47c2f3);},Window_Options[_0x1f5c57(0x605)][_0x1f5c57(0x2c3)]=function(){const _0x4ac036=_0x1f5c57,_0x56af27=TextManager['autoBattleStart'],_0x2d19d8='autoBattleAtStart';this[_0x4ac036(0xc54)](_0x56af27,_0x2d19d8);},Window_Options[_0x1f5c57(0x605)][_0x1f5c57(0xc07)]=function(){const _0xf18a75=_0x1f5c57,_0x26f7a6=TextManager[_0xf18a75(0xaa9)],_0x30dcd3=_0xf18a75(0xb7a);this[_0xf18a75(0xc54)](_0x26f7a6,_0x30dcd3);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x632)]=Window_Options[_0x1f5c57(0x605)][_0x1f5c57(0x650)],Window_Options['prototype']['statusText']=function(_0x399abe){const _0x27781d=_0x1f5c57,_0x16d821=this[_0x27781d(0xbca)](_0x399abe);return _0x16d821===_0x27781d(0xb7a)?'xskMN'===_0x27781d(0x309)?this['statusTextAutoBattleStyle']():![]:VisuMZ[_0x27781d(0x6b3)][_0x27781d(0x632)]['call'](this,_0x399abe);},Window_Options[_0x1f5c57(0x605)]['statusTextAutoBattleStyle']=function(){const _0x63c2ad=_0x1f5c57,_0x4e581d=VisuMZ[_0x63c2ad(0x6b3)][_0x63c2ad(0xbba)][_0x63c2ad(0xa6c)],_0x3268d0=this[_0x63c2ad(0xac8)](_0x63c2ad(0xb7a));return _0x3268d0?_0x4e581d['StyleON']:_0x4e581d[_0x63c2ad(0x41d)];},Window_ShopStatus[_0x1f5c57(0x605)][_0x1f5c57(0x6f6)]=function(){const _0x25047e=_0x1f5c57,_0x1043ab=DataManager[_0x25047e(0x7ae)](this['_item']),_0x51411c=VisuMZ[_0x25047e(0x2e2)][_0x1043ab];if(!_0x51411c)return this[_0x25047e(0x984)]();const _0x3fc23f=_0x25047e(0x8ed)[_0x25047e(0x98c)](this[_0x25047e(0x421)][_0x25047e(0x84b)][_0x25047e(0x73a)]),_0x288ba8=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item']['damage'][_0x25047e(0x73a)]];return _0x51411c[_0x3fc23f]['format'](_0x288ba8);},Window_ShopStatus[_0x1f5c57(0x605)][_0x1f5c57(0xa70)]=function(){const _0x5d1938=_0x1f5c57,_0x9f80b7=DataManager[_0x5d1938(0x7ae)](this[_0x5d1938(0x421)]),_0x5cf4e5=VisuMZ['DamageStyles'][_0x9f80b7];if(!_0x5cf4e5)return this['getItemDamageAmountTextOriginal']();return _0x5cf4e5[_0x5d1938(0x3b6)][_0x5d1938(0x5a5)](this);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x8b3)]=Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x38c)],Window_PartyCommand[_0x1f5c57(0x605)]['initialize']=function(_0x590ab7){const _0x221ebc=_0x1f5c57;VisuMZ[_0x221ebc(0x6b3)]['Window_PartyCommand_initialize'][_0x221ebc(0x5a5)](this,_0x590ab7),this[_0x221ebc(0x56a)](_0x590ab7);},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x56a)]=function(_0x3e7fad){const _0x3bbea3=_0x1f5c57,_0x483fe2=new Rectangle(0x0,0x0,_0x3e7fad[_0x3bbea3(0xac5)],_0x3e7fad[_0x3bbea3(0x53d)]);this[_0x3bbea3(0x618)]=new Window_Base(_0x483fe2),this[_0x3bbea3(0x618)][_0x3bbea3(0x337)]=0x0,this[_0x3bbea3(0x45b)](this[_0x3bbea3(0x618)]),this[_0x3bbea3(0xc3f)]();},Window_PartyCommand[_0x1f5c57(0x605)]['callUpdateHelp']=function(){const _0xf9ec14=_0x1f5c57;Window_Command['prototype'][_0xf9ec14(0x3f4)]['call'](this);if(this[_0xf9ec14(0x618)])this['updateCommandNameWindow']();},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0xc3f)]=function(){const _0x15ab0f=_0x1f5c57,_0x21dff=this[_0x15ab0f(0x618)];_0x21dff[_0x15ab0f(0x36b)][_0x15ab0f(0x8e1)]();const _0x33e32f=this[_0x15ab0f(0x56e)](this[_0x15ab0f(0x891)]());if(_0x33e32f==='icon'&&this[_0x15ab0f(0x6f5)]()>0x0){const _0x219632=this[_0x15ab0f(0x940)](this[_0x15ab0f(0x891)]());let _0x46eecf=this[_0x15ab0f(0xbd7)](this['index']());_0x46eecf=_0x46eecf['replace'](/\\I\[(\d+)\]/gi,''),_0x21dff[_0x15ab0f(0x706)](),this[_0x15ab0f(0x5e6)](_0x46eecf,_0x219632),this['commandNameWindowDrawText'](_0x46eecf,_0x219632),this['commandNameWindowCenter'](_0x46eecf,_0x219632);}},Window_PartyCommand['prototype']['commandNameWindowDrawBackground']=function(_0x23e5be,_0x3748d8){},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x1d6)]=function(_0x3ef69a,_0x59a3d6){const _0x3e119b=_0x1f5c57,_0x4c70b2=this[_0x3e119b(0x618)];_0x4c70b2[_0x3e119b(0x6db)](_0x3ef69a,0x0,_0x59a3d6['y'],_0x4c70b2[_0x3e119b(0x5eb)],_0x3e119b(0x2d8));},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x81e)]=function(_0x221126,_0x51f08c){const _0x434e29=_0x1f5c57,_0x52e59d=this[_0x434e29(0x618)],_0x163f53=$gameSystem['windowPadding'](),_0x48f2f1=_0x51f08c['x']+Math[_0x434e29(0x617)](_0x51f08c[_0x434e29(0xac5)]/0x2)+_0x163f53;_0x52e59d['x']=_0x52e59d[_0x434e29(0xac5)]/-0x2+_0x48f2f1,_0x52e59d['y']=Math[_0x434e29(0x617)](_0x51f08c[_0x434e29(0x53d)]/0x2);},Window_PartyCommand['prototype'][_0x1f5c57(0x429)]=function(){const _0x584301=_0x1f5c57;this[_0x584301(0x652)](),this[_0x584301(0x6b8)](),this[_0x584301(0x2e7)](),this[_0x584301(0x71e)](),this['addEscapeCommand']();},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x652)]=function(){const _0x307e5a=_0x1f5c57,_0x3afcb7=this['commandStyle'](),_0x1675f8=VisuMZ[_0x307e5a(0x6b3)]['Settings'][_0x307e5a(0x415)][_0x307e5a(0x860)],_0x41123a=_0x3afcb7===_0x307e5a(0x245)?TextManager[_0x307e5a(0x787)]:_0x307e5a(0x573)[_0x307e5a(0x98c)](_0x1675f8,TextManager[_0x307e5a(0x787)]),_0x4fe7c2=this[_0x307e5a(0x7e8)]();this['addCommand'](_0x41123a,_0x307e5a(0x787),_0x4fe7c2);},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x7e8)]=function(){return!![];},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x6b8)]=function(){const _0x456b92=_0x1f5c57;if(!this['isAutoBattleCommandAdded']())return;const _0x5ef52e=this[_0x456b92(0x94b)](),_0x4b46d7=VisuMZ[_0x456b92(0x6b3)]['Settings'][_0x456b92(0x415)][_0x456b92(0xaf2)],_0x3c7408=_0x5ef52e===_0x456b92(0x245)?TextManager['autoBattle']:_0x456b92(0x573)[_0x456b92(0x98c)](_0x4b46d7,TextManager[_0x456b92(0x535)]),_0x48f7a3=this[_0x456b92(0x27f)]();this[_0x456b92(0xc54)](_0x3c7408,'autoBattle',_0x48f7a3);},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0xc0e)]=function(){const _0x254223=_0x1f5c57;return VisuMZ[_0x254223(0x6b3)]['Settings'][_0x254223(0x415)][_0x254223(0xa6a)];},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x27f)]=function(){return!![];},Window_PartyCommand[_0x1f5c57(0x605)]['addCustomCommands']=function(){},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x71e)]=function(){const _0x2e23ef=_0x1f5c57;if(!this['isOptionsCommandAdded']())return;const _0x3b6006=this[_0x2e23ef(0x94b)](),_0x4059df=VisuMZ[_0x2e23ef(0x6b3)][_0x2e23ef(0xbba)][_0x2e23ef(0x415)][_0x2e23ef(0x252)],_0x357702=_0x3b6006===_0x2e23ef(0x245)?TextManager['options']:_0x2e23ef(0x573)[_0x2e23ef(0x98c)](_0x4059df,TextManager['options']),_0x5ce879=this['isOptionsCommandEnabled']();this[_0x2e23ef(0xc54)](_0x357702,_0x2e23ef(0xbc0),_0x5ce879);},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x5b6)]=function(){const _0x2dd209=_0x1f5c57;return VisuMZ['BattleCore']['Settings'][_0x2dd209(0x415)][_0x2dd209(0x480)];},Window_PartyCommand['prototype']['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x722)]=function(){const _0x183903=_0x1f5c57,_0x516d0d=this['commandStyle'](),_0x5616eb=VisuMZ[_0x183903(0x6b3)]['Settings'][_0x183903(0x415)][_0x183903(0xa4b)],_0x160518=_0x516d0d===_0x183903(0x245)?TextManager[_0x183903(0xad6)]:'\x5cI[%1]%2'[_0x183903(0x98c)](_0x5616eb,TextManager[_0x183903(0xad6)]),_0x5d71d7=this[_0x183903(0xb4e)]();this[_0x183903(0xc54)](_0x160518,_0x183903(0xad6),_0x5d71d7);},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0xb4e)]=function(){const _0x5b6dad=_0x1f5c57;return BattleManager[_0x5b6dad(0x418)]();},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x589)]=function(){const _0x2ff97c=_0x1f5c57;return VisuMZ['BattleCore'][_0x2ff97c(0xbba)][_0x2ff97c(0x415)]['CmdTextAlign'];},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x37a)]=function(_0x21e9c0){const _0x29cce4=_0x1f5c57,_0x362110=this[_0x29cce4(0x56e)](_0x21e9c0);if(_0x362110===_0x29cce4(0x2ca))this[_0x29cce4(0x22c)](_0x21e9c0);else{if(_0x362110==='icon'){if(_0x29cce4(0xa1b)==='TSOGJ'){if(!_0x1c51f4[_0x29cce4(0x2ba)]())return;const _0x41cda1=_0x156417[_0x29cce4(0x57c)];_0x41cda1[_0x29cce4(0x8e1)]();}else this[_0x29cce4(0x3ab)](_0x21e9c0);}else Window_Command[_0x29cce4(0x605)][_0x29cce4(0x37a)][_0x29cce4(0x5a5)](this,_0x21e9c0);}},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x94b)]=function(){const _0x1ac8eb=_0x1f5c57;return VisuMZ[_0x1ac8eb(0x6b3)]['Settings'][_0x1ac8eb(0x415)]['CmdStyle'];},Window_PartyCommand['prototype']['commandStyleCheck']=function(_0x1a6bae){const _0x2b7f59=_0x1f5c57;if(_0x1a6bae<0x0)return _0x2b7f59(0x245);const _0x32f295=this[_0x2b7f59(0x94b)]();if(_0x32f295!=='auto')return'QWjuc'!==_0x2b7f59(0x936)?_0x32f295:_0x346c5c[_0x2b7f59(0x6b3)]['Settings'][_0x2b7f59(0x941)]['VarianceFormulaJS'][_0x2b7f59(0x5a5)](this,_0x3eac5a,_0x9d00f4);else{if(this[_0x2b7f59(0x6f5)]()>0x0){const _0x36d5ee=this[_0x2b7f59(0xbd7)](_0x1a6bae);if(_0x36d5ee[_0x2b7f59(0x7a1)](/\\I\[(\d+)\]/i)){if(_0x2b7f59(0x5c0)!==_0x2b7f59(0x8d6)){const _0x2ba37f=this[_0x2b7f59(0x940)](_0x1a6bae),_0x20a09e=this[_0x2b7f59(0x5ed)](_0x36d5ee)['width'];return _0x20a09e<=_0x2ba37f[_0x2b7f59(0xac5)]?'iconText':_0x2b7f59(0xa9a);}else{const _0x15dfd9=_0x515d4e['indexOf'](_0x3b80a4);return _0x15dfd9>=0x0?[_0x493f58[_0x15dfd9+0x1]||_0x1509ec]:[_0x436501];}}}}return'text';},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x22c)]=function(_0x3cb610){const _0x2e13f5=_0x1f5c57,_0x343039=this[_0x2e13f5(0x940)](_0x3cb610),_0x368e29=this[_0x2e13f5(0xbd7)](_0x3cb610),_0x2be394=this['textSizeEx'](_0x368e29)[_0x2e13f5(0xac5)];this[_0x2e13f5(0x9ca)](this[_0x2e13f5(0x392)](_0x3cb610));const _0x15fb7=this['itemTextAlign']();if(_0x15fb7===_0x2e13f5(0x7e5))this[_0x2e13f5(0x2c9)](_0x368e29,_0x343039['x']+_0x343039[_0x2e13f5(0xac5)]-_0x2be394,_0x343039['y'],_0x2be394);else{if(_0x15fb7===_0x2e13f5(0x2d8)){const _0xe0083f=_0x343039['x']+Math['floor']((_0x343039[_0x2e13f5(0xac5)]-_0x2be394)/0x2);this[_0x2e13f5(0x2c9)](_0x368e29,_0xe0083f,_0x343039['y'],_0x2be394);}else _0x2e13f5(0x4db)!==_0x2e13f5(0x4db)?this[_0x2e13f5(0x4d6)][_0x2e13f5(0x9ee)]():this[_0x2e13f5(0x2c9)](_0x368e29,_0x343039['x'],_0x343039['y'],_0x2be394);}},Window_PartyCommand['prototype'][_0x1f5c57(0x3ab)]=function(_0x38c69b){const _0x8f68f0=_0x1f5c57;this['commandName'](_0x38c69b)[_0x8f68f0(0x7a1)](/\\I\[(\d+)\]/i);const _0x33f6e0=Number(RegExp['$1'])||0x0,_0x1da89b=this[_0x8f68f0(0x940)](_0x38c69b),_0x5bb679=_0x1da89b['x']+Math[_0x8f68f0(0x617)]((_0x1da89b[_0x8f68f0(0xac5)]-ImageManager['iconWidth'])/0x2),_0x47e790=_0x1da89b['y']+(_0x1da89b[_0x8f68f0(0x53d)]-ImageManager['iconHeight'])/0x2;this[_0x8f68f0(0x3fa)](_0x33f6e0,_0x5bb679,_0x47e790);},Window_PartyCommand['prototype']['hide']=function(){},Window_PartyCommand[_0x1f5c57(0x605)][_0x1f5c57(0x7af)]=function(){const _0x323ec4=_0x1f5c57;Window_Command['prototype'][_0x323ec4(0x7af)][_0x323ec4(0x5a5)](this);const _0x18be3e=this[_0x323ec4(0x853)]();_0x18be3e===_0x323ec4(0x69e)&&this[_0x323ec4(0x9b4)]();},Window_PartyCommand['prototype'][_0x1f5c57(0x853)]=function(){const _0xd0246a=_0x1f5c57;if(this[_0xd0246a(0xc20)])return this['_battleLayoutStyle'];return this[_0xd0246a(0xc20)]=SceneManager['_scene'][_0xd0246a(0x853)](),this[_0xd0246a(0xc20)];},Window_PartyCommand[_0x1f5c57(0x605)]['updateHelp']=function(){const _0xf24add=_0x1f5c57,_0x5928cb=VisuMZ[_0xf24add(0x6b3)][_0xf24add(0xbba)][_0xf24add(0x415)],_0x451679=this[_0xf24add(0xa60)]();switch(_0x451679){case'fight':this[_0xf24add(0xae5)][_0xf24add(0x2a6)](_0x5928cb[_0xf24add(0x7c9)]);break;case _0xf24add(0x535):this['_helpWindow'][_0xf24add(0x2a6)](_0x5928cb['HelpAutoBattle']);break;case _0xf24add(0xbc0):this[_0xf24add(0xae5)][_0xf24add(0x2a6)](_0x5928cb[_0xf24add(0xa86)]);break;case _0xf24add(0xad6):this['_helpWindow']['setText'](_0x5928cb[_0xf24add(0x939)]);break;default:this[_0xf24add(0xae5)][_0xf24add(0x2a6)]('');break;}},VisuMZ[_0x1f5c57(0x6b3)]['Window_ActorCommand_initialize']=Window_ActorCommand['prototype'][_0x1f5c57(0x38c)],Window_ActorCommand[_0x1f5c57(0x605)]['initialize']=function(_0x7a268){const _0x242184=_0x1f5c57;VisuMZ[_0x242184(0x6b3)][_0x242184(0x9ae)][_0x242184(0x5a5)](this,_0x7a268),this['createCommandNameWindow'](_0x7a268);},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x56a)]=function(_0x4772f6){const _0x4fd185=_0x1f5c57,_0x5cfe30=new Rectangle(0x0,0x0,_0x4772f6[_0x4fd185(0xac5)],_0x4772f6['height']);this[_0x4fd185(0x618)]=new Window_Base(_0x5cfe30),this[_0x4fd185(0x618)]['opacity']=0x0,this[_0x4fd185(0x45b)](this[_0x4fd185(0x618)]),this[_0x4fd185(0xc3f)]();},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x3f4)]=function(){const _0x2ee3ae=_0x1f5c57;Window_Command[_0x2ee3ae(0x605)][_0x2ee3ae(0x3f4)][_0x2ee3ae(0x5a5)](this);if(this[_0x2ee3ae(0x618)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0xc3f)]=function(){const _0x4d22ba=_0x1f5c57,_0x20d37b=this['_commandNameWindow'];_0x20d37b[_0x4d22ba(0x36b)][_0x4d22ba(0x8e1)]();const _0x595563=this[_0x4d22ba(0x56e)](this[_0x4d22ba(0x891)]());if(_0x595563===_0x4d22ba(0xa9a)&&this[_0x4d22ba(0x6f5)]()>0x0){const _0x16a3e0=this['itemLineRect'](this['index']());let _0x552b34=this['commandName'](this[_0x4d22ba(0x891)]());_0x552b34=_0x552b34[_0x4d22ba(0x6e6)](/\\I\[(\d+)\]/gi,''),_0x20d37b['resetFontSettings'](),this['commandNameWindowDrawBackground'](_0x552b34,_0x16a3e0),this[_0x4d22ba(0x1d6)](_0x552b34,_0x16a3e0),this[_0x4d22ba(0x81e)](_0x552b34,_0x16a3e0);}},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x5e6)]=function(_0x5b9f6a,_0x3c4f5e){},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x1d6)]=function(_0x3fc618,_0x691805){const _0x54378a=_0x1f5c57,_0x11209a=this[_0x54378a(0x618)];_0x11209a['drawText'](_0x3fc618,0x0,_0x691805['y'],_0x11209a['innerWidth'],_0x54378a(0x2d8));},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x81e)]=function(_0x50f0d4,_0x25016d){const _0x289a5c=_0x1f5c57,_0x135d4b=this[_0x289a5c(0x618)],_0x16c82b=$gameSystem['windowPadding'](),_0x4267ab=_0x25016d['x']+Math['floor'](_0x25016d[_0x289a5c(0xac5)]/0x2)+_0x16c82b;_0x135d4b['x']=_0x135d4b[_0x289a5c(0xac5)]/-0x2+_0x4267ab,_0x135d4b['y']=Math[_0x289a5c(0x617)](_0x25016d[_0x289a5c(0x53d)]/0x2);},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x429)]=function(){const _0x324dfb=_0x1f5c57;if(!this[_0x324dfb(0xb73)])return;const _0x462fd7=this[_0x324dfb(0xb73)][_0x324dfb(0xbc1)]();for(const _0x598792 of _0x462fd7){this[_0x324dfb(0x277)](_0x598792[_0x324dfb(0x8b5)]()[_0x324dfb(0xc8b)]());}},Window_ActorCommand[_0x1f5c57(0x605)]['makeBattleCommand']=function(_0xa65e17){const _0x411bf4=_0x1f5c57;_0xa65e17===_0x411bf4(0x6f8)&&this[_0x411bf4(0x730)]();if(['STYPES','SKILLS'][_0x411bf4(0x60e)](_0xa65e17)){if('Wdpyf'!=='Wdpyf')return _0x1c91d2;else this[_0x411bf4(0x508)]();}_0xa65e17===_0x411bf4(0x2ed)&&this[_0x411bf4(0x544)]();_0xa65e17==='ITEM'&&this[_0x411bf4(0xbf0)]();_0xa65e17==='ESCAPE'&&this['addEscapeCommand']();_0xa65e17===_0x411bf4(0xbe9)&&this[_0x411bf4(0x6b8)]();if(_0xa65e17[_0x411bf4(0x7a1)](/STYPE: (\d+)/i)){const _0x3be2bf=Number(RegExp['$1']);this[_0x411bf4(0x7aa)](_0x3be2bf);}else{if(_0xa65e17[_0x411bf4(0x7a1)](/STYPE: (.*)/i)){const _0x4b7c93=DataManager['getStypeIdWithName'](RegExp['$1']);this[_0x411bf4(0x7aa)](_0x4b7c93);}}_0xa65e17===_0x411bf4(0x384)&&this[_0x411bf4(0xc8d)]();if(_0xa65e17[_0x411bf4(0x7a1)](/SKILL: (\d+)/i)){if(_0x411bf4(0x8c3)==='zvYnQ'){const _0x2bec5e=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x2bec5e]);}else this[_0x411bf4(0x5d4)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x411bf4(0xab6)](),this[_0x411bf4(0x7e9)](),_0x12acea[_0x411bf4(0x6b3)][_0x411bf4(0x929)]['call'](this),this[_0x411bf4(0xa43)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x411bf4(0x9d5)]();}else{if(_0xa65e17['match'](/SKILL: (.*)/i)){const _0x41ed0b=DataManager[_0x411bf4(0x3d2)](RegExp['$1']);this[_0x411bf4(0xa0a)]($dataSkills[_0x41ed0b]);}}_0xa65e17==='PARTY'&&Imported[_0x411bf4(0x910)]&&('Xqnoc'===_0x411bf4(0x7ea)?this[_0x411bf4(0x829)]():(this[_0x411bf4(0x1ee)]['show'](),this[_0x411bf4(0x739)][_0x411bf4(0x251)](),this['_actorCommandWindow'][_0x411bf4(0x7af)]()));['COMBATLOG',_0x411bf4(0x3f0)]['includes'](_0xa65e17)&&Imported[_0x411bf4(0x998)]&&this[_0x411bf4(0x22e)]();if(_0xa65e17===_0x411bf4(0x3f9)&&Imported[_0x411bf4(0x9f4)]){if('dzbSI'!=='dzbSI'){if(_0x11d74a>_0x152ce3[_0x411bf4(0x1ed)])_0x1c8104=!![];if(_0x384235<_0x573097[_0x411bf4(0x1ed)])_0xe172c0=![];}else this[_0x411bf4(0x7fc)](!![]);}},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x730)]=function(){const _0x39e429=_0x1f5c57,_0x2c989a=$dataSkills[this[_0x39e429(0xb73)]['attackSkillId']()];if(!_0x2c989a)return;if(!this[_0x39e429(0xb54)](_0x2c989a))return;const _0x29d03a=this[_0x39e429(0x94b)](),_0x314ec4=DataManager[_0x39e429(0x3eb)](_0x2c989a),_0x2e6449=DataManager[_0x39e429(0x800)](_0x2c989a),_0x420c00=_0x29d03a==='text'?_0x314ec4:_0x39e429(0x573)[_0x39e429(0x98c)](_0x2e6449,_0x314ec4);this[_0x39e429(0xc54)](_0x420c00,'attack',this[_0x39e429(0xb73)][_0x39e429(0x306)]());},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x544)]=function(){const _0x281ed0=_0x1f5c57,_0x1c5d2b=$dataSkills[this[_0x281ed0(0xb73)][_0x281ed0(0x315)]()];if(!_0x1c5d2b)return;if(!this[_0x281ed0(0xb54)](_0x1c5d2b))return;const _0x1c5d52=this['commandStyle'](),_0x1d1884=DataManager[_0x281ed0(0x3eb)](_0x1c5d2b),_0x206200=DataManager[_0x281ed0(0x800)](_0x1c5d2b),_0x3513c7=_0x1c5d52===_0x281ed0(0x245)?_0x1d1884:_0x281ed0(0x573)[_0x281ed0(0x98c)](_0x206200,_0x1d1884);this[_0x281ed0(0xc54)](_0x3513c7,'guard',this[_0x281ed0(0xb73)][_0x281ed0(0xb80)]());},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0xbf0)]=function(){const _0x853536=_0x1f5c57,_0x52948a=this[_0x853536(0x94b)](),_0x3aca33=VisuMZ['BattleCore'][_0x853536(0xbba)][_0x853536(0x368)][_0x853536(0x964)],_0x3786ae=_0x52948a===_0x853536(0x245)?TextManager[_0x853536(0x20c)]:_0x853536(0x573)[_0x853536(0x98c)](_0x3aca33,TextManager['item']),_0x12e1b2=this[_0x853536(0xc48)]();this['addCommand'](_0x3786ae,_0x853536(0x20c),_0x12e1b2);},Window_ActorCommand[_0x1f5c57(0x605)]['isItemCommandEnabled']=function(){const _0x29849a=_0x1f5c57;return this[_0x29849a(0xb73)]&&this[_0x29849a(0xb73)][_0x29849a(0x1cf)]();},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x508)]=function(){const _0x6454e9=_0x1f5c57,_0x4e20f4=this[_0x6454e9(0xb73)][_0x6454e9(0xba9)]();for(const _0x1dbe1d of _0x4e20f4){if(_0x6454e9(0x763)!==_0x6454e9(0x763)){if(!_0xbb0fe1['isSceneBattle']())return;if(!_0x22d027[_0x6454e9(0x330)])return;if(!_0x324938[_0x6454e9(0x4a3)]())return;_0x5ae66b[_0x6454e9(0xa1c)](_0x36104f,_0x555aa3);const _0x30c241=_0x1750f8[_0x6454e9(0x713)];_0x2d2625[_0x6454e9(0x33d)]&&_0x4582e5['_subject']['friendsUnit']()['gainCurrentActionsFTB'](_0x30c241);}else this['addSkillTypeCommand'](_0x1dbe1d);}},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x7aa)]=function(_0x1668b){const _0x33f679=_0x1f5c57;let _0x4b472e=$dataSystem['skillTypes'][_0x1668b];if(!_0x4b472e)return;let _0x24ab6d=_0x4b472e;const _0x1606a0=this[_0x33f679(0x94b)]();if(_0x1606a0==='text')_0x24ab6d=_0x24ab6d[_0x33f679(0x6e6)](/\x1I\[(\d+)\]/gi,''),_0x24ab6d=_0x24ab6d['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x4b472e[_0x33f679(0x7a1)](/\\I\[(\d+)\]/i)){if(_0x33f679(0xbfc)!==_0x33f679(0xbfc))return _0x4e6d2c[_0x33f679(0x227)]()[_0x33f679(0x6ae)](_0x1b1501=>_0x1b1501!==_0x58e710);else{const _0xef799=Imported[_0x33f679(0x5d0)]?VisuMZ[_0x33f679(0xc64)][_0x33f679(0xbba)][_0x33f679(0x1da)]:VisuMZ[_0x33f679(0x6b3)][_0x33f679(0xbba)][_0x33f679(0x368)],_0x44d351=$dataSystem[_0x33f679(0x5fc)][_0x33f679(0x60e)](_0x1668b),_0x307424=_0x44d351?_0xef799['IconStypeMagic']:_0xef799[_0x33f679(0x3b4)];_0x24ab6d='\x5cI[%1]%2'[_0x33f679(0x98c)](_0x307424,_0x4b472e);}}}this[_0x33f679(0xc54)](_0x24ab6d,_0x33f679(0xbe8),!![],_0x1668b);},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0xc8d)]=function(){const _0x1527dc=_0x1f5c57,_0x4fc960=this[_0x1527dc(0xb73)][_0x1527dc(0xba9)](),_0x69c90d=this[_0x1527dc(0xb73)][_0x1527dc(0x41b)]();for(const _0x577ecd of _0x69c90d){if(!_0x577ecd)continue;if(Imported[_0x1527dc(0x5d0)]){if('mZUGc'===_0x1527dc(0x7a9)){if(this[_0x1527dc(0x363)](_0x577ecd))continue;if(this[_0x1527dc(0xb82)](_0x577ecd))continue;}else this[_0x1527dc(0x7a4)]()?_0x1e85ff[_0x1527dc(0x605)][_0x1527dc(0x6c1)][_0x1527dc(0x5a5)](this):this[_0x1527dc(0x521)]=0x8;}else{if(!_0x4fc960['includes'](_0x577ecd[_0x1527dc(0x264)]))continue;}this[_0x1527dc(0xa0a)](_0x577ecd);}},Window_ActorCommand['prototype'][_0x1f5c57(0x363)]=function(_0x4eca59){const _0x5ae6d6=_0x1f5c57,_0xf5297a=this['_actor']['skillTypes'](),_0x12636d=_0xf5297a['filter'](_0x2f155f=>DataManager[_0x5ae6d6(0x75c)](_0x4eca59)['includes'](_0x2f155f));return _0x12636d['length']<=0x0;},Window_ActorCommand[_0x1f5c57(0x605)]['isHiddenSkill']=function(_0x2dc830){const _0x2b64c2=_0x1f5c57;if(!Window_SkillList[_0x2b64c2(0x605)][_0x2b64c2(0x2fd)]['call'](this,_0x2dc830))return!![];if(!Window_SkillList[_0x2b64c2(0x605)][_0x2b64c2(0x23d)][_0x2b64c2(0x5a5)](this,_0x2dc830))return!![];if(!Window_SkillList[_0x2b64c2(0x605)]['checkShowHideSkillNotetags'][_0x2b64c2(0x5a5)](this,_0x2dc830))return!![];return![];},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0xa0a)]=function(_0x63b842){const _0x3a7ecf=_0x1f5c57;if(!_0x63b842)return;if(!this[_0x3a7ecf(0xb54)](_0x63b842))return;const _0x14c4f4=this[_0x3a7ecf(0x94b)](),_0x1ac984=DataManager[_0x3a7ecf(0x3eb)](_0x63b842),_0xa7d86b=DataManager[_0x3a7ecf(0x800)](_0x63b842),_0x5b18de=_0x14c4f4===_0x3a7ecf(0x245)?_0x1ac984:_0x3a7ecf(0x573)[_0x3a7ecf(0x98c)](_0xa7d86b,_0x1ac984),_0x2953fb=this[_0x3a7ecf(0xb73)]['canUse'](_0x63b842);this['addCommand'](_0x5b18de,'singleSkill',_0x2953fb,_0x63b842['id']);},Window_ActorCommand['prototype'][_0x1f5c57(0xb54)]=function(_0x50bfef){const _0x38c522=_0x1f5c57,_0x3096b0=_0x50bfef[_0x38c522(0x9bc)];if(_0x3096b0[_0x38c522(0x7a1)](/<COMMAND REQUIRE LEARN>/i)){if(!this['_actor']['isLearnedSkill'](_0x50bfef['id']))return![];}if(_0x3096b0['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x38c522(0xb73)][_0x38c522(0x775)](_0x50bfef['id']))return![];}const _0x122957=VisuMZ[_0x38c522(0x6b3)][_0x38c522(0x60b)](_0x50bfef,_0x38c522(0x1f5));if(VisuMZ[_0x38c522(0x6b3)]['JS'][_0x122957]){if(_0x38c522(0x616)===_0x38c522(0xad7)){const _0x3d4847=_0x168ccd['BattleCore']['Settings'][_0x38c522(0xa0b)];let _0x33f2f6=![];_0x1e6980[_0x38c522(0x754)]()?_0x33f2f6=_0x3d4847[_0x38c522(0x72e)]:_0x33f2f6=_0x3d4847[_0x38c522(0x5dd)],this['forceSelect'](_0x33f2f6?this[_0x38c522(0x6f5)]()-0x1:0x0);}else{if(!VisuMZ[_0x38c522(0x6b3)]['JS'][_0x122957][_0x38c522(0x5a5)](this,this[_0x38c522(0xb73)],_0x50bfef))return![];}}return VisuMZ['BattleCore'][_0x38c522(0x8f9)](_0x50bfef);},VisuMZ['BattleCore'][_0x1f5c57(0x8f9)]=function(_0x4be555){const _0x13f673=_0x1f5c57,_0x495671=_0x4be555[_0x13f673(0x9bc)];if(_0x495671['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x13f673(0x830)===_0x13f673(0x830)){const _0x1a1476=JSON[_0x13f673(0x927)]('['+RegExp['$1'][_0x13f673(0x7a1)](/\d+/g)+']');for(const _0x11aa3c of _0x1a1476){if(!$gameSwitches[_0x13f673(0x963)](_0x11aa3c))return![];}return!![];}else _0x347a52+=_0x1c4ef0(_0x1f8455['$2']);}if(_0x495671[_0x13f673(0x7a1)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x13f673(0x9d7)!==_0x13f673(0x9d7))_0x552d5a+=_0x431cf9[_0x13f673(0xa0b)][_0x13f673(0x590)]||0x0,_0x28f7e9+=_0x2fb34c[_0x13f673(0xa0b)][_0x13f673(0x2a8)]||0x0;else{const _0x43b0f1=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2430bb of _0x43b0f1){if(_0x13f673(0x38a)===_0x13f673(0x355))this[_0x13f673(0x651)]='';else{if(!$gameSwitches[_0x13f673(0x963)](_0x2430bb))return![];}}return!![];}}if(_0x495671[_0x13f673(0x7a1)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x10ec70=JSON[_0x13f673(0x927)]('['+RegExp['$1'][_0x13f673(0x7a1)](/\d+/g)+']');for(const _0x4c7eb2 of _0x10ec70){if($gameSwitches[_0x13f673(0x963)](_0x4c7eb2))return!![];}return![];}if(_0x495671[_0x13f673(0x7a1)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x408a15=JSON[_0x13f673(0x927)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x48ac51 of _0x408a15){if(!$gameSwitches[_0x13f673(0x963)](_0x48ac51))return!![];}return![];}if(_0x495671[_0x13f673(0x7a1)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x23a39f=JSON['parse']('['+RegExp['$1'][_0x13f673(0x7a1)](/\d+/g)+']');for(const _0x2cc1dc of _0x23a39f){if('RKdTP'===_0x13f673(0xb19)){if(!$gameSwitches[_0x13f673(0x963)](_0x2cc1dc))return!![];}else{this[_0x13f673(0x44b)]=_0x1bfcbb[_0x13f673(0x45f)][_0x13f673(0xbf5)];return;}}return![];}if(_0x495671[_0x13f673(0x7a1)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x49f507=JSON[_0x13f673(0x927)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x423c0a of _0x49f507){if($gameSwitches[_0x13f673(0x963)](_0x423c0a))return![];}return!![];}return!![];},Window_ActorCommand['prototype'][_0x1f5c57(0x722)]=function(){const _0x56d506=_0x1f5c57,_0x29ac16=this[_0x56d506(0x94b)](),_0x22fc5e=VisuMZ['BattleCore'][_0x56d506(0xbba)][_0x56d506(0x415)][_0x56d506(0xa4b)],_0x27c27e=_0x29ac16==='text'?TextManager['escape']:'\x5cI[%1]%2'[_0x56d506(0x98c)](_0x22fc5e,TextManager['escape']),_0x58f14f=this[_0x56d506(0xb4e)]();this[_0x56d506(0xc54)](_0x27c27e,_0x56d506(0xad6),_0x58f14f);},Window_ActorCommand['prototype'][_0x1f5c57(0xb4e)]=function(){return BattleManager['canEscape']();},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x6b8)]=function(){const _0x34f2e2=_0x1f5c57,_0x4527a7=this[_0x34f2e2(0x94b)](),_0x272699=VisuMZ[_0x34f2e2(0x6b3)][_0x34f2e2(0xbba)]['PartyCmd'][_0x34f2e2(0xaf2)],_0x535d65=_0x4527a7===_0x34f2e2(0x245)?TextManager[_0x34f2e2(0x535)]:'\x5cI[%1]%2'['format'](_0x272699,TextManager[_0x34f2e2(0x535)]),_0x172046=this[_0x34f2e2(0x27f)]();this[_0x34f2e2(0xc54)](_0x535d65,_0x34f2e2(0x535),_0x172046);},Window_ActorCommand['prototype'][_0x1f5c57(0x27f)]=function(){return!![];},Window_ActorCommand[_0x1f5c57(0x605)]['itemTextAlign']=function(){const _0x472ca8=_0x1f5c57;return VisuMZ[_0x472ca8(0x6b3)][_0x472ca8(0xbba)][_0x472ca8(0x368)][_0x472ca8(0x738)];},Window_ActorCommand['prototype'][_0x1f5c57(0x37a)]=function(_0x1e6b7a){const _0x263e7f=_0x1f5c57,_0xed6926=this['commandStyleCheck'](_0x1e6b7a);if(_0xed6926==='iconText')_0x263e7f(0x855)!=='dPieq'?this[_0x263e7f(0x5af)](_0x263e7f(0x4dc),_0x55ba5a):this['drawItemStyleIconText'](_0x1e6b7a);else{if(_0xed6926===_0x263e7f(0xa9a))this['drawItemStyleIcon'](_0x1e6b7a);else{if(_0x263e7f(0x6a2)===_0x263e7f(0x58e)){if(!_0x2d67f3['isSceneBattle']())return;const _0x5035a7=_0x2d2cff[_0x263e7f(0x78b)]();if(!_0x5035a7)return;_0x5035a7[_0x263e7f(0x924)]('battleGrow');}else Window_Command[_0x263e7f(0x605)][_0x263e7f(0x37a)]['call'](this,_0x1e6b7a);}}this[_0x263e7f(0x711)](_0x1e6b7a);},Window_ActorCommand[_0x1f5c57(0x605)]['commandStyle']=function(){const _0x416ee2=_0x1f5c57;return VisuMZ[_0x416ee2(0x6b3)][_0x416ee2(0xbba)][_0x416ee2(0x368)][_0x416ee2(0x2a4)];},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x56e)]=function(_0x32c086){const _0x5f5242=_0x1f5c57;if(_0x32c086<0x0)return _0x5f5242(0x245);const _0x58f078=this[_0x5f5242(0x94b)]();if(_0x58f078!==_0x5f5242(0xb8f))return _0x58f078;else{if(this[_0x5f5242(0x6f5)]()>0x0){const _0x3172cc=this[_0x5f5242(0xbd7)](_0x32c086);if(_0x3172cc[_0x5f5242(0x7a1)](/\\I\[(\d+)\]/i)){const _0x1f6b62=this['itemLineRect'](_0x32c086),_0x24229d=this['textSizeEx'](_0x3172cc)[_0x5f5242(0xac5)];return _0x24229d<=_0x1f6b62[_0x5f5242(0xac5)]?_0x5f5242(0x2ca):'icon';}}}return _0x5f5242(0x245);},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x22c)]=function(_0x37fd15){const _0x41d39b=_0x1f5c57,_0x32679f=this[_0x41d39b(0x940)](_0x37fd15),_0x259764=this[_0x41d39b(0xbd7)](_0x37fd15),_0x52cb35=this[_0x41d39b(0x5ed)](_0x259764)['width'];this['changePaintOpacity'](this[_0x41d39b(0x392)](_0x37fd15));const _0x57d399=this[_0x41d39b(0x589)]();if(_0x57d399===_0x41d39b(0x7e5)){if(_0x41d39b(0x7f6)===_0x41d39b(0x7f6))this[_0x41d39b(0x2c9)](_0x259764,_0x32679f['x']+_0x32679f[_0x41d39b(0xac5)]-_0x52cb35,_0x32679f['y'],_0x52cb35);else return this['currentAction']()&&this['currentAction']()[_0x41d39b(0x20c)]()&&!this[_0x41d39b(0xa11)]()[_0x41d39b(0x448)]();}else{if(_0x57d399===_0x41d39b(0x2d8)){const _0x5bb150=_0x32679f['x']+Math[_0x41d39b(0x617)]((_0x32679f[_0x41d39b(0xac5)]-_0x52cb35)/0x2);this[_0x41d39b(0x2c9)](_0x259764,_0x5bb150,_0x32679f['y'],_0x52cb35);}else'SiZgq'!=='SiZgq'?_0xd5e6a0['_subject']['friendsUnit']()[_0x41d39b(0x85e)](_0x7c3c18):this['drawTextEx'](_0x259764,_0x32679f['x'],_0x32679f['y'],_0x52cb35);}},Window_ActorCommand[_0x1f5c57(0x605)]['drawItemStyleIcon']=function(_0x3f5684){const _0x18df22=_0x1f5c57;this[_0x18df22(0xbd7)](_0x3f5684)[_0x18df22(0x7a1)](/\\I\[(\d+)\]/i);const _0x4729f6=Number(RegExp['$1'])||0x0,_0x264628=this[_0x18df22(0x940)](_0x3f5684),_0x30b747=_0x264628['x']+Math[_0x18df22(0x617)]((_0x264628['width']-ImageManager['iconWidth'])/0x2),_0x3b3599=_0x264628['y']+(_0x264628[_0x18df22(0x53d)]-ImageManager[_0x18df22(0xa19)])/0x2;this['drawIcon'](_0x4729f6,_0x30b747,_0x3b3599);},Window_ActorCommand[_0x1f5c57(0x605)]['drawSingleSkillCost']=function(_0x21609b){const _0x4085e1=_0x1f5c57;if(!(VisuMZ[_0x4085e1(0x6b3)][_0x4085e1(0xbba)][_0x4085e1(0x368)]['ShowCosts']??!![]))return;const _0x4f6130=this[_0x4085e1(0xbca)](_0x21609b);if(![_0x4085e1(0x5e3),_0x4085e1(0xbea),_0x4085e1(0x296)]['includes'](_0x4f6130))return;const _0x4d1c45=this[_0x4085e1(0x940)](_0x21609b);let _0x2823aa=null;if(_0x4f6130===_0x4085e1(0x5e3))_0x4085e1(0x7ad)===_0x4085e1(0x888)?_0x53e1a1[_0x4085e1(0x8dc)]&&(this[_0x4085e1(0x5af)](_0x4085e1(0x7b2)),this['push'](_0x4085e1(0xa73)),this[_0x4085e1(0x5af)](_0x4085e1(0x67c)),this['push'](_0x4085e1(0x5c6),_0x41d59d['message4'][_0x4085e1(0x98c)](_0x2f65ca[_0x4085e1(0x310)]())),this[_0x4085e1(0x5af)]('wait')):_0x2823aa=$dataSkills[this[_0x4085e1(0xb73)][_0x4085e1(0x6c9)]()];else{if(_0x4f6130===_0x4085e1(0xbea))_0x2823aa=$dataSkills[this['_actor'][_0x4085e1(0x315)]()];else{if(_0x4085e1(0x1d9)===_0x4085e1(0x4cc)){let _0x2ce028=_0x4085e1(0x720);if(this[_0x4085e1(0x7ef)](_0x2ce028))return this[_0x4085e1(0xa99)][_0x2ce028];return this[_0x4085e1(0xa99)][_0x2ce028]=this[_0x4085e1(0x840)](this['actor']()),this[_0x4085e1(0xa99)][_0x2ce028];}else _0x2823aa=$dataSkills[this[_0x4085e1(0x20d)][_0x21609b][_0x4085e1(0x4b1)]];}}this[_0x4085e1(0x5ea)](this['_actor'],_0x2823aa,_0x4d1c45['x'],_0x4d1c45['y'],_0x4d1c45[_0x4085e1(0xac5)]);},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x5ea)]=function(_0x29e3a0,_0x9cee6d,_0x20865a,_0x295bb0,_0x3da6d2){const _0x31412e=_0x1f5c57;if(!_0x9cee6d)return;Imported[_0x31412e(0x5d0)]?'LdfIH'===_0x31412e(0xaba)?_0x360132['scope']=_0x13e7ea(_0x1bddd7['$1'])[_0x31412e(0x8b5)]()['trim']():Window_Command[_0x31412e(0x605)][_0x31412e(0x5ea)][_0x31412e(0x5a5)](this,_0x29e3a0,_0x9cee6d,_0x20865a,_0x295bb0,_0x3da6d2):Window_SkillList['prototype'][_0x31412e(0x5ea)][_0x31412e(0x5a5)](this,_0x9cee6d,_0x20865a,_0x295bb0,_0x3da6d2);},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x251)]=function(){},Window_ActorCommand['prototype'][_0x1f5c57(0x7af)]=function(){const _0x5ed858=_0x1f5c57;Window_Command['prototype'][_0x5ed858(0x7af)][_0x5ed858(0x5a5)](this);const _0x1a2905=this[_0x5ed858(0x853)]();_0x1a2905===_0x5ed858(0x69e)&&this[_0x5ed858(0x9b4)]();},Window_ActorCommand[_0x1f5c57(0x605)]['battleLayoutStyle']=function(){const _0x44bb85=_0x1f5c57;if(this[_0x44bb85(0xc20)])return this[_0x44bb85(0xc20)];return this['_battleLayoutStyle']=SceneManager[_0x44bb85(0x831)][_0x44bb85(0x853)](),this[_0x44bb85(0xc20)];},VisuMZ[_0x1f5c57(0x6b3)]['Window_ActorCommand_setup']=Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x687)],Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0x687)]=function(_0x5969b1){const _0x734bfc=_0x1f5c57,_0xcd9cdc=this[_0x734bfc(0x853)]();if(_0x5969b1&&['xp',_0x734bfc(0x6ea)][_0x734bfc(0x60e)](_0xcd9cdc))_0x734bfc(0xc33)===_0x734bfc(0xbc9)?this['selectNextCommandTpb']():this[_0x734bfc(0x4d3)](_0x5969b1);else _0x5969b1&&[_0x734bfc(0x69e)][_0x734bfc(0x60e)](_0xcd9cdc)&&(this[_0x734bfc(0xc25)](_0x5969b1),this[_0x734bfc(0x9b4)]());VisuMZ[_0x734bfc(0x6b3)]['Window_ActorCommand_setup'][_0x734bfc(0x5a5)](this,_0x5969b1),_0x5969b1&&$gameTroop[_0x734bfc(0x227)]()['length']>0x0&&_0x5969b1[_0x734bfc(0x4b2)]()&&_0x5969b1[_0x734bfc(0x4b2)]()[_0x734bfc(0x42b)]();},Window_ActorCommand['prototype'][_0x1f5c57(0x4d3)]=function(_0x5af79a){const _0x330322=_0x1f5c57,_0x1d9d8d=Math[_0x330322(0x93c)](Graphics[_0x330322(0xb4d)]/0x3),_0xae2216=Math[_0x330322(0x93c)](Graphics[_0x330322(0xb4d)]/$gameParty['battleMembers']()[_0x330322(0x9fe)]),_0x46e620=Math[_0x330322(0xaea)](_0x1d9d8d,_0xae2216),_0xc4bea9=this[_0x330322(0xa93)](VisuMZ[_0x330322(0x6b3)]['Settings']['BattleLayout']['XPActorCommandLines']),_0x2c9d82=_0xae2216*_0x5af79a[_0x330322(0x891)]()+(_0xae2216-_0x46e620)/0x2,_0x422823=SceneManager[_0x330322(0x831)]['_statusWindow']['y']-_0xc4bea9;this[_0x330322(0x9fb)](_0x2c9d82,_0x422823,_0x46e620,_0xc4bea9),this[_0x330322(0x98a)](),this[_0x330322(0x8ac)](0x1);},Window_ActorCommand[_0x1f5c57(0x605)][_0x1f5c57(0xc25)]=function(_0x587b27){const _0x4b90d3=_0x1f5c57,_0x5612b1=SceneManager[_0x4b90d3(0x831)][_0x4b90d3(0x7ab)]();this[_0x4b90d3(0x9fb)](_0x5612b1['x'],_0x5612b1['y'],_0x5612b1['width'],_0x5612b1[_0x4b90d3(0x53d)]),this['createContents'](),this[_0x4b90d3(0x8ac)](0x0);},Window_ActorCommand['prototype'][_0x1f5c57(0x9a1)]=function(){const _0x3bfa44=_0x1f5c57;if(this[_0x3bfa44(0xc63)]){if(_0x3bfa44(0x317)!==_0x3bfa44(0x317))this['updateStaticSvBattlerFrames']();else{const _0x4954b8=this['_dimmerSprite']['bitmap'],_0x151cb9=this[_0x3bfa44(0xac5)]-0x8,_0x4736c0=this[_0x3bfa44(0x53d)],_0x55d4b6=this[_0x3bfa44(0x521)],_0x3ef180=ColorManager[_0x3bfa44(0x9c6)](),_0xa81dbf=ColorManager[_0x3bfa44(0x6a8)]();this[_0x3bfa44(0xc63)]['x']=0x4,_0x4954b8[_0x3bfa44(0xadc)](_0x151cb9,_0x4736c0),_0x4954b8[_0x3bfa44(0x5bb)](0x0,0x0,_0x151cb9,_0x55d4b6,_0xa81dbf,_0x3ef180,!![]),_0x4954b8[_0x3bfa44(0xbdc)](0x0,_0x55d4b6,_0x151cb9,_0x4736c0-_0x55d4b6*0x2,_0x3ef180),_0x4954b8[_0x3bfa44(0x5bb)](0x0,_0x4736c0-_0x55d4b6,_0x151cb9,_0x55d4b6,_0x3ef180,_0xa81dbf,!![]),this[_0x3bfa44(0xc63)][_0x3bfa44(0x2a1)](0x0,0x0,_0x151cb9,_0x4736c0);}}},Window_ActorCommand['prototype']['updateHelp']=function(){const _0x3d3bb7=_0x1f5c57;if(!this[_0x3d3bb7(0xb73)])return;const _0xadfadf=VisuMZ[_0x3d3bb7(0x6b3)][_0x3d3bb7(0xbba)][_0x3d3bb7(0x368)],_0x3beda8=this[_0x3d3bb7(0xa60)]();switch(_0x3beda8){case _0x3d3bb7(0x5e3):this[_0x3d3bb7(0x872)]($dataSkills[this[_0x3d3bb7(0xb73)][_0x3d3bb7(0x6c9)]()]);break;case _0x3d3bb7(0xbea):this[_0x3d3bb7(0x872)]($dataSkills[this[_0x3d3bb7(0xb73)][_0x3d3bb7(0x315)]()]);break;case _0x3d3bb7(0xbe8):const _0x1fb200=_0xadfadf[_0x3d3bb7(0x28a)],_0x4775d6=_0x1fb200[_0x3d3bb7(0x98c)]($dataSystem[_0x3d3bb7(0xba9)][this[_0x3d3bb7(0x213)]()]);this['_helpWindow']['setText'](_0x4775d6);break;case'singleSkill':this['setHelpWindowItem']($dataSkills[this[_0x3d3bb7(0x213)]()]);break;case'item':this['_helpWindow']['setText'](_0xadfadf['HelpItem']);break;case _0x3d3bb7(0xad6):this[_0x3d3bb7(0xae5)][_0x3d3bb7(0x2a6)](_0xadfadf[_0x3d3bb7(0x939)]);break;case _0x3d3bb7(0x535):this[_0x3d3bb7(0xae5)][_0x3d3bb7(0x2a6)](_0xadfadf[_0x3d3bb7(0x268)]);break;default:this[_0x3d3bb7(0xae5)][_0x3d3bb7(0x2a6)]('');break;}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x247)]=Window_BattleStatus[_0x1f5c57(0x605)]['initialize'],Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x38c)]=function(_0x59ee13){const _0x37673a=_0x1f5c57;VisuMZ[_0x37673a(0x6b3)][_0x37673a(0x247)][_0x37673a(0x5a5)](this,_0x59ee13),this[_0x37673a(0x31f)](),this['createAttachmentSprites']();},Window_BattleStatus[_0x1f5c57(0x605)]['battleLayoutStyle']=function(){const _0x53eb0c=_0x1f5c57;if(this[_0x53eb0c(0xc20)])return this[_0x53eb0c(0xc20)];return this[_0x53eb0c(0xc20)]=SceneManager[_0x53eb0c(0x831)][_0x53eb0c(0x853)](),this[_0x53eb0c(0xc20)];},Window_BattleStatus[_0x1f5c57(0x605)]['initBattleCore']=function(){const _0x2a9ed9=_0x1f5c57;this[_0x2a9ed9(0x96d)]=this['isFrameVisible']();const _0x597855=VisuMZ['BattleCore'][_0x2a9ed9(0xbba)][_0x2a9ed9(0x66d)];_0x597855[_0x2a9ed9(0x5e5)]&&(this[_0x2a9ed9(0x337)]=0x0);},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x7a4)]=function(){const _0x2dd29b=_0x1f5c57,_0x5446da=VisuMZ[_0x2dd29b(0x6b3)][_0x2dd29b(0xbba)][_0x2dd29b(0x66d)];if(_0x5446da[_0x2dd29b(0x4a0)]){if(_0x2dd29b(0xb4c)===_0x2dd29b(0xb4c))return!![];else this[_0x2dd29b(0x96f)]=!![];}const _0x189821=this[_0x2dd29b(0x853)]();switch(_0x189821){case _0x2dd29b(0xc47):case'border':return!![];break;case _0x2dd29b(0x3b1):case'xp':case _0x2dd29b(0x6ea):default:return![];break;}},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x4a7)]=function(){const _0x3bbf35=_0x1f5c57;if(this[_0x3bbf35(0x7a4)]()){if(_0x3bbf35(0x6a7)!==_0x3bbf35(0x6a7)){if(!_0x21e59d[_0x3bbf35(0x605)][_0x3bbf35(0x2fd)][_0x3bbf35(0x5a5)](this,_0x195bc7))return!![];if(!_0x4a8bfe[_0x3bbf35(0x605)][_0x3bbf35(0x23d)]['call'](this,_0x12641f))return!![];if(!_0x4ebea2[_0x3bbf35(0x605)][_0x3bbf35(0x76c)][_0x3bbf35(0x5a5)](this,_0x30270d))return!![];return![];}else return 0x0;}else{if(_0x3bbf35(0x80a)===_0x3bbf35(0x80a))return 0xa;else _0xc6630e[_0x3bbf35(0x4aa)]();}},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x7e3)]=function(){const _0x5a3f5d=_0x1f5c57,_0x300ba2=this[_0x5a3f5d(0x853)]();switch(_0x300ba2){case _0x5a3f5d(0xc47):return 0x1;break;case'xp':case _0x5a3f5d(0x6ea):return $gameParty[_0x5a3f5d(0x59c)]()[_0x5a3f5d(0x9fe)];break;case _0x5a3f5d(0x3b1):default:return $gameParty[_0x5a3f5d(0x250)]();break;}},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x520)]=function(){const _0xa1b5a7=_0x1f5c57,_0x24fede=this['battleLayoutStyle']();switch(_0x24fede){case _0xa1b5a7(0xc47):return Window_StatusBase[_0xa1b5a7(0x605)]['itemHeight'][_0xa1b5a7(0x5a5)](this);break;case _0xa1b5a7(0x3b1):case'xp':case _0xa1b5a7(0x6ea):default:return this[_0xa1b5a7(0x4ac)];break;}},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x608)]=function(){const _0x40553b=_0x1f5c57,_0x2de5ff=this[_0x40553b(0x853)]();switch(_0x2de5ff){case _0x40553b(0xc47):return Window_StatusBase['prototype'][_0x40553b(0x608)]['call'](this);break;case _0x40553b(0x3b1):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x1f5c57(0x605)]['updatePadding']=function(){const _0x4d1214=_0x1f5c57;this[_0x4d1214(0x7a4)]()?Window_StatusBase[_0x4d1214(0x605)][_0x4d1214(0x6c1)][_0x4d1214(0x5a5)](this):this[_0x4d1214(0x521)]=0x8;},Window_BattleStatus['prototype'][_0x1f5c57(0xc0a)]=function(){const _0x10c85e=_0x1f5c57,_0x284652=VisuMZ[_0x10c85e(0x6b3)][_0x10c85e(0xbba)][_0x10c85e(0x66d)];_0x284652['StatusWindowSkinFilename']?_0x10c85e(0x6c0)===_0x10c85e(0x655)?this[_0x10c85e(0x277)](_0x31a44c[_0x10c85e(0x8b5)]()['trim']()):this[_0x10c85e(0x24b)]=ImageManager[_0x10c85e(0x89c)](_0x284652[_0x10c85e(0x4a0)]):'VCgbF'!=='VCgbF'?(_0x2a0236=_0xe506dd[_0x10c85e(0x4b2)]()[_0x10c85e(0x2b9)],_0x121b22=_0x1bf62c[_0x10c85e(0x4b2)]()[_0x10c85e(0xc60)]):Window_StatusBase['prototype'][_0x10c85e(0xc0a)][_0x10c85e(0x5a5)](this);},Window_BattleStatus[_0x1f5c57(0x605)]['drawItemBackground']=function(_0x2c2682){const _0x512be0=_0x1f5c57,_0x1f0a2d=VisuMZ[_0x512be0(0x6b3)][_0x512be0(0xbba)][_0x512be0(0x66d)];if(_0x1f0a2d[_0x512be0(0xb0f)])return;Window_StatusBase[_0x512be0(0x605)][_0x512be0(0xb1a)][_0x512be0(0x5a5)](this,_0x2c2682);},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x479)]=function(){const _0x547799=_0x1f5c57;this[_0x547799(0x3dd)]=!![];},Window_BattleStatus['prototype']['update']=function(){const _0x4ac40a=_0x1f5c57;Window_StatusBase[_0x4ac40a(0x605)][_0x4ac40a(0x9ee)]['call'](this),this[_0x4ac40a(0x4a6)](),this[_0x4ac40a(0x469)]();if(this[_0x4ac40a(0x853)]()==='border')this[_0x4ac40a(0x922)]();},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x4a6)]=function(){const _0x4a4f9d=_0x1f5c57;if($gameTemp['isBattleRefreshRequested']())this[_0x4a4f9d(0xa35)](),this['_requestRefresh']=![],$gameTemp['clearBattleRefreshRequest']();else this['_requestRefresh']&&(this['_requestRefresh']=![],this[_0x4a4f9d(0xba7)](),this['updateAttachmentSprites']());},Window_BattleStatus[_0x1f5c57(0x605)]['show']=function(){const _0x34bde0=_0x1f5c57;Window_StatusBase[_0x34bde0(0x605)][_0x34bde0(0x88c)][_0x34bde0(0x5a5)](this);if(!$gameSystem['isSideView']())this[_0x34bde0(0xba7)]();},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x251)]=function(){const _0x38c934=_0x1f5c57;if(this[_0x38c934(0x9f1)]===Window_BattleStatus)return;Window_StatusBase[_0x38c934(0x605)]['hide'][_0x38c934(0x5a5)](this);},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x86d)]=function(_0x1c66ea){const _0x57759c=_0x1f5c57,_0xe12f04=this['battleLayoutStyle']();switch(_0xe12f04){case'xp':case'portrait':break;case _0x57759c(0x3b1):case'list':case _0x57759c(0x69e):default:return Window_StatusBase[_0x57759c(0x605)][_0x57759c(0x86d)][_0x57759c(0x5a5)](this,_0x1c66ea);break;}},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x9c4)]=Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x8f1)],Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x8f1)]=function(_0x153e7a){const _0x3f9da1=_0x1f5c57,_0x1fe265=this[_0x3f9da1(0x853)]();switch(_0x1fe265){case _0x3f9da1(0xc47):this[_0x3f9da1(0x248)](_0x153e7a);break;case'xp':this[_0x3f9da1(0x3aa)](_0x153e7a);break;case _0x3f9da1(0x6ea):this[_0x3f9da1(0xa34)](_0x153e7a);break;case'default':case _0x3f9da1(0x69e):default:VisuMZ['BattleCore']['Window_BattleStatus_drawItemImage'][_0x3f9da1(0x5a5)](this,_0x153e7a);break;}},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0xba0)]=function(_0x129269){const _0x228efe=_0x1f5c57,_0x5825cc=this[_0x228efe(0x853)]();if(!$gameSystem['isSideView']())this[_0x228efe(0xa12)](_0x129269);switch(_0x5825cc){case'list':this[_0x228efe(0x5fa)](_0x129269);break;case'xp':case _0x228efe(0x6ea):case _0x228efe(0x3b1):case _0x228efe(0x69e):default:this[_0x228efe(0x2bc)](_0x129269);break;}},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x65a)]=function(){const _0x2f4edf=_0x1f5c57,_0x33dd7b=this[_0x2f4edf(0x853)]();if(['xp']['includes'](_0x33dd7b)&&!$gameSystem[_0x2f4edf(0x754)]()){this[_0x2f4edf(0x62d)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x2f4edf(0x605)][_0x2f4edf(0x65a)]['call'](this);},Window_BattleStatus['prototype'][_0x1f5c57(0xa12)]=function(_0xe9a4f9){const _0x530e7a=_0x1f5c57,_0xcd5e6f=this['actor'](_0xe9a4f9)['battler']();if(!_0xcd5e6f)return;const _0x566016=this[_0x530e7a(0x853)](),_0x248311=this[_0x530e7a(0x623)](_0xe9a4f9);let _0x4a099a=Math[_0x530e7a(0x93c)](_0x248311['x']+_0x248311[_0x530e7a(0xac5)]/0x2)+this[_0x530e7a(0x521)];['list'][_0x530e7a(0x60e)](_0x566016)&&(_0x4a099a=_0x248311[_0x530e7a(0xac5)]/$gameParty['battleMembers']()['length'],_0x4a099a*=_0xe9a4f9,_0x4a099a+=_0x248311[_0x530e7a(0xac5)]/$gameParty[_0x530e7a(0x59c)]()[_0x530e7a(0x9fe)]/0x2);let _0x3ee063=Math['round'](this['frontviewSpriteY'](_0xe9a4f9,_0xcd5e6f,_0x248311));_0xcd5e6f[_0x530e7a(0x2cf)](_0x4a099a,_0x3ee063),this[_0x530e7a(0xbb0)](_0xcd5e6f,0x1),_0xcd5e6f[_0x530e7a(0x88c)](),this[_0x530e7a(0x4d0)](),this[_0x530e7a(0xb13)]();},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0xc52)]=function(_0x4f6a84,_0x49ec3d,_0x5adba4){const _0x1a1fd5=_0x1f5c57,_0x74bc6c=VisuMZ['BattleCore'][_0x1a1fd5(0xbba)][_0x1a1fd5(0x66d)],_0x5b975e=this['battleLayoutStyle']();if(_0x5b975e==='xp'){const _0x1463c8=_0x74bc6c[_0x1a1fd5(0x375)];switch(_0x1463c8[_0x1a1fd5(0x281)]()['trim']()){case _0x1a1fd5(0xb16):return _0x5adba4[_0x1a1fd5(0x53d)]-_0x49ec3d[_0x1a1fd5(0x4ee)]['height']/0x4;break;case'center':const _0x3c15a2=_0x74bc6c[_0x1a1fd5(0xbfb)];return(_0x5adba4[_0x1a1fd5(0x53d)]+(_0x49ec3d[_0x1a1fd5(0x53d)]||_0x3c15a2))/0x2;break;case'top':return 0x0;case _0x1a1fd5(0x310):default:return this[_0x1a1fd5(0x707)](_0x5adba4);break;}}else{if(_0x5b975e==='portrait'){}}return _0x49ec3d[_0x1a1fd5(0x53d)];},Sprite_Name[_0x1f5c57(0x605)][_0x1f5c57(0x4bc)]=function(){return 0x24;},Sprite_Name[_0x1f5c57(0x605)][_0x1f5c57(0x6eb)]=function(){const _0x1b1ad7=_0x1f5c57,_0x9a003e=this[_0x1b1ad7(0x310)](),_0x1e97f7=this[_0x1b1ad7(0xaf9)](),_0x3ca511=this['bitmapHeight']();this[_0x1b1ad7(0xc32)](),this['bitmap'][_0x1b1ad7(0x8e1)](),this[_0x1b1ad7(0x302)][_0x1b1ad7(0xb12)](_0x9a003e,0x0,0x0,_0x1e97f7,_0x3ca511,'left');},Bitmap[_0x1f5c57(0x605)][_0x1f5c57(0xb12)]=function(_0x3d8898,_0x3ab2d4,_0x5b1865,_0x4eadf7,_0x5c0d12,_0x2ec300){const _0x306e5e=_0x1f5c57,_0x415f46=this[_0x306e5e(0x5db)],_0x970b29=_0x415f46[_0x306e5e(0xa4c)];_0x4eadf7=_0x4eadf7||0xffffffff;let _0x1eccba=_0x3ab2d4,_0x5775df=Math[_0x306e5e(0x93c)](_0x5b1865+0x18/0x2+this['fontSize']*0.35);if(_0x2ec300===_0x306e5e(0x2d8)){if(_0x306e5e(0x76a)===_0x306e5e(0x4bf)){if(_0x36c378[_0x306e5e(0x6b3)]['Settings'][_0x306e5e(0xa0b)][_0x306e5e(0x9f9)])return;this[_0x306e5e(0xbdd)]=new _0x985680(),_0x112e89['addChildToUiContainer'](this[_0x306e5e(0xbdd)]);for(const _0x2b485f of this[_0x306e5e(0x36f)]){const _0x524ace=new _0x40b17d();this['_enemyNameContainer'][_0x306e5e(0x45b)](_0x524ace),_0x524ace[_0x306e5e(0xb97)](_0x2b485f);}}else _0x1eccba+=_0x4eadf7/0x2;}_0x2ec300===_0x306e5e(0x7e5)&&(_0x1eccba+=_0x4eadf7),_0x415f46[_0x306e5e(0xc67)](),_0x415f46[_0x306e5e(0xb9e)]=this['_makeFontNameText'](),_0x415f46[_0x306e5e(0x1ec)]=_0x2ec300,_0x415f46[_0x306e5e(0x624)]=_0x306e5e(0x61a),_0x415f46[_0x306e5e(0xa4c)]=0x1,this[_0x306e5e(0x9a9)](_0x3d8898,_0x1eccba,_0x5775df,_0x4eadf7),_0x415f46['globalAlpha']=_0x970b29,this[_0x306e5e(0x6cf)](_0x3d8898,_0x1eccba,_0x5775df,_0x4eadf7),_0x415f46['restore'](),this['_baseTexture']['update']();},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x707)]=function(_0x403071){return this['basicGaugesY'](_0x403071)-this['gaugeLineHeight']();},Window_BattleStatus['prototype'][_0x1f5c57(0x248)]=function(_0x56d826){const _0x33736f=_0x1f5c57;if(!VisuMZ[_0x33736f(0x6b3)][_0x33736f(0xbba)][_0x33736f(0x66d)]['ShowFacesListStyle'])return;const _0x2573df=this[_0x33736f(0x2f7)](_0x56d826),_0x4ccfa1=this['itemRect'](_0x56d826);_0x4ccfa1[_0x33736f(0xac5)]=ImageManager['faceWidth'],_0x4ccfa1[_0x33736f(0x53d)]-=0x2,this[_0x33736f(0x695)](_0x2573df,_0x4ccfa1['x']+0x1,_0x4ccfa1['y']+0x1,_0x4ccfa1[_0x33736f(0xac5)],_0x4ccfa1[_0x33736f(0x53d)]);},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x5fa)]=function(_0xc6278b){const _0x3c4aab=_0x1f5c57,_0x1110e1=VisuMZ[_0x3c4aab(0x6b3)][_0x3c4aab(0xbba)][_0x3c4aab(0x66d)],_0x35c2be=$dataSystem[_0x3c4aab(0x574)]?0x4:0x3,_0x14e8ba=_0x35c2be*0x80+(_0x35c2be-0x1)*0x8+0x4,_0x5e11a7=this['actor'](_0xc6278b),_0x2ac232=this['itemRect'](_0xc6278b);let _0x3b07d4=_0x2ac232['x']+this[_0x3c4aab(0x521)];if(_0x1110e1[_0x3c4aab(0x44f)]){if(_0x3c4aab(0x930)!==_0x3c4aab(0x930))return this[_0x3c4aab(0x831)]&&this[_0x3c4aab(0x831)]['constructor']===_0x495e36;else _0x3b07d4=_0x2ac232['x']+ImageManager[_0x3c4aab(0xa97)]+0x8;}else _0x3b07d4+=ImageManager[_0x3c4aab(0x5f2)];const _0x23f08b=Math[_0x3c4aab(0x93c)](Math[_0x3c4aab(0xaea)](_0x2ac232['x']+_0x2ac232[_0x3c4aab(0xac5)]-_0x14e8ba,_0x3b07d4)),_0x39ba36=Math[_0x3c4aab(0x93c)](_0x2ac232['y']+(_0x2ac232[_0x3c4aab(0x53d)]-Sprite_Name[_0x3c4aab(0x605)][_0x3c4aab(0x4bc)]())/0x2),_0x296801=Math[_0x3c4aab(0x93c)](_0x23f08b-ImageManager[_0x3c4aab(0x5f2)]/0x2-0x4),_0x388bdc=Math[_0x3c4aab(0x93c)](_0x2ac232['y']+(_0x2ac232[_0x3c4aab(0x53d)]-ImageManager[_0x3c4aab(0xa19)])/0x2+ImageManager[_0x3c4aab(0xa19)]/0x2);let _0x3f735c=_0x23f08b+0x88;const _0x5ea4fc=_0x39ba36;this[_0x3c4aab(0x80b)](_0x5e11a7,_0x23f08b-0x4+(_0x1110e1['TpbGaugeOffsetX']||0x0),_0x39ba36+(_0x1110e1[_0x3c4aab(0x2b5)]||0x0)),this[_0x3c4aab(0xa83)](_0x5e11a7,_0x23f08b+(_0x1110e1[_0x3c4aab(0x562)]||0x0),_0x39ba36+(_0x1110e1[_0x3c4aab(0xb2a)]||0x0)),this[_0x3c4aab(0x671)](_0x5e11a7,_0x296801+(_0x1110e1[_0x3c4aab(0xb53)]||0x0),_0x388bdc+(_0x1110e1[_0x3c4aab(0x619)]||0x0)),this[_0x3c4aab(0x59a)](_0x5e11a7,'hp',_0x3f735c+0x88*0x0+(_0x1110e1[_0x3c4aab(0x4f9)]||0x0),_0x5ea4fc+(_0x1110e1['HpGaugeOffsetY']||0x0)),this[_0x3c4aab(0x59a)](_0x5e11a7,'mp',_0x3f735c+0x88*0x1+(_0x1110e1['MpGaugeOffsetX']||0x0),_0x5ea4fc+(_0x1110e1[_0x3c4aab(0xb01)]||0x0)),$dataSystem[_0x3c4aab(0x574)]&&this[_0x3c4aab(0x59a)](_0x5e11a7,'tp',_0x3f735c+0x88*0x2+(_0x1110e1[_0x3c4aab(0xb84)]||0x0),_0x5ea4fc+(_0x1110e1[_0x3c4aab(0xbad)]||0x0));},Window_BattleStatus['prototype']['drawItemImageXPStyle']=function(_0x121177){const _0x4c3cec=_0x1f5c57;if(!$gameSystem[_0x4c3cec(0x754)]())return;VisuMZ[_0x4c3cec(0x6b3)][_0x4c3cec(0x9c4)][_0x4c3cec(0x5a5)](this,_0x121177);},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x2bc)]=function(_0x23bd54){const _0x20c793=_0x1f5c57,_0x48cb40=VisuMZ[_0x20c793(0x6b3)][_0x20c793(0xbba)][_0x20c793(0x66d)],_0x55c29a=this['actor'](_0x23bd54),_0xac4ba2=this[_0x20c793(0x623)](_0x23bd54),_0x5ccc8b=Math[_0x20c793(0x93c)](_0xac4ba2['x']+(_0xac4ba2[_0x20c793(0xac5)]-0x80)/0x2),_0x77a76e=this['nameY'](_0xac4ba2);let _0x56afb5=_0x5ccc8b-ImageManager['iconWidth']/0x2-0x4,_0x5e0e2c=_0x77a76e+ImageManager['iconHeight']/0x2;_0x56afb5-ImageManager[_0x20c793(0x5f2)]/0x2<_0xac4ba2['x']&&(_0x56afb5=_0x5ccc8b+ImageManager['iconWidth']/0x2-0x4,_0x5e0e2c=_0x77a76e-ImageManager[_0x20c793(0xa19)]/0x2);const _0x39d15d=_0x5ccc8b,_0x3c0b88=this[_0x20c793(0x8bd)](_0xac4ba2);this[_0x20c793(0x80b)](_0x55c29a,_0x5ccc8b+(_0x48cb40[_0x20c793(0x217)]||0x0),_0x77a76e+(_0x48cb40[_0x20c793(0x2b5)]||0x0)),this['placeActorName'](_0x55c29a,_0x5ccc8b+(_0x48cb40[_0x20c793(0x562)]||0x0),_0x77a76e+(_0x48cb40[_0x20c793(0xb2a)]||0x0)),this[_0x20c793(0x671)](_0x55c29a,_0x56afb5+(_0x48cb40[_0x20c793(0xb53)]||0x0),_0x5e0e2c+(_0x48cb40[_0x20c793(0x619)]||0x0)),this[_0x20c793(0x59a)](_0x55c29a,'hp',_0x39d15d+(_0x48cb40['HpGaugeOffsetX']||0x0),_0x3c0b88+(_0x48cb40['HpGaugeOffsetY']||0x0)),this[_0x20c793(0x59a)](_0x55c29a,'mp',_0x39d15d+(_0x48cb40[_0x20c793(0x82a)]||0x0),_0x3c0b88+this[_0x20c793(0xc24)]()+(_0x48cb40[_0x20c793(0xb01)]||0x0));if($dataSystem[_0x20c793(0x574)]){if(_0x20c793(0x915)==='BNAxv')return!![];else this['placeGauge'](_0x55c29a,'tp',_0x39d15d+(_0x48cb40[_0x20c793(0xb84)]||0x0),_0x3c0b88+this[_0x20c793(0xc24)]()*0x2+(_0x48cb40[_0x20c793(0xbad)]||0x0));}},Window_BattleStatus['prototype'][_0x1f5c57(0xbc2)]=function(_0x179583){const _0x116986=_0x1f5c57;if(!VisuMZ[_0x116986(0x6b3)][_0x116986(0xbba)]['BattleLayout'][_0x116986(0x820)])return![];if(_0x179583[_0x116986(0x1e9)]())return!![];return Imported[_0x116986(0xa5f)]&&_0x179583['getMenuImage']();},Game_Actor['prototype'][_0x1f5c57(0x483)]=function(){const _0x33cdc0=_0x1f5c57;if(this['actor']()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x33cdc0(0x9bc)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x33cdc0(0x960)!==_0x33cdc0(0x960)){if(!_0xbd06c6[_0x33cdc0(0x963)](_0x49a979))return![];}else return Number(RegExp['$1']);}}return 0x0;},Game_Actor['prototype'][_0x1f5c57(0xa90)]=function(){const _0x2e1830=_0x1f5c57;if(this[_0x2e1830(0x2f7)]()[_0x2e1830(0x9bc)][_0x2e1830(0x7a1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i)){if('BdpqQ'!==_0x2e1830(0x917))return Number(RegExp['$1']);else this[_0x2e1830(0xafd)](_0x2e1830(0x841));}else{if(this[_0x2e1830(0x2f7)]()[_0x2e1830(0x9bc)][_0x2e1830(0x7a1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus['prototype'][_0x1f5c57(0xa34)]=function(_0x1e5d8e){const _0x13bab1=_0x1f5c57,_0x234107=this[_0x13bab1(0x2f7)](_0x1e5d8e);if(this[_0x13bab1(0xbc2)](_0x234107)){const _0x5c151a=_0x13bab1(0x459)['format'](_0x234107[_0x13bab1(0x5b5)]()),_0x68d29c=this[_0x13bab1(0x528)](_0x5c151a,Sprite),_0x2b33d3=_0x234107[_0x13bab1(0x845)]();_0x2b33d3!==''?_0x68d29c[_0x13bab1(0x302)]=ImageManager[_0x13bab1(0x7db)](_0x2b33d3):_0x68d29c['bitmap']=ImageManager[_0x13bab1(0x879)];const _0x18129a=this[_0x13bab1(0x623)](_0x1e5d8e);_0x68d29c[_0x13bab1(0x8de)]['x']=0.5,_0x68d29c[_0x13bab1(0x8de)]['y']=0x1;let _0xe8b9ba=Math[_0x13bab1(0x93c)](_0x18129a['x']+_0x18129a[_0x13bab1(0xac5)]/0x2)+this[_0x13bab1(0x521)];_0xe8b9ba+=_0x234107['getBattlePortraitOffsetX']();let _0x45a641=Math[_0x13bab1(0x93c)](this['height']);_0x45a641+=_0x234107['getBattlePortraitOffsetY'](),_0x68d29c[_0x13bab1(0x9fb)](_0xe8b9ba,_0x45a641);const _0x47c6d0=VisuMZ[_0x13bab1(0x6b3)][_0x13bab1(0xbba)][_0x13bab1(0x66d)]['PortraitScale'];_0x68d29c[_0x13bab1(0xa7b)]['x']=_0x47c6d0,_0x68d29c['scale']['y']=_0x47c6d0,_0x68d29c[_0x13bab1(0x88c)]();}else{if('rnQAy'===_0x13bab1(0xc42)){const _0xf0f199=this['faceRect'](_0x1e5d8e);this['drawActorFace'](_0x234107,_0xf0f199['x'],_0xf0f199['y'],_0xf0f199['width'],_0xf0f199[_0x13bab1(0x53d)]);}else _0x255e10+=_0x5ba760[_0x13bab1(0xbcf)]()?-_0x394b0d:_0x4f675e,_0x38bafa+=_0x2189ce;}},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x528)]=function(_0x2fea8e,_0x5498e2){const _0x299cd7=_0x1f5c57,_0x595418=this[_0x299cd7(0xc4d)];if(_0x595418[_0x2fea8e])return _0x595418[_0x2fea8e];else{const _0x48ef28=new _0x5498e2();return _0x595418[_0x2fea8e]=_0x48ef28,this[_0x299cd7(0x88b)](_0x48ef28),this[_0x299cd7(0x88b)](this[_0x299cd7(0x77b)]),_0x48ef28;}},Window_BattleStatus['prototype'][_0x1f5c57(0x9ea)]=function(){const _0x2b53ff=_0x1f5c57;this[_0x2b53ff(0x1f3)](),this[_0x2b53ff(0x825)](),Window_StatusBase[_0x2b53ff(0x605)][_0x2b53ff(0x9ea)][_0x2b53ff(0x5a5)](this),this[_0x2b53ff(0x3d3)]();},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x1f3)]=function(){const _0x57df4e=_0x1f5c57;this[_0x57df4e(0x77b)]=new Sprite(),this[_0x57df4e(0x77b)]['filters']=[new PIXI[(_0x57df4e(0x8fd))][(_0x57df4e(0x642))]()],this[_0x57df4e(0x77b)][_0x57df4e(0x88d)]=new Rectangle(),this['_cursorArea']['move'](this[_0x57df4e(0x85d)],this[_0x57df4e(0x85d)]),this[_0x57df4e(0x45b)](this[_0x57df4e(0x77b)]);},Window_BattleStatus['prototype'][_0x1f5c57(0x825)]=function(){const _0xbe93d7=_0x1f5c57;this[_0xbe93d7(0x8cd)]=new Sprite(),this[_0xbe93d7(0x45b)](this[_0xbe93d7(0x8cd)]);},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x4d0)]=function(){const _0x58657b=_0x1f5c57;this[_0x58657b(0x8cd)]&&this['addChild'](this['_effectsContainer']);},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x3d3)]=function(){const _0xe7f20a=_0x1f5c57;this[_0xe7f20a(0x918)]=new Sprite(),this[_0xe7f20a(0x45b)](this[_0xe7f20a(0x918)]);},Window_BattleStatus['prototype']['_createCursorSprite']=function(){const _0x46c17d=_0x1f5c57;this[_0x46c17d(0xc2c)]=new Sprite();for(let _0x4f95a1=0x0;_0x4f95a1<0x9;_0x4f95a1++){_0x46c17d(0xb42)!==_0x46c17d(0x1e6)?this[_0x46c17d(0xc2c)]['addChild'](new Sprite()):this[_0x46c17d(0x6bf)]=_0x46c17d(0x6ea);}this['_cursorArea'][_0x46c17d(0x45b)](this['_cursorSprite']);},Window_BattleStatus['prototype'][_0x1f5c57(0x9af)]=function(){const _0x3a1d8b=_0x1f5c57;Window_StatusBase[_0x3a1d8b(0x605)][_0x3a1d8b(0x9af)][_0x3a1d8b(0x5a5)](this),this[_0x3a1d8b(0x6ad)]();},Window_BattleStatus['prototype'][_0x1f5c57(0x6ad)]=function(){const _0x4b59a3=_0x1f5c57,_0x521a8c=this['_padding'];this['_cursorArea'][_0x4b59a3(0x9fb)](_0x521a8c,_0x521a8c),this[_0x4b59a3(0x77b)]['x']=_0x521a8c-this[_0x4b59a3(0x5d9)]['x'],this[_0x4b59a3(0x77b)]['y']=_0x521a8c-this[_0x4b59a3(0x5d9)]['y'];if(this[_0x4b59a3(0x5eb)]>0x0&&this[_0x4b59a3(0x4ac)]>0x0){if('mtrwy'===_0x4b59a3(0x4cf)){const _0x44e2db=_0x5d389f[_0x4b59a3(0xac5)],_0x371fa5=_0x285ea3[_0x4b59a3(0x93c)]((_0x88ed75[_0x4b59a3(0xb4d)]-_0x44e2db)/0x2),_0x42f1d8=this[_0x4b59a3(0x832)](),_0xde7e8e=(_0x2ef539[_0x4b59a3(0x53d)]-_0x4f7ee3['boxHeight'])/-0x2;return new _0x5abd9c(_0x371fa5,_0xde7e8e,_0x44e2db,_0x42f1d8);}else this['_cursorArea'][_0x4b59a3(0x3c0)]=this[_0x4b59a3(0x3ca)]();}else this[_0x4b59a3(0x77b)][_0x4b59a3(0x3c0)]=![];},Window_BattleStatus[_0x1f5c57(0x605)]['_updateFilterArea']=function(){const _0x4c02ba=_0x1f5c57;Window_StatusBase['prototype']['_updateFilterArea'][_0x4c02ba(0x5a5)](this),this[_0x4c02ba(0x68d)]();},Window_BattleStatus['prototype'][_0x1f5c57(0x68d)]=function(){const _0x2000fd=_0x1f5c57,_0x2b0c25=this[_0x2000fd(0x77b)][_0x2000fd(0x329)]['apply'](new Point(0x0,0x0)),_0x514958=this[_0x2000fd(0x77b)]['filterArea'];_0x514958['x']=_0x2b0c25['x']+this['origin']['x'],_0x514958['y']=_0x2b0c25['y']+this[_0x2000fd(0x5d9)]['y'],_0x514958[_0x2000fd(0xac5)]=this[_0x2000fd(0x5eb)],_0x514958[_0x2000fd(0x53d)]=this['innerHeight'];},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x9f8)]=function(_0x451619){const _0x5a4e52=_0x1f5c57;if(this[_0x5a4e52(0x853)]()!==_0x5a4e52(0x6ea))return;this[_0x5a4e52(0xa34)](_0x451619['index']());},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x926)]=function(_0x4fabcf,_0x12bd11){const _0x3e8db4=_0x1f5c57;if(!this['_damageContainer'])return;if(!_0x4fabcf)return;if(!_0x12bd11)return;const _0x5c3730=this[_0x3e8db4(0x623)](_0x12bd11[_0x3e8db4(0x891)]());_0x5c3730['x']+=_0x5c3730[_0x3e8db4(0xac5)]/0x2+this[_0x3e8db4(0x521)],_0x4fabcf['x']=_0x5c3730['x'],_0x4fabcf['y']=_0x5c3730['y'],this[_0x3e8db4(0x918)][_0x3e8db4(0x45b)](_0x4fabcf);},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x63a)]=function(_0x4a445f){const _0x50a959=_0x1f5c57;if(!this[_0x50a959(0x918)])return;if(!_0x4a445f)return;this[_0x50a959(0x918)][_0x50a959(0x1dc)](_0x4a445f);},Window_BattleStatus[_0x1f5c57(0x605)]['updateBorderStyle']=function(){const _0x1df3ec=_0x1f5c57;if(!this[_0x1df3ec(0x21d)]())return;if(!this[_0x1df3ec(0x962)])this[_0x1df3ec(0x90f)]();this[_0x1df3ec(0xb39)](),this['updateBorderSprite']();},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x21d)]=function(){const _0xbfa2e6=_0x1f5c57;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0xbfa2e6(0x2ba)]())return![];return VisuMZ[_0xbfa2e6(0x6b3)][_0xbfa2e6(0xbba)][_0xbfa2e6(0x66d)][_0xbfa2e6(0xc95)];},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x90f)]=function(){const _0x164f85=_0x1f5c57;this[_0x164f85(0x962)]=new Sprite();const _0x5b5678=SceneManager[_0x164f85(0x831)],_0x1811a4=_0x5b5678['children'][_0x164f85(0x94d)](_0x5b5678[_0x164f85(0x721)]);_0x5b5678[_0x164f85(0xbb0)](this[_0x164f85(0x962)],_0x1811a4),this[_0x164f85(0x962)][_0x164f85(0x8de)]['x']=0.5,this[_0x164f85(0x962)][_0x164f85(0x8de)]['y']=0x1;const _0x10ebe2=VisuMZ[_0x164f85(0x6b3)][_0x164f85(0xbba)]['BattleLayout']['PortraitScaleBorderStyle'];this[_0x164f85(0x962)][_0x164f85(0xa7b)]['x']=_0x10ebe2,this[_0x164f85(0x962)][_0x164f85(0xa7b)]['y']=_0x10ebe2,this[_0x164f85(0x962)]['y']=this['y']+this['height'],this[_0x164f85(0xa33)]=0x0;},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0xb39)]=function(){const _0xb40657=_0x1f5c57;this[_0xb40657(0x962)]['visible']=BattleManager[_0xb40657(0x7e2)]();const _0x2ed36d=BattleManager['actor']();if(_0x2ed36d===this[_0xb40657(0x962)][_0xb40657(0x2f7)])return;this['_borderPortraitSprite'][_0xb40657(0x2f7)]=_0x2ed36d||this[_0xb40657(0x962)][_0xb40657(0x2f7)];if(!_0x2ed36d){if(_0xb40657(0x97e)==='rOXmM')_0x5f2ab3[_0xb40657(0x310)]=_0x5747c1(_0x20212c['$1']);else return;}else{if(_0x2ed36d[_0xb40657(0x845)]()===''){if(_0xb40657(0x2b0)===_0xb40657(0x2b0)){this[_0xb40657(0x962)][_0xb40657(0x302)]=ImageManager[_0xb40657(0x879)];return;}else this[_0xb40657(0x73f)]=new _0x34bf46(),this[_0xb40657(0x73f)][_0xb40657(0x8de)]['x']=0.5,this[_0xb40657(0x73f)][_0xb40657(0x8de)]['y']=0.5,this[_0xb40657(0x45b)](this[_0xb40657(0x73f)]);}else{const _0x23d58c=ImageManager[_0xb40657(0x7db)](_0x2ed36d[_0xb40657(0x845)]());_0x23d58c[_0xb40657(0xc30)](this[_0xb40657(0x9c2)]['bind'](this,_0x23d58c));}}},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x9c2)]=function(_0x13a10b){const _0x475b8b=_0x1f5c57;this['_borderPortraitDuration']=0x14,this['_borderPortraitSprite']['bitmap']=_0x13a10b;SceneManager[_0x475b8b(0x831)]['isRightInputMode']()?(this[_0x475b8b(0x962)]['x']=0x0,this[_0x475b8b(0x234)]=Math[_0x475b8b(0x702)](_0x13a10b['width']/0x2)):(this[_0x475b8b(0x962)]['x']=this[_0x475b8b(0xac5)],this['_borderPortraitTargetX']=this[_0x475b8b(0xac5)]*0x3/0x4);this[_0x475b8b(0x962)][_0x475b8b(0x337)]=0x0,this[_0x475b8b(0x962)]['y']=this['y']+this[_0x475b8b(0x53d)];const _0x3f8dcf=BattleManager[_0x475b8b(0x2f7)]();_0x3f8dcf&&(this[_0x475b8b(0x234)]+=_0x3f8dcf[_0x475b8b(0x483)](),this[_0x475b8b(0x962)]['y']+=_0x3f8dcf[_0x475b8b(0xa90)]());},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x87d)]=function(){const _0x9dd7d4=_0x1f5c57;if(this[_0x9dd7d4(0xa33)]>0x0){const _0x5c9963=this[_0x9dd7d4(0xa33)],_0x1916e6=this[_0x9dd7d4(0x962)];_0x1916e6['x']=(_0x1916e6['x']*(_0x5c9963-0x1)+this[_0x9dd7d4(0x234)])/_0x5c9963,_0x1916e6[_0x9dd7d4(0x337)]=(_0x1916e6[_0x9dd7d4(0x337)]*(_0x5c9963-0x1)+0xff)/_0x5c9963,this[_0x9dd7d4(0xa33)]--;}},Window_BattleStatus[_0x1f5c57(0x605)][_0x1f5c57(0x469)]=function(){const _0x43e66e=_0x1f5c57;return;this[_0x43e66e(0x8cd)]&&(this['_effectsContainer']['x']=this['x'],this[_0x43e66e(0x8cd)]['y']=this['y']);if(this[_0x43e66e(0x918)]){if('VAURw'===_0x43e66e(0x80d))this[_0x43e66e(0x918)]['x']=this['x'],this[_0x43e66e(0x918)]['y']=this['y'];else{_0x46501a['BattleCore'][_0x43e66e(0xbf6)][_0x43e66e(0x5a5)](this,_0xc19bd3),this[_0x43e66e(0x747)](),this[_0x43e66e(0xbac)]();const _0x10a334=this[_0x43e66e(0x4b2)]();if(_0x10a334)_0x10a334[_0x43e66e(0x582)](this);}}},Window_BattleStatus['prototype'][_0x1f5c57(0x389)]=function(){const _0x3e87c9=_0x1f5c57,_0x57d9ed=VisuMZ[_0x3e87c9(0x6b3)]['Settings'][_0x3e87c9(0x66d)];if(_0x57d9ed[_0x3e87c9(0x916)]){const _0x15665d=new Sprite();_0x15665d[_0x3e87c9(0x302)]=ImageManager[_0x3e87c9(0x89c)](_0x57d9ed[_0x3e87c9(0x916)]),_0x15665d['x']=_0x57d9ed[_0x3e87c9(0x899)]||0x0,_0x15665d['y']=_0x57d9ed[_0x3e87c9(0x3a6)]||0x0,this[_0x3e87c9(0x88b)](_0x15665d),this[_0x3e87c9(0x5e4)]=_0x15665d;}if(_0x57d9ed[_0x3e87c9(0x7bc)]){if(_0x3e87c9(0x4a4)===_0x3e87c9(0x67e)){if(_0x16931e[_0x3e87c9(0x6b3)]['Settings'][_0x3e87c9(0x8fa)]['BattleLogRectJS'])return _0x14dd5d['BattleCore']['Settings'][_0x3e87c9(0x8fa)]['BattleLogRectJS']['call'](this);return _0x2a2a60[_0x3e87c9(0x6b3)][_0x3e87c9(0x5ac)][_0x3e87c9(0x5a5)](this);}else{const _0x4d62d2=new Sprite();_0x4d62d2[_0x3e87c9(0x302)]=ImageManager['loadSystem'](_0x57d9ed[_0x3e87c9(0x7bc)]),_0x4d62d2['x']=_0x57d9ed[_0x3e87c9(0x322)]||0x0,_0x4d62d2['y']=_0x57d9ed[_0x3e87c9(0x364)]||0x0,this[_0x3e87c9(0x45b)](_0x4d62d2),this[_0x3e87c9(0x5a6)]=_0x4d62d2;}}},Window_BattleStatus['prototype']['updateAttachmentSprites']=function(){const _0x83081e=_0x1f5c57;this[_0x83081e(0x5a6)]&&this[_0x83081e(0x45b)](this[_0x83081e(0x5a6)]),this['_backAttachmentSprite']&&this['addChildToBack'](this['_backAttachmentSprite']);},Window_BattleActor[_0x1f5c57(0x605)][_0x1f5c57(0xbf4)]=function(){const _0x5d88fb=_0x1f5c57;return Window_BattleStatus[_0x5d88fb(0x605)][_0x5d88fb(0xbf4)][_0x5d88fb(0x5a5)](this)&&this[_0x5d88fb(0x39f)]();},Window_BattleActor['prototype']['isActionSelectionValid']=function(){const _0x2068bd=_0x1f5c57,_0x461057=BattleManager[_0x2068bd(0x35c)](),_0x1c43a8=this[_0x2068bd(0x2f7)](this[_0x2068bd(0x891)]());if(!_0x461057)return!![];if(!_0x461057['item']())return!![];const _0x59346f=_0x461057[_0x2068bd(0x20c)]()[_0x2068bd(0x9bc)];if(_0x59346f[_0x2068bd(0x7a1)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x2068bd(0xbcc)!==_0x2068bd(0x95a)){if(_0x1c43a8===BattleManager[_0x2068bd(0x2f7)]())return![];}else{if(this[_0x2068bd(0x381)]())return;this['adjustWeaponSpriteOffset'](),this[_0x2068bd(0xbdf)][_0x2068bd(0x687)](_0x59b586),this[_0x2068bd(0xb73)][_0x2068bd(0x2d2)]();}}return!![];},VisuMZ[_0x1f5c57(0x6b3)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x1f5c57(0x605)]['initialize'],Window_BattleEnemy[_0x1f5c57(0x605)][_0x1f5c57(0x38c)]=function(_0x15b7c5){const _0x189686=_0x1f5c57;this[_0x189686(0xc1d)]=null,VisuMZ[_0x189686(0x6b3)][_0x189686(0x1e3)][_0x189686(0x5a5)](this,_0x15b7c5);},Window_BattleEnemy['prototype'][_0x1f5c57(0x7e3)]=function(){const _0x5f041c=_0x1f5c57;return this[_0x5f041c(0x6f5)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x29d)]=Window_BattleEnemy[_0x1f5c57(0x605)][_0x1f5c57(0x88c)],Window_BattleEnemy[_0x1f5c57(0x605)][_0x1f5c57(0x88c)]=function(){const _0x4034f4=_0x1f5c57;VisuMZ['BattleCore']['Window_BattleEnemy_show'][_0x4034f4(0x5a5)](this),this['y']=Graphics[_0x4034f4(0x53d)]*0xa;},Window_BattleEnemy[_0x1f5c57(0x605)][_0x1f5c57(0x74a)]=function(){const _0x2d20b0=_0x1f5c57;return $gameTroop[_0x2d20b0(0x227)]()[_0x2d20b0(0x7b5)](0x0);},Window_BattleEnemy['prototype']['refresh']=function(){const _0x32c51f=_0x1f5c57;this['_enemies']=this['validTargets'](),this[_0x32c51f(0x7b3)](),Window_Selectable[_0x32c51f(0x605)]['refresh']['call'](this);},Window_BattleEnemy['prototype'][_0x1f5c57(0x7b3)]=function(){const _0xa561ee=_0x1f5c57;this[_0xa561ee(0x1de)][_0xa561ee(0x9b5)]((_0xd055cc,_0x2db87f)=>{const _0x2d7e4b=_0xa561ee;return _0xd055cc[_0x2d7e4b(0x4b2)]()[_0x2d7e4b(0x1ed)]===_0x2db87f[_0x2d7e4b(0x4b2)]()[_0x2d7e4b(0x1ed)]?_0xd055cc['battler']()[_0x2d7e4b(0x8b7)]-_0x2db87f[_0x2d7e4b(0x4b2)]()[_0x2d7e4b(0x8b7)]:_0xd055cc[_0x2d7e4b(0x4b2)]()[_0x2d7e4b(0x1ed)]-_0x2db87f[_0x2d7e4b(0x4b2)]()['_baseX'];}),SceneManager[_0xa561ee(0x1d4)]()&&this['_enemies'][_0xa561ee(0x371)]();},Window_BattleEnemy[_0x1f5c57(0x605)][_0x1f5c57(0x83a)]=function(){const _0x41987d=_0x1f5c57,_0x5a5492=VisuMZ[_0x41987d(0x6b3)][_0x41987d(0xbba)][_0x41987d(0xa0b)];if(_0x5a5492[_0x41987d(0xbc8)]){if(_0x41987d(0x742)!==_0x41987d(0x742))return'#%1'['format'](_0x2effc2(_0x2af646['$1']));else this[_0x41987d(0x5cf)]();}else this[_0x41987d(0x402)]();},Window_BattleEnemy[_0x1f5c57(0x605)][_0x1f5c57(0x5cf)]=function(){const _0x156f4d=_0x1f5c57;if(this[_0x156f4d(0xc1d)]&&this[_0x156f4d(0x1de)][_0x156f4d(0x60e)](this[_0x156f4d(0xc1d)])){const _0x44e113=this[_0x156f4d(0x1de)][_0x156f4d(0x94d)](this[_0x156f4d(0xc1d)]);this[_0x156f4d(0x32b)](_0x44e113);}else this[_0x156f4d(0x402)]();},Window_BattleEnemy[_0x1f5c57(0x605)]['autoSelectPriority']=function(){const _0x44fe6d=_0x1f5c57,_0x541b83=VisuMZ[_0x44fe6d(0x6b3)][_0x44fe6d(0xbba)][_0x44fe6d(0xa0b)];let _0x24b873=![];$gameSystem['isSideView']()?_0x24b873=_0x541b83[_0x44fe6d(0x72e)]:_0x44fe6d(0xae4)!==_0x44fe6d(0x314)?_0x24b873=_0x541b83['FrontViewSelect']:(_0x30a478['isNextSceneBattleTransitionable']()?_0x2652ea[_0x44fe6d(0x605)]['terminate'][_0x44fe6d(0x5a5)](this):_0x1ea35d['BattleCore'][_0x44fe6d(0x697)]['call'](this),this[_0x44fe6d(0x2fe)]()),this[_0x44fe6d(0x32b)](_0x24b873?this[_0x44fe6d(0x6f5)]()-0x1:0x0);},Window_BattleEnemy[_0x1f5c57(0x605)]['callOkHandler']=function(){const _0x1a8f60=_0x1f5c57;Window_Selectable[_0x1a8f60(0x605)]['callOkHandler'][_0x1a8f60(0x5a5)](this),this[_0x1a8f60(0xc1d)]=this[_0x1a8f60(0xc2a)]();},Window_BattleItem[_0x1f5c57(0x605)][_0x1f5c57(0x60e)]=function(_0x9421e){const _0x48a7f4=_0x1f5c57;if(!_0x9421e)return![];return _0x9421e[_0x48a7f4(0x768)]===0x0||_0x9421e[_0x48a7f4(0x768)]===0x1;};function _0x4f24(_0x594a3a,_0x6543c1){const _0x5916b3=_0x5916();return _0x4f24=function(_0x4f2471,_0x3b715e){_0x4f2471=_0x4f2471-0x1cc;let _0x5a9b91=_0x5916b3[_0x4f2471];return _0x5a9b91;},_0x4f24(_0x594a3a,_0x6543c1);}function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel[_0x1f5c57(0x605)]=Object['create'](Window_Base[_0x1f5c57(0x605)]),Window_AutoBattleCancel[_0x1f5c57(0x605)][_0x1f5c57(0x9f1)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x1f5c57(0x605)][_0x1f5c57(0x38c)]=function(_0x59da94){const _0x17f06d=_0x1f5c57;Window_Base[_0x17f06d(0x605)][_0x17f06d(0x38c)][_0x17f06d(0x5a5)](this,_0x59da94),this[_0x17f06d(0x8ac)](this['bgType']()),this[_0x17f06d(0xba7)]();},Window_AutoBattleCancel[_0x1f5c57(0x605)][_0x1f5c57(0x90e)]=function(){const _0x3172ef=_0x1f5c57;return VisuMZ['BattleCore'][_0x3172ef(0xbba)][_0x3172ef(0xa6c)]['AutoBattleBgType'];},Window_AutoBattleCancel['prototype'][_0x1f5c57(0xba7)]=function(){const _0x10663a=_0x1f5c57;this[_0x10663a(0x36b)]['clear']();const _0x2b53b8=VisuMZ[_0x10663a(0x6b3)][_0x10663a(0xbba)][_0x10663a(0xa6c)][_0x10663a(0x500)],_0x151166=_0x2b53b8['format'](this[_0x10663a(0x94f)](),this[_0x10663a(0x71a)]()),_0x4b08cf=this[_0x10663a(0x5ed)](_0x151166)[_0x10663a(0xac5)],_0x94e5e=Math[_0x10663a(0x617)]((this[_0x10663a(0x5eb)]-_0x4b08cf)/0x2);this[_0x10663a(0x2c9)](_0x151166,_0x94e5e,0x0,_0x4b08cf);},Window_AutoBattleCancel['prototype'][_0x1f5c57(0x94f)]=function(){const _0x2100c1=_0x1f5c57;if(Imported[_0x2100c1(0x8bb)]){if(_0x2100c1(0x3fe)===_0x2100c1(0x3fe))return TextManager[_0x2100c1(0x990)]('ok');else _0x2dcf11[_0x2100c1(0x97c)]()?(this[_0x2100c1(0x3b7)](),this[_0x2100c1(0x6fe)]()):_0xed132[_0x2100c1(0x6b3)][_0x2100c1(0xbff)][_0x2100c1(0x5a5)](this);}else return VisuMZ[_0x2100c1(0x6b3)]['Settings'][_0x2100c1(0xa6c)][_0x2100c1(0x96e)];},Window_AutoBattleCancel[_0x1f5c57(0x605)][_0x1f5c57(0x71a)]=function(){const _0x5a0d89=_0x1f5c57;return Imported[_0x5a0d89(0x8bb)]?TextManager[_0x5a0d89(0x990)](_0x5a0d89(0x6e8)):VisuMZ['BattleCore']['Settings'][_0x5a0d89(0xa6c)][_0x5a0d89(0xa98)];},Window_AutoBattleCancel[_0x1f5c57(0x605)][_0x1f5c57(0x9ee)]=function(){const _0x2a9381=_0x1f5c57;Window_Base['prototype'][_0x2a9381(0x9ee)]['call'](this),this[_0x2a9381(0x438)](),this[_0x2a9381(0x8e0)]();},Window_AutoBattleCancel['prototype'][_0x1f5c57(0x438)]=function(){const _0x1b7638=_0x1f5c57;this[_0x1b7638(0x3c0)]=BattleManager[_0x1b7638(0x391)];},Window_AutoBattleCancel[_0x1f5c57(0x605)][_0x1f5c57(0x8e0)]=function(){const _0x5c42e6=_0x1f5c57;if(!BattleManager[_0x5c42e6(0x391)])return;(Input[_0x5c42e6(0x451)]('ok')||Input[_0x5c42e6(0x451)]('cancel')||TouchInput[_0x5c42e6(0x308)]()||TouchInput[_0x5c42e6(0xc10)]())&&(SoundManager[_0x5c42e6(0x752)](),BattleManager[_0x5c42e6(0x391)]=![],Input[_0x5c42e6(0x8e1)](),TouchInput[_0x5c42e6(0x8e1)]());};function Window_EnemyName(){const _0x1dbb42=_0x1f5c57;this[_0x1dbb42(0x38c)](...arguments);}Window_EnemyName[_0x1f5c57(0x605)]=Object[_0x1f5c57(0x906)](Window_StatusBase[_0x1f5c57(0x605)]),Window_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0x9f1)]=Window_EnemyName,Window_EnemyName['prototype'][_0x1f5c57(0x38c)]=function(_0x5aa0dd){const _0x113860=_0x1f5c57;this[_0x113860(0x24d)]=_0x5aa0dd,this[_0x113860(0xbd8)]='';const _0x4b9d9f=new Rectangle(0x0,0x0,Graphics[_0x113860(0xb4d)],this[_0x113860(0xa54)]()*0x4);Window_StatusBase[_0x113860(0x605)][_0x113860(0x38c)][_0x113860(0x5a5)](this,_0x4b9d9f),this[_0x113860(0x8ac)](0x2),this[_0x113860(0xa49)]=0x0;},Window_EnemyName[_0x1f5c57(0x605)]['updatePadding']=function(){const _0x48277b=_0x1f5c57;this[_0x48277b(0x521)]=0x0;},Window_EnemyName[_0x1f5c57(0x605)]['enemy']=function(){const _0x59e9c1=_0x1f5c57;return $gameTroop[_0x59e9c1(0x907)]()[this[_0x59e9c1(0x24d)]];},Window_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0x9ee)]=function(){const _0x2e978=_0x1f5c57;Window_StatusBase[_0x2e978(0x605)][_0x2e978(0x9ee)][_0x2e978(0x5a5)](this),this['enemy']()&&this[_0x2e978(0xc2a)]()[_0x2e978(0x310)]()!==this[_0x2e978(0xbd8)]&&(this[_0x2e978(0xbd8)]=this['enemy']()[_0x2e978(0x310)](),this[_0x2e978(0xba7)]()),this[_0x2e978(0x332)](),this[_0x2e978(0xc5f)]();},Window_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0x332)]=function(){const _0x2f8855=_0x1f5c57;if(!this[_0x2f8855(0xc2a)]()){if(_0x2f8855(0x273)!==_0x2f8855(0x273))this[_0x2f8855(0x3d7)]['close'](),this[_0x2f8855(0x43c)]['close']();else{if(this[_0x2f8855(0xa49)]>0x0)this[_0x2f8855(0xa49)]-=0x10;}}else{if(this[_0x2f8855(0xc2a)]()['isDead']()){if(this[_0x2f8855(0xa49)]>0x0)this[_0x2f8855(0xa49)]-=0x10;}else{if(SceneManager[_0x2f8855(0x831)][_0x2f8855(0x739)]&&SceneManager['_scene'][_0x2f8855(0x739)][_0x2f8855(0xafa)]&&SceneManager['_scene'][_0x2f8855(0x739)][_0x2f8855(0x1de)]['includes'](this[_0x2f8855(0xc2a)]())){if(_0x2f8855(0x204)===_0x2f8855(0x204)){if(this[_0x2f8855(0xa49)]<0xff)this[_0x2f8855(0xa49)]+=0x10;}else _0x376917[_0x2f8855(0x33d)][_0x2f8855(0x58d)]();}else this[_0x2f8855(0xa49)]>0x0&&(this['contentsOpacity']-=0x10);}}},Window_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0xc5f)]=function(){const _0x47651a=_0x1f5c57;if(!this['enemy']())return;if(SceneManager['isBattleFlipped']())this['x']=Graphics[_0x47651a(0xb4d)]-this['enemy']()[_0x47651a(0x4b2)]()[_0x47651a(0x1ed)];else{if(_0x47651a(0x6cd)===_0x47651a(0x649))return _0x56c36c[_0x47651a(0x6b3)][_0x47651a(0xbba)]['Enemy'][_0x47651a(0xa3e)];else this['x']=this['enemy']()['battler']()[_0x47651a(0x1ed)];}this['x']-=Math[_0x47651a(0x93c)](this[_0x47651a(0xac5)]/0x2),this['y']=this[_0x47651a(0xc2a)]()[_0x47651a(0x4b2)]()[_0x47651a(0x8b7)]-Math[_0x47651a(0x93c)](this[_0x47651a(0xa54)]()*1.5);const _0x4de1af=VisuMZ['BattleCore']['Settings'][_0x47651a(0xa0b)];this['x']+=_0x4de1af['NameOffsetX']||0x0,this['y']+=_0x4de1af[_0x47651a(0xb2a)]||0x0;},Window_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0x706)]=function(){const _0x22e1c5=_0x1f5c57;Window_Base['prototype'][_0x22e1c5(0x706)][_0x22e1c5(0x5a5)](this),this[_0x22e1c5(0x36b)]['fontSize']=VisuMZ[_0x22e1c5(0x6b3)][_0x22e1c5(0xbba)][_0x22e1c5(0xa0b)]['NameFontSize'];},Window_EnemyName[_0x1f5c57(0x605)][_0x1f5c57(0xba7)]=function(){const _0x56a90a=_0x1f5c57;Window_StatusBase[_0x56a90a(0x605)][_0x56a90a(0xba7)][_0x56a90a(0x5a5)](this),this[_0x56a90a(0x36b)]['clear']();if(!this['enemy']())return;this[_0x56a90a(0x715)]();},Window_EnemyName[_0x1f5c57(0x605)]['drawEnemyName']=function(){const _0x43b238=_0x1f5c57;this['_text']=this[_0x43b238(0xc2a)]()[_0x43b238(0x310)]();const _0x591d5b=this[_0x43b238(0x5ed)](this['_text'])[_0x43b238(0xac5)],_0x33c4da=Math[_0x43b238(0x93c)]((this[_0x43b238(0x5eb)]-_0x591d5b)/0x2);this[_0x43b238(0x2c9)](this[_0x43b238(0xbd8)],_0x33c4da,0x0,_0x591d5b+0x8);},Window_BattleLog[_0x1f5c57(0x605)]['maxLines']=function(){const _0x1a5199=_0x1f5c57;return VisuMZ['BattleCore']['Settings'][_0x1a5199(0x8fa)]['MaxLines'];},Window_BattleLog['prototype'][_0x1f5c57(0x749)]=function(){const _0x553d89=_0x1f5c57;return VisuMZ['BattleCore'][_0x553d89(0xbba)]['BattleLog'][_0x553d89(0x5c9)];},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x6a6)]=function(){const _0x549aa5=_0x1f5c57;return VisuMZ[_0x549aa5(0x6b3)][_0x549aa5(0xbba)]['BattleLog'][_0x549aa5(0x470)];},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xa4a)]=function(){return![];},Window_BattleLog['prototype'][_0x1f5c57(0x61e)]=function(_0x57152b,_0x528c24){const _0x3ea829=_0x1f5c57;this[_0x3ea829(0x902)](_0x3ea829(0x6d1)),BattleManager[_0x3ea829(0x5e8)](_0x57152b,_0x528c24),this['callNextMethod']();},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x6d1)]=function(){const _0x4a3757=_0x1f5c57;this[_0x4a3757(0x68e)]();},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x5af)]=function(_0x3b1363){const _0x538012=_0x1f5c57,_0x59fb72=Array[_0x538012(0x605)]['slice']['call'](arguments,0x1),_0x52d3f2={'name':_0x3b1363,'params':_0x59fb72},_0x396e54=this[_0x538012(0xb1e)][_0x538012(0x6f1)](_0x553a6f=>_0x553a6f[_0x538012(0x310)])[_0x538012(0x94d)]('actionSplicePoint');_0x396e54>=0x0?this[_0x538012(0xb1e)][_0x538012(0x2b8)](_0x396e54,0x0,_0x52d3f2):this['_methods'][_0x538012(0x5af)](_0x52d3f2);},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x902)]=function(_0x4216fc){const _0x2a9273=_0x1f5c57,_0x5d6dc2=Array[_0x2a9273(0x605)][_0x2a9273(0x7b5)][_0x2a9273(0x5a5)](arguments,0x1);this['_methods'][_0x2a9273(0x902)]({'name':_0x4216fc,'params':_0x5d6dc2});},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x8e2)]=function(){const _0x48d1d2=_0x1f5c57;if(!$gameTemp[_0x48d1d2(0x8da)]())return;console['log'](this[_0x48d1d2(0xb1e)][_0x48d1d2(0x6f1)](_0x769cf7=>_0x769cf7[_0x48d1d2(0x310)])['join']('\x0a'));},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x627)]=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xba7)],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xba7)]=function(){const _0x176ea3=_0x1f5c57;this[_0x176ea3(0x3dd)]=!![];},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x5b1)]=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x9ee)],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x9ee)]=function(){const _0x14fa45=_0x1f5c57;VisuMZ[_0x14fa45(0x6b3)][_0x14fa45(0x5b1)][_0x14fa45(0x5a5)](this);if(this[_0x14fa45(0x3dd)])this[_0x14fa45(0x5b8)]();},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x5b8)]=function(){const _0xba4d5c=_0x1f5c57;this[_0xba4d5c(0x3dd)]=![],VisuMZ[_0xba4d5c(0x6b3)][_0xba4d5c(0x627)][_0xba4d5c(0x5a5)](this);},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x976)]=function(_0x4a789d){const _0x36ea81=_0x1f5c57;let _0xef3c5c=VisuMZ[_0x36ea81(0x6b3)][_0x36ea81(0xbba)][_0x36ea81(0x8fa)][_0x36ea81(0x272)][_0x36ea81(0x281)]()[_0x36ea81(0xc8b)](),_0x1fc323=this[_0x36ea81(0x69b)][_0x4a789d];if(_0x1fc323[_0x36ea81(0x7a1)](/<LEFT>/i))_0xef3c5c=_0x36ea81(0x8d3);else{if(_0x1fc323[_0x36ea81(0x7a1)](/<CENTER>/i))_0xef3c5c=_0x36ea81(0x2d8);else _0x1fc323['match'](/<RIGHT>/i)&&(_0xef3c5c=_0x36ea81(0x7e5));}_0x1fc323=_0x1fc323['replace'](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x1fc323=_0x1fc323[_0x36ea81(0x6e6)](/\\I\[0\]/gi,'');const _0x34bf4c=this[_0x36ea81(0x99f)](_0x4a789d);this[_0x36ea81(0x36b)][_0x36ea81(0x9a5)](_0x34bf4c['x'],_0x34bf4c['y'],_0x34bf4c['width'],_0x34bf4c[_0x36ea81(0x53d)]);const _0x56fce7=this[_0x36ea81(0x5ed)](_0x1fc323)[_0x36ea81(0xac5)];let _0x247160=_0x34bf4c['x'];if(_0xef3c5c==='center')_0x247160+=(_0x34bf4c[_0x36ea81(0xac5)]-_0x56fce7)/0x2;else _0xef3c5c===_0x36ea81(0x7e5)&&(_0x247160+=_0x34bf4c['width']-_0x56fce7);this['drawTextEx'](_0x1fc323,_0x247160,_0x34bf4c['y'],_0x56fce7+0x8);},Window_BattleLog['prototype'][_0x1f5c57(0x5c6)]=function(_0x40ae8e){const _0x3ee4c9=_0x1f5c57;this[_0x3ee4c9(0x69b)]['push'](_0x40ae8e),this[_0x3ee4c9(0xba7)](),this[_0x3ee4c9(0x68e)]();},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x52c)]=function(){const _0x1d21d7=_0x1f5c57;let _0x465b5a=![];switch(this[_0x1d21d7(0x651)]){case _0x1d21d7(0xa2f):_0x465b5a=this['_spriteset'][_0x1d21d7(0x8ec)]();break;case _0x1d21d7(0xb67):_0x465b5a=this[_0x1d21d7(0x4d6)][_0x1d21d7(0x598)]();break;case'animation':_0x465b5a=this[_0x1d21d7(0x4d6)][_0x1d21d7(0x4b0)]();break;case _0x1d21d7(0x805):_0x465b5a=this[_0x1d21d7(0x4d6)][_0x1d21d7(0x977)]();break;case _0x1d21d7(0x47a):_0x465b5a=this[_0x1d21d7(0x4d6)]['isAnyoneJumping']();break;case _0x1d21d7(0x337):_0x465b5a=this[_0x1d21d7(0x4d6)][_0x1d21d7(0xb31)]();break;}return!_0x465b5a&&(this['_waitMode']=''),_0x465b5a;},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x7c8)]=function(){const _0xfb4e94=_0x1f5c57;this[_0xfb4e94(0x924)](_0xfb4e94(0x796));},Window_BattleLog[_0x1f5c57(0x605)]['waitForFloat']=function(){const _0x11ce2d=_0x1f5c57;this['setWaitMode'](_0x11ce2d(0x805));},Window_BattleLog[_0x1f5c57(0x605)]['waitForJump']=function(){const _0x506a00=_0x1f5c57;this[_0x506a00(0x924)](_0x506a00(0x47a));},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x344)]=function(){const _0x112d82=_0x1f5c57;this[_0x112d82(0x924)](_0x112d82(0x337));},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xc04)]=function(){const _0x521c55=_0x1f5c57,_0x57dca9=VisuMZ[_0x521c55(0x6b3)][_0x521c55(0xbba)][_0x521c55(0x8fa)];if(!_0x57dca9[_0x521c55(0x26e)])return;this[_0x521c55(0x5af)]('addText',_0x57dca9[_0x521c55(0xb51)][_0x521c55(0x98c)]($gameTroop[_0x521c55(0x898)]())),this['push'](_0x521c55(0x819),_0x57dca9[_0x521c55(0x9cd)]),this[_0x521c55(0x5af)](_0x521c55(0x8e1));},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xb32)]=function(_0x5426cd,_0x571496,_0x2ab597){const _0x468271=_0x1f5c57;if(this['isCustomActionSequence'](_0x571496)){if(_0x468271(0x65b)!=='qXrgY')BattleManager[_0x468271(0xc98)]();else{const _0x4b2ceb=this[_0x468271(0x784)];this[_0x468271(0x784)]=![];if(_0x49616c['isActiveTpb']()&&this[_0x468271(0x7e2)]()){const _0x395d03=this[_0x468271(0x4b2)]();if(_0x395d03&&_0x4b2ceb)_0x395d03['stepForward']();return;}const _0x1592d5=this['battler']();if(_0x1592d5)_0x1592d5['stepBack']();this['setBattlerFlip'](![]),this[_0x468271(0x2a5)]();}}else this[_0x468271(0xba5)](_0x5426cd,_0x571496,_0x2ab597);},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xa30)]=function(_0x2fdf4c){const _0x33ce4b=_0x1f5c57;if(!SceneManager['isSceneBattle']())return![];if(!_0x2fdf4c)return![];if(!_0x2fdf4c[_0x33ce4b(0x20c)]())return![];if(_0x2fdf4c['item']()[_0x33ce4b(0x9bc)][_0x33ce4b(0x7a1)](/<CUSTOM ACTION SEQUENCE>/i)){if('gpBAm'==='gpBAm')return!![];else _0x4e9d82[_0x33ce4b(0x831)]['_statusWindow'][_0x33ce4b(0x63a)](_0x441391);}if(DataManager[_0x33ce4b(0x903)](_0x2fdf4c[_0x33ce4b(0x20c)]()))return!![];return![];},Window_BattleLog[_0x1f5c57(0x605)]['usePremadeActionSequence']=function(_0xdbf9a2,_0x4d7c0f,_0x3fb1d8){const _0x5dd783=_0x1f5c57,_0x16e04e=_0x4d7c0f[_0x5dd783(0x20c)]();this[_0x5dd783(0x361)](_0xdbf9a2,_0x4d7c0f,_0x3fb1d8),this[_0x5dd783(0x87f)](_0xdbf9a2,_0x4d7c0f,_0x3fb1d8),this[_0x5dd783(0xb1f)](_0xdbf9a2,_0x4d7c0f,_0x3fb1d8);},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xa94)]=function(_0x4666bb,_0x4e7a30){const _0x41662e=_0x1f5c57,_0x5951af=VisuMZ['BattleCore']['Settings'][_0x41662e(0x8fa)];_0x5951af[_0x41662e(0x4fc)]&&(_0x41662e(0x647)==='kLleC'?this[_0x41662e(0xafd)](_0x41662e(0x846)):this[_0x41662e(0x5af)](_0x41662e(0x5c6),_0x41662e(0x9b0)[_0x41662e(0x98c)](DataManager['battleDisplayText'](_0x4e7a30))));if(DataManager[_0x41662e(0x482)](_0x4e7a30)){if('lmJKa'!=='YlXLJ'){if(_0x5951af['ActionSkillMsg1'])this['displayItemMessage'](_0x4e7a30[_0x41662e(0xc91)],_0x4666bb,_0x4e7a30);if(_0x5951af[_0x41662e(0x91f)])this[_0x41662e(0x4b9)](_0x4e7a30[_0x41662e(0x383)],_0x4666bb,_0x4e7a30);}else this[_0x41662e(0x6c3)](),this[_0x41662e(0x36d)]();}else{if(_0x5951af[_0x41662e(0x27d)])this[_0x41662e(0x4b9)](TextManager[_0x41662e(0x8e5)],_0x4666bb,_0x4e7a30);}},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x361)]=function(_0x57792b,_0x51136f,_0x389356){const _0x6152c5=_0x1f5c57,_0x49a9ce=_0x51136f[_0x6152c5(0x20c)]();this['displayAction'](_0x57792b,_0x49a9ce),this[_0x6152c5(0x5af)](_0x6152c5(0xab9),_0x57792b,_0x389356,!![]),this['push'](_0x6152c5(0x61f),_0x57792b,_0x51136f),this['push']('waitForMovement'),this[_0x6152c5(0x5af)](_0x6152c5(0x8a4),_0x57792b,_0x51136f),this[_0x6152c5(0x5af)](_0x6152c5(0x7c8));},Window_BattleLog[_0x1f5c57(0x605)]['createEffectActionSet']=function(_0x4e58b6,_0x69ebaf,_0x2b7ab2){const _0x31e0bc=_0x1f5c57;if(this[_0x31e0bc(0x587)](_0x69ebaf))this[_0x31e0bc(0x82f)](_0x4e58b6,_0x69ebaf,_0x2b7ab2);else{if(this[_0x31e0bc(0x937)](_0x69ebaf))this[_0x31e0bc(0x492)](_0x4e58b6,_0x69ebaf,_0x2b7ab2);else _0x69ebaf[_0x31e0bc(0x62b)]()?this[_0x31e0bc(0xaab)](_0x4e58b6,_0x69ebaf,_0x2b7ab2):this[_0x31e0bc(0x7ba)](_0x4e58b6,_0x69ebaf,_0x2b7ab2);}},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x587)]=function(_0x2e1270){const _0x5e9ad8=_0x1f5c57;if(!_0x2e1270['isPhysical']())return![];if(!_0x2e1270[_0x5e9ad8(0x543)]())return![];if(!_0x2e1270[_0x5e9ad8(0x38f)]())return![];return VisuMZ[_0x5e9ad8(0x6b3)][_0x5e9ad8(0xbba)][_0x5e9ad8(0xbaa)][_0x5e9ad8(0x5d7)];},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x82f)]=function(_0x3b9e11,_0x10fdbd,_0x18485c){const _0x476b5e=_0x1f5c57,_0x3b84fb=_0x3b9e11['getAttackMotion']()[_0x476b5e(0x73a)]<0x2,_0x538913=0x14,_0x17b4e2=0x30;_0x3b84fb&&(this['push'](_0x476b5e(0xac6),[_0x3b9e11],_0x17b4e2,_0x538913),this[_0x476b5e(0x5af)](_0x476b5e(0x9d9),_0x3b9e11,_0x18485c,'front\x20base',_0x538913,!![],'Linear',!![]),this['push']('requestMotion',[_0x3b9e11],_0x476b5e(0x1fa)),this[_0x476b5e(0x5af)](_0x476b5e(0x757)));let _0x32ab78=_0x10fdbd['isAttack']()?this[_0x476b5e(0x25f)](_0x3b9e11):0x1;for(let _0x590f14=0x0;_0x590f14<_0x32ab78;_0x590f14++){_0x10fdbd[_0x476b5e(0xad1)]()&&_0x3b9e11[_0x476b5e(0xbcf)]()&&(_0x476b5e(0x76b)!==_0x476b5e(0x76b)?_0x1b45e4=this['_baseLineStack'][this[_0x476b5e(0x9f7)][_0x476b5e(0x9fe)]-0x1]:this[_0x476b5e(0x5af)]('setActiveWeaponSet',_0x3b9e11,_0x590f14)),_0x10fdbd[_0x476b5e(0x20c)]()[_0x476b5e(0x6b6)]<0x0?this['targetActionSet'](_0x3b9e11,_0x10fdbd,_0x18485c):this['wholeActionSet'](_0x3b9e11,_0x10fdbd,_0x18485c);}if(_0x10fdbd[_0x476b5e(0xad1)]()&&_0x3b9e11[_0x476b5e(0xbcf)]()){if(_0x476b5e(0x6cb)==='VcCrv')this[_0x476b5e(0x5af)](_0x476b5e(0xc21),_0x3b9e11);else{const _0xb62d30=_0x2b65ce[_0x476b5e(0xbd9)](_0x26d98c['x'],_0x50dbf0['y']);if(this['_regionBattleback1']&&this['_regionBattleback2'][_0xb62d30])return this[_0x476b5e(0xb89)][_0xb62d30];}}this[_0x476b5e(0x5af)](_0x476b5e(0xab9),_0x3b9e11,_0x18485c,![]);if(_0x3b84fb){if(_0x476b5e(0xa79)===_0x476b5e(0xc26)){if(!this[_0x476b5e(0x5b6)]())return;const _0x1590e4=this[_0x476b5e(0x94b)](),_0x25949d=_0x4575e8[_0x476b5e(0x6b3)][_0x476b5e(0xbba)][_0x476b5e(0x415)][_0x476b5e(0x252)],_0x155905=_0x1590e4===_0x476b5e(0x245)?_0x186547[_0x476b5e(0xbc0)]:_0x476b5e(0x573)[_0x476b5e(0x98c)](_0x25949d,_0x17cad3[_0x476b5e(0xbc0)]),_0x8042ca=this[_0x476b5e(0x863)]();this[_0x476b5e(0xc54)](_0x155905,_0x476b5e(0xbc0),_0x8042ca);}else{const _0x533a45=_0x3b9e11[_0x476b5e(0x4b2)]();this[_0x476b5e(0x5af)](_0x476b5e(0xac6),[_0x3b9e11],_0x17b4e2,_0x538913),this[_0x476b5e(0x5af)](_0x476b5e(0x680),_0x3b9e11,_0x533a45[_0x476b5e(0x2b9)],_0x533a45[_0x476b5e(0xc60)],_0x538913,![],'Linear'),this[_0x476b5e(0x5af)](_0x476b5e(0x559),[_0x3b9e11],_0x476b5e(0x3c4)),this[_0x476b5e(0x5af)]('waitForMovement'),this[_0x476b5e(0x5af)](_0x476b5e(0x559),[_0x3b9e11],_0x476b5e(0x1fa));}}},Window_BattleLog[_0x1f5c57(0x605)]['isMeleeMultiTargetAction']=function(_0x67b915){const _0x40ddb5=_0x1f5c57;if(!_0x67b915[_0x40ddb5(0x8af)]())return![];if(!_0x67b915['isForAll']())return![];if(!_0x67b915[_0x40ddb5(0x38f)]())return![];return VisuMZ['BattleCore'][_0x40ddb5(0xbba)]['ActionSequence'][_0x40ddb5(0xbab)];},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x492)]=function(_0x181df2,_0x26e763,_0x56bbda){const _0x155330=_0x1f5c57,_0x139353=_0x181df2[_0x155330(0x7f1)]()['type']<0x2,_0x3f2ba6=0x14,_0x288526=0x30;_0x139353&&(this[_0x155330(0x5af)](_0x155330(0xac6),[_0x181df2],_0x288526,_0x3f2ba6),this['push'](_0x155330(0x9d9),_0x181df2,_0x56bbda,_0x155330(0xaf4),_0x3f2ba6,!![],'Linear',!![]),this[_0x155330(0x5af)](_0x155330(0x559),[_0x181df2],_0x155330(0x1fa)),this[_0x155330(0x5af)](_0x155330(0x757)));let _0x620ec9=_0x26e763[_0x155330(0xad1)]()?this[_0x155330(0x25f)](_0x181df2):0x1;for(let _0x31412d=0x0;_0x31412d<_0x620ec9;_0x31412d++){_0x26e763[_0x155330(0xad1)]()&&_0x181df2[_0x155330(0xbcf)]()&&this[_0x155330(0x5af)](_0x155330(0x98d),_0x181df2,_0x31412d),this['wholeActionSet'](_0x181df2,_0x26e763,_0x56bbda);}_0x26e763[_0x155330(0xad1)]()&&_0x181df2[_0x155330(0xbcf)]()&&(_0x155330(0x974)!=='VlVJO'?this['_battleField'][_0x155330(0x45b)](this[_0x155330(0xc7a)]):this[_0x155330(0x5af)](_0x155330(0xc21),_0x181df2));this['push'](_0x155330(0xab9),_0x181df2,_0x56bbda,![]);if(_0x139353){if(_0x155330(0x817)===_0x155330(0xb79)){let _0x4d8a5b='';if(_0xd36f7b[_0x155330(0x60e)](_0x20d916))_0x4d8a5b=_0x155330(0x487)[_0x155330(0x98c)](_0x3b724e['id'],_0x1b0d2f);if(_0xefdb9b[_0x155330(0x60e)](_0x37a798))_0x4d8a5b=_0x155330(0x8dd)['format'](_0x5c6eba['id'],_0x4ec60c);if(_0x46a7c6[_0x155330(0x60e)](_0x46a968))_0x4d8a5b=_0x155330(0x401)[_0x155330(0x98c)](_0x5e0630['id'],_0x4ba19f);if(_0x16bc14[_0x155330(0x60e)](_0x18e21f))_0x4d8a5b=_0x155330(0x6a9)[_0x155330(0x98c)](_0x12b0f4['id'],_0xdcab34);if(_0x4c390a[_0x155330(0x60e)](_0x51da63))_0x4d8a5b='Weapon-%1-%2'[_0x155330(0x98c)](_0x54e6ee['id'],_0x339419);if(_0x3b9c85[_0x155330(0x60e)](_0x11d256))_0x4d8a5b='Armor-%1-%2'['format'](_0x36c604['id'],_0xaddc0a);if(_0x2573c2[_0x155330(0x60e)](_0x3b18e2))_0x4d8a5b='Enemy-%1-%2'[_0x155330(0x98c)](_0x22ea11['id'],_0x3edad3);if(_0x373409[_0x155330(0x60e)](_0x22127e))_0x4d8a5b='State-%1-%2'[_0x155330(0x98c)](_0x52a2e7['id'],_0x3e2d7b);return _0x4d8a5b;}else{const _0x51ee86=_0x181df2[_0x155330(0x4b2)]();this['push'](_0x155330(0xac6),[_0x181df2],_0x288526,_0x3f2ba6),this[_0x155330(0x5af)](_0x155330(0x680),_0x181df2,_0x51ee86['_homeX'],_0x51ee86[_0x155330(0xc60)],_0x3f2ba6,![],_0x155330(0x9b1)),this[_0x155330(0x5af)](_0x155330(0x559),[_0x181df2],_0x155330(0x3c4)),this[_0x155330(0x5af)](_0x155330(0x757)),this[_0x155330(0x5af)](_0x155330(0x559),[_0x181df2],_0x155330(0x1fa));}}},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xaab)]=function(_0x62d0b1,_0x396a64,_0x58b080){const _0x536de3=_0x1f5c57,_0x4fb9b2=_0x396a64[_0x536de3(0x20c)]();for(const _0x503637 of _0x58b080){if(!_0x503637)continue;this['push'](_0x536de3(0x6ce),_0x62d0b1,_0x396a64),this[_0x536de3(0x5af)](_0x536de3(0x819),Sprite_Battler[_0x536de3(0x909)]),this[_0x536de3(0x5af)](_0x536de3(0xc82),_0x62d0b1,[_0x503637],_0x4fb9b2[_0x536de3(0x6b6)]),this['push']('waitCount',0x18),this[_0x536de3(0x5af)](_0x536de3(0x61e),_0x62d0b1,_0x503637);}},Window_BattleLog['prototype']['wholeActionSet']=function(_0x4b078b,_0x556230,_0x4ae3b7){const _0x3c30f4=_0x1f5c57,_0xded89c=_0x556230[_0x3c30f4(0x20c)]();this['push'](_0x3c30f4(0x6ce),_0x4b078b,_0x556230),this[_0x3c30f4(0x5af)](_0x3c30f4(0x819),Sprite_Battler[_0x3c30f4(0x909)]),this[_0x3c30f4(0x5af)](_0x3c30f4(0xc82),_0x4b078b,_0x4ae3b7[_0x3c30f4(0xa3d)](),_0xded89c[_0x3c30f4(0x6b6)]),this[_0x3c30f4(0x5af)]('waitForAnimation');for(const _0x56880d of _0x4ae3b7){if('SCBin'===_0x3c30f4(0x761))this[_0x3c30f4(0x402)]();else{if(!_0x56880d)continue;this[_0x3c30f4(0x5af)](_0x3c30f4(0x61e),_0x4b078b,_0x56880d);}}},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xb1f)]=function(_0x594c1a,_0x47b5e8,_0x2806de){const _0x202fd7=_0x1f5c57,_0x80e960=_0x47b5e8['item']();this[_0x202fd7(0x5af)](_0x202fd7(0xab9),_0x594c1a,_0x2806de,![]),this[_0x202fd7(0x5af)]('waitForNewLine'),this['push'](_0x202fd7(0x4f8)),this[_0x202fd7(0x5af)](_0x202fd7(0x8e1)),this[_0x202fd7(0x5af)](_0x202fd7(0x58d),_0x594c1a),this[_0x202fd7(0x5af)](_0x202fd7(0x757));},Window_BattleLog[_0x1f5c57(0x605)]['endAction']=function(_0x45bda1){},VisuMZ[_0x1f5c57(0x6b3)]['Window_BattleLog_displayCurrentState']=Window_BattleLog[_0x1f5c57(0x605)]['displayCurrentState'],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x399)]=function(_0x44152d){const _0x5db139=_0x1f5c57;if(!VisuMZ[_0x5db139(0x6b3)][_0x5db139(0xbba)][_0x5db139(0x8fa)][_0x5db139(0x241)])return;VisuMZ[_0x5db139(0x6b3)][_0x5db139(0xb7d)]['call'](this,_0x44152d);},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x534)]=function(_0x48e430){const _0x1cd1bf=_0x1f5c57;this[_0x1cd1bf(0x5af)](_0x1cd1bf(0x395),_0x48e430);if(VisuMZ[_0x1cd1bf(0x6b3)][_0x1cd1bf(0xbba)]['ActionSequence']['CounterPlayback']){if('eYWhk'!=='eYWhk')return this[_0x1cd1bf(0x4c1)](_0xab8da3);else this['push'](_0x1cd1bf(0xc82),_0x48e430,[BattleManager[_0x1cd1bf(0x33d)]],-0x1);}if(!VisuMZ[_0x1cd1bf(0x6b3)][_0x1cd1bf(0xbba)][_0x1cd1bf(0x8fa)][_0x1cd1bf(0x6e2)])return;this[_0x1cd1bf(0x5af)](_0x1cd1bf(0x5c6),TextManager['counterAttack'][_0x1cd1bf(0x98c)](_0x48e430[_0x1cd1bf(0x310)]()));},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x7ac)]=function(_0xcf6b2d){const _0x3d07c1=_0x1f5c57;this[_0x3d07c1(0x5af)](_0x3d07c1(0x7c1),_0xcf6b2d);if(!VisuMZ[_0x3d07c1(0x6b3)][_0x3d07c1(0xbba)][_0x3d07c1(0x8fa)][_0x3d07c1(0x806)])return;this['push']('addText',TextManager[_0x3d07c1(0x6a3)][_0x3d07c1(0x98c)](_0xcf6b2d[_0x3d07c1(0x310)]()));},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x8c5)]=function(_0x531e01,_0x562cfa){const _0x4e7a07=_0x1f5c57;if(VisuMZ[_0x4e7a07(0x6b3)][_0x4e7a07(0xbba)][_0x4e7a07(0xbaa)][_0x4e7a07(0x244)]){if(_0x4e7a07(0xb5d)===_0x4e7a07(0xb5d)){const _0x5b4c38=_0x562cfa['item']();this[_0x4e7a07(0x5af)]('showAnimation',_0x531e01,[_0x531e01],_0x5b4c38[_0x4e7a07(0x6b6)]);}else{if(this['_actions'][_0x4e7a07(0x9d3)](_0x21f9e6=>_0x21f9e6[_0x4e7a07(0x20c)]()&&_0x21f9e6['isMagicSkill']()))return!![];}}},Window_BattleLog['prototype'][_0x1f5c57(0xc0b)]=function(_0x51ea50,_0x3c8201){const _0x5789f9=_0x1f5c57;this[_0x5789f9(0x5af)](_0x5789f9(0xa0d),_0x51ea50,_0x3c8201);if(!VisuMZ[_0x5789f9(0x6b3)][_0x5789f9(0xbba)][_0x5789f9(0x8fa)][_0x5789f9(0x74e)])return;const _0x5d646c=_0x51ea50[_0x5789f9(0x310)](),_0x4cb974=TextManager[_0x5789f9(0x220)][_0x5789f9(0x98c)](_0x5d646c,_0x3c8201[_0x5789f9(0x310)]());this[_0x5789f9(0x5af)](_0x5789f9(0x5c6),_0x4cb974);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x2e8)]=Window_BattleLog['prototype']['displayActionResults'],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x343)]=function(_0x3d528d,_0x793a03){const _0x279dbd=_0x1f5c57;VisuMZ[_0x279dbd(0x6b3)]['Window_BattleLog_displayActionResults'][_0x279dbd(0x5a5)](this,_0x3d528d,_0x793a03);},VisuMZ['BattleCore']['Window_BattleLog_displayFailure']=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x3c5)],Window_BattleLog[_0x1f5c57(0x605)]['displayFailure']=function(_0x52ef4b){const _0x254cf0=_0x1f5c57;if(!VisuMZ[_0x254cf0(0x6b3)][_0x254cf0(0xbba)][_0x254cf0(0x8fa)][_0x254cf0(0xa92)])return;VisuMZ['BattleCore'][_0x254cf0(0x502)]['call'](this,_0x52ef4b);},VisuMZ[_0x1f5c57(0x6b3)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xa40)],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xa40)]=function(_0x460351){const _0x1c1077=_0x1f5c57;if(!VisuMZ['BattleCore'][_0x1c1077(0xbba)][_0x1c1077(0x8fa)][_0x1c1077(0x414)])return;VisuMZ[_0x1c1077(0x6b3)][_0x1c1077(0x7b4)][_0x1c1077(0x5a5)](this,_0x460351);},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x455)]=Window_BattleLog['prototype'][_0x1f5c57(0xac1)],Window_BattleLog['prototype'][_0x1f5c57(0xac1)]=function(_0x2a5685){const _0x2a11e4=_0x1f5c57;!VisuMZ[_0x2a11e4(0x6b3)][_0x2a11e4(0xbba)][_0x2a11e4(0x8fa)][_0x2a11e4(0xc1c)]?this[_0x2a11e4(0x5af)](_0x2a11e4(0x433),_0x2a5685):VisuMZ[_0x2a11e4(0x6b3)][_0x2a11e4(0x455)]['call'](this,_0x2a5685);},VisuMZ['BattleCore'][_0x1f5c57(0xa65)]=Window_BattleLog['prototype'][_0x1f5c57(0xa95)],Window_BattleLog['prototype'][_0x1f5c57(0xa95)]=function(_0x273b69){const _0x383681=_0x1f5c57;if(!VisuMZ[_0x383681(0x6b3)][_0x383681(0xbba)]['BattleLog'][_0x383681(0xc1c)]){if(_0x273b69[_0x383681(0x260)]()['physical']){if('uRyTF'===_0x383681(0xabf))this[_0x383681(0x5af)](_0x383681(0x890),_0x273b69);else{_0x38fe43=_0x360704[_0x383681(0x6b3)]['JS'][_0x2d5b29][_0x383681(0x5a5)](this,this['subject'](),_0x2257d8,_0x7e326,_0x2b08ab);if(_0x50a13d)_0x5a057e=_0xf047f7;}}else this[_0x383681(0x5af)](_0x383681(0x803),_0x273b69);}else{if('tOgsz'!==_0x383681(0x7f5))return this[_0x383681(0xc1b)](_0x2ed28b);else VisuMZ[_0x383681(0x6b3)][_0x383681(0xa65)][_0x383681(0x5a5)](this,_0x273b69);}},Window_BattleLog[_0x1f5c57(0x605)]['displayHpDamage']=function(_0x43f1b7){const _0x37cd60=_0x1f5c57;_0x43f1b7[_0x37cd60(0x260)]()['hpAffected']&&(_0x43f1b7[_0x37cd60(0x260)]()[_0x37cd60(0xc11)]>0x0&&!_0x43f1b7[_0x37cd60(0x260)]()[_0x37cd60(0x351)]&&(_0x37cd60(0xa09)!==_0x37cd60(0xa09)?(_0x30136e*=_0x4e3f9d[_0x37cd60(0x3b5)](_0x3d1d78[_0x37cd60(0x5cc)]),_0x15d85d*=this[_0x37cd60(0xc85)](_0x5b91bb)):this[_0x37cd60(0x5af)](_0x37cd60(0x4dc),_0x43f1b7)),_0x43f1b7[_0x37cd60(0x260)]()[_0x37cd60(0xc11)]<0x0&&this['push'](_0x37cd60(0x30b),_0x43f1b7),VisuMZ[_0x37cd60(0x6b3)][_0x37cd60(0xbba)][_0x37cd60(0x8fa)][_0x37cd60(0x55a)]&&this[_0x37cd60(0x5af)](_0x37cd60(0x5c6),this[_0x37cd60(0xab8)](_0x43f1b7)));},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x2aa)]=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x2ad)],Window_BattleLog[_0x1f5c57(0x605)]['displayMpDamage']=function(_0xa24dc1){const _0x1b1f6f=_0x1f5c57;if(!VisuMZ[_0x1b1f6f(0x6b3)]['Settings'][_0x1b1f6f(0x8fa)][_0x1b1f6f(0x24f)])return;VisuMZ[_0x1b1f6f(0x6b3)]['Window_BattleLog_displayMpDamage'][_0x1b1f6f(0x5a5)](this,_0xa24dc1);},VisuMZ['BattleCore'][_0x1f5c57(0x2eb)]=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x408)],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x408)]=function(_0xd751a2){const _0x19330e=_0x1f5c57;if(!VisuMZ[_0x19330e(0x6b3)]['Settings'][_0x19330e(0x8fa)]['ShowTpDmg'])return;VisuMZ['BattleCore'][_0x19330e(0x2eb)][_0x19330e(0x5a5)](this,_0xd751a2);},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x283)]=function(_0x47a957){const _0x58c6a3=_0x1f5c57;if(_0x47a957[_0x58c6a3(0x260)]()['isStatusAffected']()){if(_0x58c6a3(0x511)===_0x58c6a3(0x511))this[_0x58c6a3(0x5af)]('pushBaseLine'),this[_0x58c6a3(0x934)](_0x47a957),this[_0x58c6a3(0x93b)](_0x47a957),this[_0x58c6a3(0x5af)](_0x58c6a3(0x5bc));else{if(_0x3a8a6d['isPreviousSceneBattleTransitionable']())return;if(!_0x60edf)return;if(!_0x1d0872[_0x58c6a3(0x797)]())return;_0x3201e7[_0x58c6a3(0x6b3)][_0x58c6a3(0x60f)][_0x58c6a3(0x5a5)](this);}}},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xc6c)]=function(_0x48f9ba){const _0x19005f=_0x1f5c57,_0x484381=_0x48f9ba[_0x19005f(0x260)](),_0x2de0c0=_0x484381[_0x19005f(0xbb6)]();for(const _0x2d1c6c of _0x2de0c0){if(_0x19005f(0x595)!=='JbbGe')return _0x22e1e3[_0x19005f(0x6b3)]['Scene_Battle_itemWindowRect'][_0x19005f(0x5a5)](this);else{const _0x237ba6=_0x48f9ba[_0x19005f(0xbcf)]()?_0x2d1c6c['message1']:_0x2d1c6c[_0x19005f(0x383)];_0x237ba6&&VisuMZ[_0x19005f(0x6b3)][_0x19005f(0xbba)][_0x19005f(0x8fa)][_0x19005f(0x925)]&&(_0x19005f(0x46a)==='GmOhz'?this[_0x19005f(0x559)](_0x19005f(0x56b)):(this[_0x19005f(0x5af)](_0x19005f(0xbf2)),this[_0x19005f(0x5af)]('popBaseLine'),this[_0x19005f(0x5af)](_0x19005f(0x67c)),this['push']('addText',_0x237ba6[_0x19005f(0x98c)](_0x48f9ba[_0x19005f(0x310)]())),this[_0x19005f(0x5af)](_0x19005f(0x478)))),_0x2d1c6c['id']===_0x48f9ba[_0x19005f(0x50c)]()&&this['push']('performCollapse',_0x48f9ba);}}},Window_BattleLog['prototype'][_0x1f5c57(0xbf2)]=function(){},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0xbb3)]=function(_0x344a55){const _0x13e521=_0x1f5c57;if(!VisuMZ[_0x13e521(0x6b3)]['Settings'][_0x13e521(0x8fa)][_0x13e521(0x456)])return;const _0x410beb=_0x344a55[_0x13e521(0x260)](),_0x3b0320=_0x410beb[_0x13e521(0xb04)]();for(const _0x19f864 of _0x3b0320){_0x19f864[_0x13e521(0x8dc)]&&(this[_0x13e521(0x5af)]('fnordRemovedStates'),this['push']('popBaseLine'),this[_0x13e521(0x5af)](_0x13e521(0x67c)),this['push'](_0x13e521(0x5c6),_0x19f864[_0x13e521(0x8dc)][_0x13e521(0x98c)](_0x344a55[_0x13e521(0x310)]())),this[_0x13e521(0x5af)](_0x13e521(0x478)));}},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x7b2)]=function(){},Window_BattleLog[_0x1f5c57(0x605)]['displayChangedBuffs']=function(_0x4a70ef){const _0x2aaa25=_0x1f5c57,_0x1435c4=VisuMZ[_0x2aaa25(0x6b3)][_0x2aaa25(0xbba)]['BattleLog'],_0xdc8f4f=_0x4a70ef[_0x2aaa25(0x260)]();if(_0x1435c4[_0x2aaa25(0x400)])this[_0x2aaa25(0x6c4)](_0x4a70ef,_0xdc8f4f[_0x2aaa25(0x82c)],TextManager[_0x2aaa25(0x851)]);if(_0x1435c4[_0x2aaa25(0xc0d)])this[_0x2aaa25(0x6c4)](_0x4a70ef,_0xdc8f4f[_0x2aaa25(0x26b)],TextManager[_0x2aaa25(0x8cf)]);if(_0x1435c4[_0x2aaa25(0x1ce)])this['displayBuffs'](_0x4a70ef,_0xdc8f4f[_0x2aaa25(0xac4)],TextManager['buffRemove']);},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x6c4)]=function(_0x2a5f0f,_0xb4dba0,_0x3381b5){const _0x5e53e8=_0x1f5c57;for(const _0x3fb4ce of _0xb4dba0){const _0x4ce198=_0x3381b5['format'](_0x2a5f0f[_0x5e53e8(0x310)](),TextManager[_0x5e53e8(0xa96)](_0x3fb4ce));this['push'](_0x5e53e8(0xa73)),this[_0x5e53e8(0x5af)](_0x5e53e8(0x67c)),this['push']('addText',_0x4ce198),this[_0x5e53e8(0x5af)](_0x5e53e8(0x478));}},VisuMZ['BattleCore']['Window_BattleLog_clear']=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x8e1)],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x8e1)]=function(){const _0x3e4f09=_0x1f5c57;VisuMZ[_0x3e4f09(0x6b3)][_0x3e4f09(0x93a)][_0x3e4f09(0x5a5)](this),this[_0x3e4f09(0x68e)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x2c6)]=Window_BattleLog['prototype']['pushBaseLine'],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x67c)]=function(){const _0x3bd9a5=_0x1f5c57;VisuMZ[_0x3bd9a5(0x6b3)][_0x3bd9a5(0x2c6)]['call'](this),this[_0x3bd9a5(0x68e)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x293)]=Window_BattleLog[_0x1f5c57(0x605)]['popBaseLine'],Window_BattleLog['prototype'][_0x1f5c57(0xa73)]=function(){const _0x551eb7=_0x1f5c57;VisuMZ[_0x551eb7(0x6b3)][_0x551eb7(0x293)][_0x551eb7(0x5a5)](this),this[_0x551eb7(0x5b8)](),this[_0x551eb7(0x68e)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x610)]=Window_BattleLog['prototype'][_0x1f5c57(0x4e7)],Window_BattleLog['prototype']['popupDamage']=function(_0x243d0b){const _0x57041d=_0x1f5c57;VisuMZ[_0x57041d(0x6b3)]['Window_BattleLog_popupDamage']['call'](this,_0x243d0b),this[_0x57041d(0x68e)]();},Window_BattleLog['prototype']['waitForNewLine']=function(){const _0xd7cfa4=_0x1f5c57;let _0x1b5e45=0x0;this[_0xd7cfa4(0x9f7)][_0xd7cfa4(0x9fe)]>0x0&&(_0x1b5e45=this[_0xd7cfa4(0x9f7)][this[_0xd7cfa4(0x9f7)][_0xd7cfa4(0x9fe)]-0x1]),this[_0xd7cfa4(0x69b)][_0xd7cfa4(0x9fe)]>_0x1b5e45?this[_0xd7cfa4(0x478)]():'fmtro'!=='fmtro'?(_0x28ff77['prototype'][_0xd7cfa4(0x803)][_0xd7cfa4(0x5a5)](this),this[_0xd7cfa4(0x559)](_0xd7cfa4(0x3c4))):this[_0xd7cfa4(0x68e)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x79f)]=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x61f)],Window_BattleLog[_0x1f5c57(0x605)]['performActionStart']=function(_0xde62b3,_0x13b9c7){const _0x3ef5d8=_0x1f5c57;VisuMZ[_0x3ef5d8(0x6b3)]['Window_BattleLog_performActionStart'][_0x3ef5d8(0x5a5)](this,_0xde62b3,_0x13b9c7),this[_0x3ef5d8(0x68e)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xb03)]=Window_BattleLog['prototype'][_0x1f5c57(0x6ce)],Window_BattleLog['prototype']['performAction']=function(_0x1e17eb,_0x2c49c0){const _0x2900d6=_0x1f5c57;VisuMZ[_0x2900d6(0x6b3)]['Window_BattleLog_performAction'][_0x2900d6(0x5a5)](this,_0x1e17eb,_0x2c49c0),this[_0x2900d6(0x68e)]();},VisuMZ['BattleCore']['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x58d)],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x58d)]=function(_0x140403){const _0x432df0=_0x1f5c57;VisuMZ['BattleCore']['Window_BattleLog_performActionEnd']['call'](this,_0x140403);for(const _0x554d1f of BattleManager[_0x432df0(0x84e)]()){if(!_0x554d1f)continue;if(_0x554d1f['isDead']())continue;_0x554d1f['performActionEndMembers']();}this[_0x432df0(0x68e)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x46d)]=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x4dc)],Window_BattleLog['prototype'][_0x1f5c57(0x4dc)]=function(_0x2d15b8){const _0x510241=_0x1f5c57;VisuMZ['BattleCore'][_0x510241(0x46d)]['call'](this,_0x2d15b8),this[_0x510241(0x68e)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x2cd)]=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x433)],Window_BattleLog['prototype'][_0x1f5c57(0x433)]=function(_0x1375fb){const _0x4bf0c9=_0x1f5c57;VisuMZ[_0x4bf0c9(0x6b3)][_0x4bf0c9(0x2cd)][_0x4bf0c9(0x5a5)](this,_0x1375fb),this[_0x4bf0c9(0x68e)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x9d2)]=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x30b)],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x30b)]=function(_0x1acf95){const _0x5345d8=_0x1f5c57;VisuMZ['BattleCore'][_0x5345d8(0x9d2)][_0x5345d8(0x5a5)](this,_0x1acf95),this[_0x5345d8(0x68e)]();},VisuMZ['BattleCore']['Window_BattleLog_performEvasion']=Window_BattleLog[_0x1f5c57(0x605)]['performEvasion'],Window_BattleLog[_0x1f5c57(0x605)]['performEvasion']=function(_0x39e62c){const _0x4d8a15=_0x1f5c57;VisuMZ['BattleCore'][_0x4d8a15(0x92f)][_0x4d8a15(0x5a5)](this,_0x39e62c),this['callNextMethod']();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x257)]=Window_BattleLog[_0x1f5c57(0x605)]['performMagicEvasion'],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x803)]=function(_0x35d7b5){const _0xad9162=_0x1f5c57;VisuMZ['BattleCore'][_0xad9162(0x257)][_0xad9162(0x5a5)](this,_0x35d7b5),this['callNextMethod']();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x5d8)]=Window_BattleLog['prototype'][_0x1f5c57(0x395)],Window_BattleLog['prototype']['performCounter']=function(_0x2795f4){const _0x54429e=_0x1f5c57;VisuMZ[_0x54429e(0x6b3)][_0x54429e(0x5d8)][_0x54429e(0x5a5)](this,_0x2795f4),this[_0x54429e(0x68e)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0x224)]=Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x7c1)],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x7c1)]=function(_0x441249){const _0x5971c8=_0x1f5c57;VisuMZ[_0x5971c8(0x6b3)][_0x5971c8(0x224)][_0x5971c8(0x5a5)](this,_0x441249),this[_0x5971c8(0x68e)]();},VisuMZ[_0x1f5c57(0x6b3)][_0x1f5c57(0xa1e)]=Window_BattleLog['prototype']['performSubstitute'],Window_BattleLog['prototype'][_0x1f5c57(0xa0d)]=function(_0x416086,_0x1d9376){const _0x421f13=_0x1f5c57;VisuMZ[_0x421f13(0x6b3)][_0x421f13(0xa1e)][_0x421f13(0x5a5)](this,_0x416086,_0x1d9376),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performCollapse']=Window_BattleLog['prototype'][_0x1f5c57(0x630)],Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x630)]=function(_0x24f8d3){const _0x58dbe1=_0x1f5c57;VisuMZ[_0x58dbe1(0x6b3)]['Window_BattleLog_performCollapse'][_0x58dbe1(0x5a5)](this,_0x24f8d3),this[_0x58dbe1(0x68e)]();},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x8a4)]=function(_0x51b508,_0x2df4ba){const _0xb05f02=_0x1f5c57;_0x51b508['performCastAnimation'](_0x2df4ba),this[_0xb05f02(0x68e)]();},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x894)]=function(_0x68bbb3,_0x82f727){const _0x1a742f=_0x1f5c57,_0x11d5cf=_0x68bbb3[_0x1a742f(0xa4e)]();_0x11d5cf<=0x0?SoundManager['playEnemyAttack']():this[_0x1a742f(0x545)](_0x82f727,_0x11d5cf);},Window_BattleLog['prototype'][_0x1f5c57(0xab9)]=function(_0x89f7b3,_0x3331a1,_0x2b9061){const _0x32d450=_0x1f5c57,_0x584ede=[_0x89f7b3]['concat'](_0x3331a1);for(const _0x1d121c of _0x584ede){if(!_0x1d121c)continue;_0x1d121c['setImmortal'](_0x2b9061);}this[_0x32d450(0x68e)]();},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x819)]=function(_0x507876){const _0xed0dd5=_0x1f5c57;this[_0xed0dd5(0xa53)]=_0x507876;},Window_BattleLog[_0x1f5c57(0x605)]['requestMotion']=function(_0x1252c9,_0x5a0637){const _0xe36be9=_0x1f5c57;for(const _0x36286f of _0x1252c9){if(!_0x36286f)continue;_0x36286f['requestMotion'](_0x5a0637);}this[_0xe36be9(0x68e)]();},Window_BattleLog[_0x1f5c57(0x605)][_0x1f5c57(0x680)]=function(_0x1a6ee8,_0x621994,_0x47c58c,_0x5c1ac2,_0x37a8b5,_0x253352){const _0x101d8a=_0x1f5c57;_0x1a6ee8[_0x101d8a(0x464)](_0x621994,_0x47c58c,_0x5c1ac2,_0x37a8b5,_0x253352,-0x1),this[_0x101d8a(0x68e)]();},Window_BattleLog['prototype'][_0x1f5c57(0x9d9)]=function(_0x5c3349,_0x389a36,_0x2802f1,_0x7dd8d,_0x2daf3d,_0x17f350,_0x329625){const _0x3f2a9c=_0x1f5c57,_0x329fb0=Math[_0x3f2a9c(0xaea)](..._0x389a36[_0x3f2a9c(0x6f1)](_0x2c50d8=>_0x2c50d8[_0x3f2a9c(0x4b2)]()[_0x3f2a9c(0x1ed)]-_0x2c50d8[_0x3f2a9c(0x4b2)]()[_0x3f2a9c(0x8c7)]()/0x2)),_0x5beb16=Math[_0x3f2a9c(0x795)](..._0x389a36[_0x3f2a9c(0x6f1)](_0x785cd0=>_0x785cd0[_0x3f2a9c(0x4b2)]()[_0x3f2a9c(0x1ed)]+_0x785cd0[_0x3f2a9c(0x4b2)]()[_0x3f2a9c(0x8c7)]()/0x2)),_0x16bfe7=Math[_0x3f2a9c(0xaea)](..._0x389a36[_0x3f2a9c(0x6f1)](_0x29e7f0=>_0x29e7f0[_0x3f2a9c(0x4b2)]()[_0x3f2a9c(0x8b7)]-_0x29e7f0[_0x3f2a9c(0x4b2)]()[_0x3f2a9c(0xc35)]())),_0x209d3e=Math[_0x3f2a9c(0x795)](..._0x389a36[_0x3f2a9c(0x6f1)](_0x150e9c=>_0x150e9c[_0x3f2a9c(0x4b2)]()[_0x3f2a9c(0x8b7)])),_0x5703bb=_0x389a36[_0x3f2a9c(0x6ae)](_0x5513d5=>_0x5513d5['isActor']())[_0x3f2a9c(0x9fe)],_0x11ff99=_0x389a36[_0x3f2a9c(0x6ae)](_0x18279b=>_0x18279b[_0x3f2a9c(0x951)]())[_0x3f2a9c(0x9fe)];let _0x33578f=0x0,_0x3c2182=0x0;if(_0x2802f1[_0x3f2a9c(0x7a1)](/front/i))_0x33578f=_0x5703bb>=_0x11ff99?_0x329fb0:_0x5beb16;else{if(_0x2802f1[_0x3f2a9c(0x7a1)](/middle/i))_0x33578f=(_0x329fb0+_0x5beb16)/0x2,_0x329625=-0x1;else{if(_0x2802f1[_0x3f2a9c(0x7a1)](/back/i)){if(_0x3f2a9c(0x2d4)==='KoXrJ')return this[_0x3f2a9c(0xa2e)]>0x0;else _0x33578f=_0x5703bb>=_0x11ff99?_0x5beb16:_0x329fb0;}}}if(_0x2802f1[_0x3f2a9c(0x7a1)](/head/i))_0x3c2182=_0x16bfe7;else{if(_0x2802f1[_0x3f2a9c(0x7a1)](/center/i))_0x3f2a9c(0x532)!==_0x3f2a9c(0xc43)?_0x3c2182=(_0x16bfe7+_0x209d3e)/0x2:this['_mainSprite']['bitmap'][_0x3f2a9c(0xb4f)]=this[_0x3f2a9c(0xc49)][_0x3f2a9c(0xb44)]();else _0x2802f1[_0x3f2a9c(0x7a1)](/base/i)&&(_0x3c2182=_0x209d3e);}_0x5c3349['moveBattlerToPoint'](_0x33578f,_0x3c2182,_0x7dd8d,_0x2daf3d,_0x17f350,_0x329625),this[_0x3f2a9c(0x68e)]();},Window_BattleLog['prototype'][_0x1f5c57(0xac6)]=function(_0x137eef,_0x317942,_0xb7b606){const _0x226d4e=_0x1f5c57;for(const _0x434b1c of _0x137eef){if(!_0x434b1c)continue;_0x434b1c[_0x226d4e(0x365)](_0x317942,_0xb7b606);}this[_0x226d4e(0x68e)]();};